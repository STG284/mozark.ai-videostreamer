{"version":3,"sources":["app/pages/Appium/components/TvIconButton.tsx","app/pages/TvAutomate/Features/TvMozarkAutomate.tsx","app/pages/TvAutomate/index.tsx"],"names":["TvIconButton","props","getInputProps","getCheckboxProps","useRadio","input","checkbox","_jsx","_Fragment","children","_jsxs","Box","as","Center","align","justify","cursor","bg","borderRadius","w","width","h","height","color","border","_checked","Icon","BsFillTvFill","timeIntervalValue","TvMozarkAutomate","_ref","setTabIndexStatus","getInterval","setInterval","useState","getMaxTestDuration","setMaxTestDuration","startDate","setStartDate","setHours","setMinutes","Date","getMinutes","getHours","endDate","setEndDate","getMd5Sum","setMd5Sum","dispatch","useDispatch","toast","useToast","getMessageFlag","setMessageFlag","projectName","setProjectName","activeDevicePopup","setActiveDevicePopup","selectProject","setSelectProject","getPackageName","setPackageName","recordNetworkCalls","setRecordNetworkCalls","recordCPU","setRecordCPU","recordMemory","setRecordMemory","recordBattery","setRecordBattery","recordGraphics","setRecordGraphics","recordDeviceScreenShots","setRecordDeviceScreenShots","recordDeviceScreen","setRecordDeviceScreen","recordDeviceNetworkPackets","setRecordDeviceNetworkPackets","automationExecutionLogs","setAutomationExecutionLogs","systemDebugLogs","setSystemDebugLogs","liveLogs","setLiveLogs","recordTvScreen","setRecordTvScreen","getApplicationType","setApplicationType","scriptName","setScriptName","kpiEventConfiguration","setKpiEventConfiguration","kpiConfiguration","setKpiConfiguration","eventAttributes","setEventAttributes","selectScript","setSelectScript","getListingDevices","useSelector","selectListingDevices","testExecutionActions","useTestExecutionSlice","selectProjectOptionList","selectProjectList","createdPojectResponse","selectCreatedProject","createdPojectError","selectCreateProjectError","selectAppBuild","setSelectAppBuild","appbuildFile","setAppbuildFile","eventConfugFile","setEventConfigFile","getSelectedDeviceList","setSelectedDeviceList","getAddedKey","setAddedKey","getSelectedDeviceListTV","setSelectedDeviceListTV","getMd5SumAppBuild","setMd5SumAppBuild","getMd5SumScript","setMd5SumScript","areDevicesBusy","setAreDevicesBusy","TVMozarkTestingPopupCard","setTVMozarkTestingPopupCard","activePopupCard","setActivePopupCard","isVisEnabled","setVisEnable","getVisualUrl","setVisualUrl","selectVisualScript","setSelectVisualScript","selectedDevices","selectTestExecutionSelectedDevice","isMobileTesting","usePlatformtypeHook","deviceListListLoading","selectDeviceListLoading","deviceListDataError","selectDeviceListingError","selectAppBuildListOptions","selectUploadApplicationUrl","selectAppBuildListState","fileUploadResponse","selectApplicationFileUploadResponse","eventConfigFileUploadResponse","selectEventConfigFileUploadResponse","eventConfigFileUploadResponseError","selectEventConfigFileUploadLoading","selectApplicationFileUploadError","selectEventConfigFileUploadError","getUploadProgessValue","selectUploadFileProgressValue","isOpen","onOpen","onClose","useDisclosure","selectScriptListOptions","selectScriptState","getScheduleTestResponse","selectuploadApplicationUrlError","selectScheduleTestResponse","getScheduleTestResponseError","selectScheduleTestResponseError","loadingCreateProject","selectCreateProjectLoading","loadingExecuteSchedule","selectScheduleExecuteTestLoading","uploadAppBuildUrlAndroid","selectUploadingApplicationLoading","selectUploadApplicationUrlAndroid","loadingapplicationUrlAndroid","selectUploadingApplicationAndroidLoading","uploadApplicationAndroidError","selectuploadApplicationUrlAndroidError","loadingFileUpload","selectApplicationFileUploadLoading","busyDeviceSlots","selectgetOptionalKeyValue","selectBusyDeviceSlots","selectVisualScriptList","selectTestExcutionState","history","useNavigate","getTVDevicesList","useEffect","uploadFileProgress","BusyDeviceSlotsListLoaded","resetTestDevices","hasOwnProperty","status","type","paramStringAppBuild","fileCategory","testType","loadSelectAppBuildAndroidList","paramStringScript","loadSelectScriptAndroidList","loadSelectVisualScriptList","title","isClosable","position","appBuildApplicationFileUploaded","useDevicesLoadInterval","useSelectedDevicesStatus","eventConfigFileUploaded","eventConfigFileUploadError","message","setTimeout","ROUTES","LR_SESSION_SUMMARY","state","setStatusIndex","testExecutionDataLoaded","testExecutionDataError","loadSelectTestExecutionProjectList","testExecutionProjectCreated","createTestExecutionProjectError","loadSelectAppBuildList","loadSelectScriptList","paramStringVisualScript","appBuildUploadHandler","file","fileType","files","name","split","pop","getMd5SumFiles","filerequestData","filename","project","md5","applicationType","loadUploadApplicationAndroid","response","loadUploadAppBuildFile","url","data","uploadUrl","loadUploadEventConfigFile","config","uploadApplicationAndroidResponse","uploadApplicationError","length","valueOf","fileParameters","testCodePackageName","getVisualScript","meta","s3Url","scheduleAutomationTestHandler","scheduleType","deviceCamId","deviceInfo","deviceParameters","channel","camID","remoteDeviceId","parseInt","optionValue","getOptionalParam","newObject","Object","map","item","key","value","keyName","object","trim","assign","devicebusy","validateBusyDevice","dateTimeConverterWithTimeZone","getTime","description","join","deviceId","testConfiguration","captureHAR","captureCPUMetrics","captureMemoryMetrics","captureBatteryMetrics","captureGraphicsMetrics","captureDeviceScreenShots","captureDeviceNetworkPackets","captureAutomationLogs","captureSystemDebugLogs","captureLiveLogs","scheduleConfiguration","startTime","endTime","interval","testAction","pre","post","testParameters","maxTestDuration","testFramework","packageName","webCamId","eventConfigFile","kpisConfigFile","imageObjectFilePath","textDetectionCode","imageDetectionCode","visualMonitoringEnabled","visualTestApplicationUrl","getApplicationUrlHelper","applicationUrl","testApplicationUrl","executionType","loadTestExecutionData","removeKeyValueHandler","objectId","refreshApplicationList","Flex","flexDirection","LoadingComponent","isOverLay","Stack","spacing","padding","LabelFieldComponent","label","SelectComponent","selectOptions","selectValue","setSelectValue","Text","InputComponent","setInputValue","inputValue","ButtonComp","buttonHandler","createProjectHandler","match","createTestExecutionProject","RefreshIconButton","clickHandler","UploadButton","validate","uploadButtonHandler","enableProgress","progressValue","placeholder","Switch","size","isChecked","onChange","e","target","checked","DashedButton","selectDeviceButtonHandler","addSelectedDevices","textTransform","SelectDevicePopup","selectedDeviceHandler","DeviceIds","device","id","loadindBusyDeviceSlots","selectedDeviceList","tableData","isLoading","errorDeviceData","deviceOs","marginTop","whiteSpace","flex","HStack","CheckboxComp","isDisabled","setCheckedValue","maxWidth","InfoComponent","labelmessage","concat","LaunchIconButton","viewCode","preventDefault","fontWeight","backgroundColor","marginLeft","InputDateTime","selectedDate","setSelectDate","ToggleSelectInput","isShadow","PopupCardDetail","overflowY","css","boxShadow","boreder","KeyValueComponent","getValue","setValue","justifyContent","SelectValueComponent","isMandatory","index","NewKeyValueComponent","objectData","fontSize","margin","async","saveOptionalParamHandler","TvAutomate","getTabIndexStatus","isLargerScreen","useMediaQuery","Subheader","path","LR_AUTOMATION","tabroute","SubContainer","isCenter","ResponsiveAliginWrapper","Tabs","TabPanels","TabPanel"],"mappings":"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","file":"static/js/33.b214de2e.chunk.js","sourcesContent":["//@ts-nocheck\nimport { BsFillTvFill } from 'react-icons/bs';\nimport { Center } from '@chakra-ui/react';\nimport { Icon } from '@chakra-ui/react';\nimport { Box, useRadio } from '@chakra-ui/react';\nexport function TvIconButton(props) {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n  return (\n    <>\n      <Box as=\"label\">\n        <input {...input} />\n\n        <Center\n          align=\"center\"\n          justify=\"center\"\n          {...checkbox}\n          cursor=\"pointer\"\n          bg=\"white\"\n          borderRadius=\"3px\"\n          w={props.width || '39px'}\n          h={props.height || '39px'}\n          color=\"grey5\"\n          border=\".2px solid #C8C8C8\"\n          _checked={{\n            bg: 'white3',\n            color: 'blue1',\n            border: '1px solid #F3F6F9',\n          }}\n        >\n          <Icon width=\"16px\" as={BsFillTvFill} height=\"18px\"></Icon>\n        </Center>\n      </Box>\n    </>\n  );\n}\nexport default TvIconButton;\n","//@ts-nocheck\n\nimport SelectComponent from '../../Appium/components/SelectComponent';\n\nimport LabelFieldComponent from '../../AutomationTest/components/LabelFieldComponent';\nimport InputComponent from '../../Appium/components/InputComponent';\n\nimport ButtonComp from '../../../components/ButtonComp';\n\nimport CustomIconButton from '../../Appium/components/CustomIconButton';\nimport DashedButton from '../../../components/DashedButton';\nimport InfoComponent from '../../Appium/components/InfoComponent';\n\nimport InputDateTime from '../../Appium/components/InputDateTime';\nimport SelectValueComponent from '../../UiAutomator/components/SelectValueComponent';\nimport {\n  Checkbox,\n  Flex,\n  HStack,\n  Input,\n  Stack,\n  Text,\n  useToast,\n  Textarea,\n  Box,\n  Select,\n  useDisclosure,\n  Icon,\n  Switch,\n} from '@chakra-ui/react';\nimport TvIconButton from 'app/pages/Appium/components/TvIconButton';\nimport LaunchIconButton from '../../Appium/components/LaunchIconButton';\nimport UploadButton from 'app/pages/Appium/components/UploadButton';\nimport { useDispatch } from 'react-redux';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport { useSelector } from 'react-redux';\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport SelectDevicePopup from '../../Appium/components/SelectDevicePopup';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport {\n  dateTimeConverterWithTimeZone,\n  getMd5SumFiles,\n  validateBusyDevice,\n} from '../../../../utils/gernricfunction';\nimport {\n  selectAppBuildListState,\n  selectCreatedProject,\n  selectCreateProjectError,\n  selectListingDevices,\n  selectProjectList,\n  selectScriptState,\n  selectTestExecutionSelectedDevice,\n  selectUploadApplicationUrl,\n  selectuploadApplicationUrlError,\n  selectScheduleTestResponse,\n  selectScheduleTestResponseError,\n  selectCreateProjectLoading,\n  selectUploadingApplicationLoading,\n  selectScheduleExecuteTestLoading,\n  selectApplicationFileUploadLoading,\n  selectApplicationFileUploadResponse,\n  selectApplicationFileUploadError,\n  selectUploadFileProgressValue,\n  selectBusyDeviceSlots,\n  selectgetOptionalKeyValue,\n  selectDeviceListLoading,\n  selectDeviceListingError,\n  selectUploadApplicationUrlAndroid,\n  selectuploadApplicationUrlAndroidError,\n  selectEventConfigFileUploadResponse,\n  selectEventConfigFileUploadError,\n  selectEventConfigFileUploadLoading,\n  selectUploadingApplicationAndroidLoading,\n  selectTestExcutionState,\n} from 'app/pages/Xcui/slice/selector';\nimport PopupCardDetail from 'app/pages/Appium/components/PopupCardDetail';\nimport KeyValueComponent from 'app/pages/UiAutomator/components/KeyValueComponent';\nimport NewKeyValueComponent from 'app/pages/UiAutomator/components/NewKeyValueComponent';\nimport { useNavigate } from 'react-router-dom';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport CheckboxComp from 'app/pages/UiAutomator/components/CheckboxComp';\nimport PopupComponent from 'app/components/PopupComponent';\nimport ToggleSelectInput from 'app/pages/UiAutomator/components/ToggleSelectInput';\nimport { HiOutlineRefresh } from 'react-icons/hi';\nimport getApplicationUrlHelper from 'utils/getFileUrlFromList';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\nimport ROUTES from 'app/constants/Routes';\nimport RefreshIconButton from 'app/components/RefreshIconButton';\nimport useDevicesLoadInterval from 'app/utils/useDevicesLoadInterval';\nimport useSelectedDevicesStatus from 'app/utils/useSelectedDevicesStatus';\n\nexport const timeIntervalValue = [\n  5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60,\n];\n\nexport function TvMozarkAutomate({ setTabIndexStatus }) {\n  const [getInterval, setInterval] = useState(5);\n  const [getMaxTestDuration, setMaxTestDuration] = useState(10);\n  const [startDate, setStartDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n\n  const [endDate, setEndDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n  const [getMd5Sum, setMd5Sum] = useState('');\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const [getMessageFlag, setMessageFlag] = useState(false);\n  const [projectName, setProjectName] = useState('');\n  const [activeDevicePopup, setActiveDevicePopup] = useState(false);\n  const [selectProject, setSelectProject] = useState('');\n  const [getPackageName, setPackageName] = useState('');\n  const [recordNetworkCalls, setRecordNetworkCalls] = useState(false);\n\n  const [recordCPU, setRecordCPU] = useState(false);\n\n  const [recordMemory, setRecordMemory] = useState(false);\n  const [recordBattery, setRecordBattery] = useState(false);\n  const [recordGraphics, setRecordGraphics] = useState(false);\n  const [recordDeviceScreenShots, setRecordDeviceScreenShots] = useState(true);\n  const [recordDeviceScreen, setRecordDeviceScreen] = useState(false);\n  const [recordDeviceNetworkPackets, setRecordDeviceNetworkPackets] =\n    useState(false);\n  const [automationExecutionLogs, setAutomationExecutionLogs] = useState(true);\n  const [systemDebugLogs, setSystemDebugLogs] = useState(true);\n  const [liveLogs, setLiveLogs] = useState(true);\n  const [recordTvScreen, setRecordTvScreen] = useState(true);\n  const [getApplicationType, setApplicationType] = useState('');\n  const [scriptName, setScriptName] = useState('');\n  const [kpiEventConfiguration, setKpiEventConfiguration] = useState('');\n  const [kpiConfiguration, setKpiConfiguration] = useState('');\n  const [eventAttributes, setEventAttributes] = useState('');\n  const [selectScript, setSelectScript] = useState();\n  const getListingDevices = useSelector(selectListingDevices);\n  const { testExecutionActions } = useTestExecutionSlice();\n  const selectProjectOptionList = useSelector(selectProjectList);\n  const createdPojectResponse = useSelector(selectCreatedProject);\n  const createdPojectError = useSelector(selectCreateProjectError);\n  const [selectAppBuild, setSelectAppBuild] = useState();\n  const [appbuildFile, setAppbuildFile] = useState();\n  const [eventConfugFile, setEventConfigFile] = useState();\n  const [getSelectedDeviceList, setSelectedDeviceList] = useState([]);\n  const [getAddedKey, setAddedKey] = useState([]);\n  const [getSelectedDeviceListTV, setSelectedDeviceListTV] = useState([]);\n  const [getMd5SumAppBuild, setMd5SumAppBuild] = useState('');\n  const [getMd5SumScript, setMd5SumScript] = useState('');\n  const [areDevicesBusy, setAreDevicesBusy] = useState(true);\n  const [TVMozarkTestingPopupCard, setTVMozarkTestingPopupCard] =\n    useState(false);\n  const [activePopupCard, setActivePopupCard] = useState('');\n  const [isVisEnabled, setVisEnable] = useState(true);\n  const [getVisualUrl, setVisualUrl] = useState('');\n  const [selectVisualScript, setSelectVisualScript] = useState();\n  const selectedDevices = useSelector(selectTestExecutionSelectedDevice);\n  const isMobileTesting = usePlatformtypeHook();\n  const deviceListListLoading = useSelector(selectDeviceListLoading);\n\n  const deviceListDataError = useSelector(selectDeviceListingError);\n  const uploadAppBuildUrl = useSelector(selectUploadApplicationUrl);\n  const selectAppBuildListOptions = useSelector(selectAppBuildListState);\n  const fileUploadResponse = useSelector(selectApplicationFileUploadResponse);\n  const eventConfigFileUploadResponse = useSelector(\n    selectEventConfigFileUploadResponse,\n  );\n  const loadingEventConfigFile = useSelector(\n    selectEventConfigFileUploadLoading,\n  );\n  const fileUploadResponseError = useSelector(selectApplicationFileUploadError);\n  const eventConfigFileUploadResponseError = useSelector(\n    selectEventConfigFileUploadError,\n  );\n  const getUploadProgessValue = useSelector(selectUploadFileProgressValue);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const selectScriptListOptions = useSelector(selectScriptState);\n  const uploadApplicationUrlError = useSelector(\n    selectuploadApplicationUrlError,\n  );\n  const getScheduleTestResponse = useSelector(selectScheduleTestResponse);\n  const getScheduleTestResponseError = useSelector(\n    selectScheduleTestResponseError,\n  );\n  const loadingCreateProject = useSelector(selectCreateProjectLoading);\n\n  const loadingExecuteSchedule = useSelector(selectScheduleExecuteTestLoading);\n  const loadingUploadApplicationFile = useSelector(\n    selectUploadingApplicationLoading,\n  );\n  const uploadAppBuildUrlAndroid = useSelector(\n    selectUploadApplicationUrlAndroid,\n  );\n  const loadingapplicationUrlAndroid = useSelector(\n    selectUploadingApplicationAndroidLoading,\n  );\n  const uploadApplicationAndroidError = useSelector(\n    selectuploadApplicationUrlAndroidError,\n  );\n  const loadingFileUpload = useSelector(selectApplicationFileUploadLoading);\n  const getOptionalKeyValue = useSelector(selectgetOptionalKeyValue);\n  const busyDeviceSlots = useSelector(selectBusyDeviceSlots);\n  const { selectVisualScriptList } = useSelector(selectTestExcutionState);\n\n  let history = useNavigate();\n\n  const getTVDevicesList = getListingDevices;\n\n  useEffect(() => {\n    setProjectName('');\n    setSelectProject('');\n    setSelectAppBuild('');\n    setSelectScript('');\n    setStartDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setEndDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setSelectedDeviceList([]);\n    setSelectedDeviceListTV([]);\n    setAppbuildFile();\n    setRecordDeviceScreen(false);\n    setRecordNetworkCalls(false);\n    setRecordMemory(false);\n    setRecordCPU(false);\n    setRecordBattery(false);\n    setRecordGraphics(false);\n    setRecordDeviceScreenShots(true);\n    setAutomationExecutionLogs(true);\n    setRecordDeviceNetworkPackets(false);\n    setLiveLogs(true);\n    setRecordTvScreen(true);\n    setSystemDebugLogs(true);\n    dispatch(testExecutionActions.uploadFileProgress(0));\n    dispatch(testExecutionActions.BusyDeviceSlotsListLoaded({}));\n    dispatch(testExecutionActions.resetTestDevices());\n\n    setMaxTestDuration(10);\n    setAddedKey([]);\n  }, []);\n\n  useEffect(() => {\n    if (\n      fileUploadResponse.hasOwnProperty('status') &&\n      fileUploadResponse.status === 200\n    ) {\n      if (fileUploadResponse.type === 'android-uiautomator') {\n        if (getApplicationType === 'android-application') {\n          const paramStringAppBuild = {\n            fileCategory: 'android-application',\n            projectName: selectProject,\n            testType: 'lr-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectAppBuildAndroidList(\n              paramStringAppBuild,\n            ),\n          );\n        }\n        if (getApplicationType === 'script') {\n          const paramStringScript = {\n            fileCategory: 'android-test-application',\n            projectName: selectProject,\n            testType: 'lr-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectScriptAndroidList(paramStringScript),\n          );\n        }\n        if (getApplicationType === 'visual-journey-script') {\n          const paramStringScript = {\n            fileCategory: 'visual-journey-script',\n            projectName: selectProject,\n            testType: 'lr-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectVisualScriptList(paramStringScript),\n          );\n        }\n\n        toast({\n          title: 'Application Uploaded Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setAppbuildFile();\n        setApplicationType('');\n        onClose();\n        dispatch(testExecutionActions.uploadFileProgress(0));\n        dispatch(testExecutionActions.appBuildApplicationFileUploaded({}));\n      }\n    }\n  }, [fileUploadResponse]);\n\n  useDevicesLoadInterval(isMobileTesting, testExecutionActions, 'tv');\n  useSelectedDevicesStatus(\n    getSelectedDeviceList,\n    setAreDevicesBusy,\n    getListingDevices,\n  );\n\n  useEffect(() => {\n    if (\n      eventConfigFileUploadResponse.hasOwnProperty('status') &&\n      eventConfigFileUploadResponse.status === 200\n    ) {\n      toast({\n        title: 'Config File Uploaded Successfully',\n        status: 'success',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      setApplicationType(' ');\n      dispatch(testExecutionActions.uploadFileProgress(0));\n      dispatch(testExecutionActions.eventConfigFileUploaded({}));\n      setEventConfigFile();\n    }\n\n    if (eventConfigFileUploadResponseError === 1) {\n      toast({\n        title: \"Couldn't upload file\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.eventConfigFileUploadError(null));\n    }\n  }, [eventConfigFileUploadResponse, eventConfigFileUploadResponseError]);\n\n  useEffect(() => {\n    if (\n      getScheduleTestResponse.hasOwnProperty('message') &&\n      getScheduleTestResponseError !== 1\n    ) {\n      if (getScheduleTestResponse.message === 'Success') {\n        toast({\n          title: 'Executed/Scheduled Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setTabIndexStatus(2);\n        setTimeout(() => {\n          history(ROUTES.LR_SESSION_SUMMARY, {\n            state: { setStatusIndex: 2 },\n          });\n        }, 1000);\n\n        setSelectProject('');\n        setSelectAppBuild('');\n        setSelectScript('');\n      } else {\n        toast({\n          title: getScheduleTestResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n      dispatch(testExecutionActions.testExecutionDataLoaded({}));\n    }\n\n    if (getScheduleTestResponseError === 1) {\n      toast({\n        title: \"Couldn't Executed/Scheduled\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.testExecutionDataError(null));\n    }\n  }, [getScheduleTestResponse, getScheduleTestResponseError]);\n\n  useEffect(() => {\n    dispatch(\n      testExecutionActions.loadSelectTestExecutionProjectList('lr-automation'),\n    );\n  }, []);\n\n  useEffect(() => {\n    if (\n      createdPojectResponse.hasOwnProperty('message') &&\n      createdPojectError !== 1\n    ) {\n      if (createdPojectResponse.message === 'Success') {\n        toast({\n          title: 'Project Created Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setProjectName('');\n        dispatch(\n          testExecutionActions.loadSelectTestExecutionProjectList(\n            'lr-automation',\n          ),\n        );\n      } else {\n        toast({\n          title: createdPojectResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n\n      dispatch(testExecutionActions.testExecutionProjectCreated({}));\n    }\n\n    if (createdPojectError === 1) {\n      toast({\n        title: \"Couldn't create the project\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.createTestExecutionProjectError(null));\n    }\n  }, [createdPojectResponse, createdPojectError]);\n\n  const createProjectHandler = () => {\n    if (projectName === '') {\n      toast({\n        title: 'Please enter project name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      return;\n    }\n    const pattern = /[^a-zA-Z0-9_-]/;\n    if (projectName.match(pattern)) {\n      toast({\n        title: 'Please enter valid name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const config = {\n      name: projectName,\n      testType: 'lr-automation',\n    };\n    dispatch(testExecutionActions.createTestExecutionProject(config));\n  };\n\n  const getOptionalParam = () => {\n    let newObject = new Object();\n\n    getAddedKey.map(item => {\n      let key = '';\n      let value = '';\n      key = item.keyName;\n      value = item.value;\n      if (item.keyName && item.value) {\n        const object = {\n          [key.trim()]: value.trim(),\n        };\n        Object.assign(newObject, object);\n      } else {\n      }\n    });\n\n    return newObject;\n  };\n  useEffect(() => {\n    if (selectProject !== '') {\n      const paramStringAppBuild = {\n        fileCategory: 'android-application',\n        projectName: selectProject,\n        testType: 'lr-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectAppBuildList(paramStringAppBuild),\n      );\n      const paramStringScript = {\n        fileCategory: 'android-test-application',\n        projectName: selectProject,\n        testType: 'lr-automation',\n      };\n\n      dispatch(testExecutionActions.loadSelectScriptList(paramStringScript));\n      const paramStringVisualScript = {\n        fileCategory: 'visual-journey-script',\n        projectName: selectProject,\n        testType: 'lr-automation',\n      };\n      dispatch(\n        testExecutionActions.loadSelectVisualScriptList(\n          paramStringVisualScript,\n        ),\n      );\n    }\n    setSelectScript('');\n    setSelectVisualScript('');\n    setSelectAppBuild('');\n  }, [selectProject]);\n\n  const appBuildUploadHandler = (file, fileType) => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      file.files[0].name.split('.').pop() != 'apk' &&\n      fileType === 'android-application'\n    ) {\n      toast({\n        title: 'Please select apk file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (\n      file.files[0].name.split('.').pop() != 'zip' &&\n      fileType === 'visual-journey-script'\n    ) {\n      toast({\n        title: 'Please select zip file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    getMd5SumFiles(file, setMd5Sum);\n    setAppbuildFile(file.files[0]);\n    setApplicationType(fileType);\n  };\n\n  useEffect(() => {\n    if (getMd5Sum !== '') {\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: getApplicationType,\n        md5: getMd5Sum,\n        applicationType: getApplicationType,\n        testType: 'lr-automation',\n      };\n      dispatch(\n        testExecutionActions.loadUploadApplicationAndroid(filerequestData),\n      );\n      // setApplicationType('appbuild');\n      setMd5Sum('');\n    }\n  }, [getMd5Sum]);\n\n  const scriptUploadHandler = file => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (file.files[0].name.split('.').pop() != 'apk') {\n      toast({\n        title: 'Please select apk file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    getMd5SumFiles(file, setMd5SumScript);\n    setAppbuildFile(file.files[0]);\n  };\n\n  useEffect(() => {\n    if (getMd5SumScript !== '') {\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: 'android-test-application',\n        md5: getMd5SumScript,\n        applicationType: 'script',\n        testType: 'lr-automation',\n      };\n      setApplicationType('script');\n      dispatch(\n        testExecutionActions.loadUploadApplicationAndroid(filerequestData),\n      );\n      setMd5SumScript('');\n    }\n  }, [getMd5SumScript]);\n\n  useEffect(() => {\n    if (\n      uploadAppBuildUrlAndroid.hasOwnProperty('response') &&\n      uploadAppBuildUrlAndroid.response.hasOwnProperty('message') &&\n      uploadApplicationAndroidError !== 1\n    ) {\n      if (uploadAppBuildUrlAndroid.response.message === 'Success') {\n        dispatch(\n          testExecutionActions.loadUploadAppBuildFile({\n            url: uploadAppBuildUrlAndroid.response.data.uploadUrl,\n            file: appbuildFile,\n            type: 'android-uiautomator',\n            dispatch: dispatch,\n          }),\n          setApplicationType(uploadAppBuildUrlAndroid.type),\n        );\n        if (uploadAppBuildUrlAndroid.response.data.hasOwnProperty('config')) {\n          dispatch(\n            testExecutionActions.loadUploadEventConfigFile({\n              url: uploadAppBuildUrlAndroid.response.data.config.uploadUrl,\n              file: eventConfugFile,\n              type: 'script-event-config',\n              dispatch: dispatch,\n            }),\n          );\n        }\n      } else {\n        toast({\n          title: uploadAppBuildUrlAndroid.response.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setAppbuildFile();\n        setEventConfigFile();\n      }\n\n      dispatch(testExecutionActions.uploadApplicationAndroidResponse({}));\n    }\n\n    if (uploadApplicationAndroidError === 1) {\n      toast({\n        title: 'Something went wrong',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.uploadApplicationError(null));\n    }\n  }, [uploadAppBuildUrlAndroid, uploadApplicationAndroidError]);\n\n  const testSuitePopupHandler = e => {\n    setTVMozarkTestingPopupCard(true);\n    setActivePopupCard('testsuite');\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    if (selectedDevices.length > 1) {\n      toast({\n        title: 'Please Select One Device ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n    }\n  }, [selectedDevices]);\n\n  const selectedDeviceHandler = () => {\n    const DeviceIds = selectedDevices.map(device => device.id);\n\n    if (DeviceIds.length <= 1) {\n      setSelectedDeviceList(DeviceIds);\n      setActiveDevicePopup(false);\n      setSelectedDeviceListTV(selectedDevices);\n      if (DeviceIds.length > 0) {\n        dispatch(testExecutionActions.loadindBusyDeviceSlots(DeviceIds));\n      }\n    } else {\n      toast({\n        title: \"Can't Select multiple Devices\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n  };\n\n  const selectDeviceButtonHandler = () => {\n    setActiveDevicePopup(true);\n\n    setTimeout(() => {\n      dispatch(\n        testExecutionActions.addSelectedDevices(getSelectedDeviceListTV),\n      );\n    }, 1000);\n  };\n  useEffect(() => {\n    if (startDate.valueOf() + 294500 >= endDate.valueOf()) {\n      setMessageFlag(true);\n    } else {\n      setMessageFlag(false);\n    }\n  }, [startDate, endDate]);\n  useEffect(() => {\n    if (\n      (selectScript || selectScript === '0') &&\n      selectScript !== '' &&\n      selectScriptListOptions.length > 0\n    ) {\n      if (\n        selectScriptListOptions[selectScript].fileParameters.hasOwnProperty(\n          'testCodePackageName',\n        )\n      ) {\n        if (\n          selectScriptListOptions[selectScript].fileParameters\n            .testCodePackageName === ''\n        ) {\n          setSelectScript('');\n          toast({\n            title: 'Unable to get package name/bundle ID. Upload new file',\n            status: 'error',\n            isClosable: true,\n            position: 'bottom-right',\n          });\n        }\n      } else {\n        setSelectScript('');\n        toast({\n          title: 'Unable to get package name/bundle ID. Upload new file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n    }\n  }, [selectScript]);\n  useEffect(() => {\n    if (\n      (selectVisualScript || selectVisualScript === '0') &&\n      selectVisualScript !== '' &&\n      selectVisualScriptList.length > 0\n    ) {\n      const getVisualScript = isVisEnabled\n        ? selectVisualScriptList[selectVisualScript].meta.s3Url\n        : '';\n      setVisualUrl(getVisualScript);\n    }\n  }, [selectVisualScript]);\n\n  const scheduleAutomationTestHandler = scheduleType => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (!selectAppBuild) {\n    }\n    if (!selectScript) {\n      toast({\n        title: 'Please Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (!selectVisualScript && isVisEnabled) {\n      toast({\n        title: 'Please Visual Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (getSelectedDeviceList.length <= 0) {\n      toast({\n        title: 'Please Select  Devices',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (getSelectedDeviceList.length > 1) {\n      toast({\n        title: 'Please Select One Device',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (getSelectedDeviceListTV.length !== 1) {\n      toast({\n        title: 'Device is not Selected',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const deviceCamId =\n      getSelectedDeviceListTV[0].deviceInfo.deviceParameters.channel.camID;\n    const remoteDeviceId =\n      getSelectedDeviceListTV[0].deviceInfo.deviceParameters[\n        'interact-controller'\n      ]['device-uuid'];\n\n    if (\n      startDate.valueOf() + 294500 >= endDate.valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start & End time have Invalid Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      parseInt(getInterval) < parseInt(getMaxTestDuration) &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid Max Test Duration > Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      (endDate.valueOf() - startDate.valueOf()) / 60000 <\n        parseInt(getInterval) &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid time interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      startDate.valueOf() <= new Date().valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start and End Time Invalid',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const optionValue = getOptionalParam();\n\n    const devicebusy = validateBusyDevice(\n      busyDeviceSlots,\n      new Date(dateTimeConverterWithTimeZone(startDate)).getTime(),\n      new Date(dateTimeConverterWithTimeZone(endDate)).getTime(),\n    );\n\n    if (devicebusy.length > 0) {\n      toast({\n        title: 'Busy Devices Occured',\n        description: devicebusy.join(' , '),\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    const config = {\n      deviceId: getSelectedDeviceList,\n      testConfiguration: {\n        captureHAR: recordNetworkCalls,\n        captureCPUMetrics: recordCPU,\n        captureMemoryMetrics: recordMemory,\n        captureBatteryMetrics: recordBattery,\n        captureGraphicsMetrics: recordGraphics,\n        captureDeviceScreenShots: recordDeviceScreenShots,\n        recordDeviceScreen: isVisEnabled ? isVisEnabled : recordDeviceScreen,\n        captureDeviceNetworkPackets: recordDeviceNetworkPackets,\n        captureAutomationLogs: systemDebugLogs,\n        captureSystemDebugLogs: systemDebugLogs,\n        captureLiveLogs: liveLogs,\n        recordTvScreen: recordTvScreen,\n      },\n\n      scheduleConfiguration:\n        scheduleType === 'SCHEDULE'\n          ? {\n              startTime: dateTimeConverterWithTimeZone(startDate),\n              endTime: dateTimeConverterWithTimeZone(endDate),\n              interval: parseInt(getInterval),\n            }\n          : {\n              startTime: dateTimeConverterWithTimeZone(new Date()),\n            },\n      testAction: {\n        pre: {},\n        post: {},\n      },\n      testParameters: {\n        testType: 'lr-automation',\n        maxTestDuration: parseInt(getMaxTestDuration),\n        testFramework: 'tv-uiautomator',\n        projectName: selectProject,\n        packageName: getPackageName,\n        ...optionValue,\n        webCamId: deviceCamId,\n        remoteDeviceId: remoteDeviceId,\n        eventConfigFile: '',\n        kpisConfigFile: '',\n        imageObjectFilePath: '',\n        textDetectionCode: 'Lambda/Url',\n        imageDetectionCode: 'Lambda/Url',\n        kpiEventConfiguration: '',\n        visualMonitoringEnabled: isVisEnabled,\n        visualTestApplicationUrl: getApplicationUrlHelper(\n          selectVisualScriptList,\n          selectVisualScript,\n        ),\n      },\n      applicationUrl: getApplicationUrlHelper(\n        selectAppBuildListOptions,\n        selectAppBuild,\n      ),\n      testApplicationUrl: getApplicationUrlHelper(\n        selectScriptListOptions,\n        selectScript,\n      ),\n      executionType: scheduleType,\n    };\n\n    dispatch(testExecutionActions.loadTestExecutionData(config));\n  };\n\n  const addKeyHandler = async () => {\n    setAddedKey([...getAddedKey, { keyName: ' ', value: ' ' }]);\n  };\n  const saveOptionalParamHandler = () => {\n    setTVMozarkTestingPopupCard(false);\n  };\n  const removeKeyValueHandler = objectId => {};\n  const uploadTestSuitAndConfig = () => {\n    onOpen();\n  };\n  const refreshApplicationList = fileCategory => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (selectProject !== '') {\n      if (fileCategory === 'android-application') {\n        const paramStringAppBuild = {\n          fileCategory: 'android-application',\n          projectName: selectProject,\n          testType: 'lr-automation',\n        };\n\n        dispatch(\n          testExecutionActions.loadSelectAppBuildList(paramStringAppBuild),\n        );\n        setSelectAppBuild('');\n      } else if (fileCategory === 'android-test-application') {\n        setSelectScript('');\n        const paramStringScript = {\n          fileCategory: 'android-test-application',\n          projectName: selectProject,\n          testType: 'lr-automation',\n        };\n\n        dispatch(testExecutionActions.loadSelectScriptList(paramStringScript));\n      } else if (fileCategory === 'visual-journey-script') {\n        const paramStringVisualScript = {\n          fileCategory: 'visual-journey-script',\n          projectName: selectProject,\n          testType: 'lr-automation',\n        };\n        dispatch(\n          testExecutionActions.loadSelectVisualScriptList(\n            paramStringVisualScript,\n          ),\n        );\n        setSelectVisualScript('');\n      }\n    }\n  };\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" position=\"relative\">\n        {(loadingCreateProject || loadingExecuteSchedule) && (\n          <LoadingComponent\n            height=\"110vh\"\n            //background=\"#3F425429\"\n            isOverLay={true}\n            position=\"absolute\"\n          ></LoadingComponent>\n        )}\n\n        <Stack spacing=\"10px\" padding=\"15px 25px\">\n          <LabelFieldComponent label=\"Project\">\n            <SelectComponent\n              type=\"project\"\n              title=\"Select Project\"\n              selectOptions={selectProjectOptionList}\n              selectValue={selectProject}\n              setSelectValue={setSelectProject}\n              name=\"TV\"\n            ></SelectComponent>\n            <Text padding=\"0px 5px\">OR</Text>\n\n            <InputComponent\n              setInputValue={setProjectName}\n              inputValue={projectName}\n              title=\"Enter Project Name\"\n            ></InputComponent>\n\n            <ButtonComp buttonHandler={createProjectHandler} padding=\"7px 12px\">\n              Create\n            </ButtonComp>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent label=\"Remote App\">\n            <SelectComponent\n              name=\"TV\"\n              type=\"application\"\n              title=\"Select Remote App\"\n              selectValue={selectAppBuild}\n              setSelectValue={setSelectAppBuild}\n              selectOptions={selectAppBuildListOptions}\n            ></SelectComponent>\n            <RefreshIconButton\n              clickHandler={() => refreshApplicationList('android-application')}\n            ></RefreshIconButton>\n            <Text padding=\"0px 5px\">OR</Text>\n            <UploadButton\n              validate=\".apk\"\n              fileType=\"android-application\"\n              uploadButtonHandler={appBuildUploadHandler}\n              enableProgress={\n                getApplicationType === 'android-application' &&\n                (loadingapplicationUrlAndroid || loadingFileUpload)\n              }\n              progressValue={getUploadProgessValue}\n              placeholder=\"Upload Remote App\"\n            ></UploadButton>\n          </LabelFieldComponent>\n          <LabelFieldComponent label=\"Remote Control Test Suite\">\n            <SelectComponent\n              name=\"TV\"\n              title=\"Select Test Suite\"\n              selectOptions={selectScriptListOptions}\n              selectValue={selectScript}\n              setSelectValue={setSelectScript}\n            ></SelectComponent>\n\n            <RefreshIconButton\n              clickHandler={() =>\n                refreshApplicationList('android-test-application')\n              }\n            ></RefreshIconButton>\n            <Text padding=\"0px 5px\">OR</Text>\n            <UploadButton\n              validate=\".apk\"\n              uploadButtonHandler={scriptUploadHandler}\n              enableProgress={\n                getApplicationType === 'script' &&\n                (loadingapplicationUrlAndroid || loadingFileUpload)\n              }\n              progressValue={getUploadProgessValue}\n              placeholder=\"Upload Test Suite\"\n            ></UploadButton>\n            <Text>Enable Visual Monitoring</Text>\n            <Switch\n              size=\"md\"\n              isChecked={isVisEnabled}\n              onChange={e => setVisEnable(e.target.checked)}\n            />\n          </LabelFieldComponent>\n          {isVisEnabled && (\n            <LabelFieldComponent label=\"Visual Journey Script\">\n              <SelectComponent\n                name=\"xcui\"\n                type=\"application\"\n                selectOptions={selectVisualScriptList}\n                selectValue={selectVisualScript}\n                setSelectValue={setSelectVisualScript}\n                title=\"Select Visual Journey\"\n              ></SelectComponent>\n              <RefreshIconButton\n                clickHandler={() =>\n                  refreshApplicationList('visual-journey-script')\n                }\n              ></RefreshIconButton>\n\n              <Text padding=\"0px 5px\">OR</Text>\n\n              <UploadButton\n                validate=\".zip\"\n                fileType=\"visual-journey-script\"\n                uploadButtonHandler={appBuildUploadHandler}\n                enableProgress={\n                  getApplicationType === 'visual-journey-script' &&\n                  (loadingapplicationUrlAndroid || loadingFileUpload)\n                }\n                progressValue={getUploadProgessValue}\n                placeholder=\"Upload Visual Journey\"\n              ></UploadButton>\n            </LabelFieldComponent>\n          )}\n          <LabelFieldComponent label=\"Devices\">\n            <Flex h=\"39px\">\n              <TvIconButton>TV</TvIconButton>\n            </Flex>\n            <DashedButton\n              height=\"39px\"\n              width=\"250px\"\n              name=\"selectDeviceTV\"\n              buttonHandler={selectDeviceButtonHandler}\n            >\n              Select Device(<Text textTransform=\"lowercase\">s</Text>)\n            </DashedButton>\n            {getSelectedDeviceList.length && (\n              <Text>{getSelectedDeviceList.length} Device selected</Text>\n            )}\n          </LabelFieldComponent>\n          <SelectDevicePopup\n            selectedDeviceHandler={selectedDeviceHandler}\n            selectedDeviceList={selectedDevices}\n            tableData={getTVDevicesList}\n            setActiveDevicePopup={setActiveDevicePopup}\n            activeDevicePopup={activeDevicePopup}\n            isLoading={deviceListListLoading}\n            errorDeviceData={deviceListDataError}\n            deviceOs=\"android\"\n          ></SelectDevicePopup>\n          <Flex marginTop=\"10px\" align=\"flex-start\">\n            <Flex\n              width=\"250px\"\n              align=\"center\"\n              height=\"35px\"\n              textTransform=\"capitalize\"\n            >\n              <Text whiteSpace=\"nowrap\">Record Test</Text>\n            </Flex>\n            <Flex flex={10} flexDirection=\"column\">\n              <HStack spacing=\"0px\">\n                <CheckboxComp\n                  isDisabled={true}\n                  value={recordTvScreen}\n                  title=\"Screen Recording\"\n                  setCheckedValue={setRecordTvScreen}\n                ></CheckboxComp>\n                <CheckboxComp\n                  isDisabled={true}\n                  value={systemDebugLogs}\n                  title=\"Automation & Debug Logs\"\n                  setCheckedValue={setSystemDebugLogs}\n                ></CheckboxComp>\n              </HStack>\n              <HStack spacing=\"0px\"></HStack>\n            </Flex>\n          </Flex>\n\n          <LabelFieldComponent>\n            <Text maxWidth=\"45%\">\n              Test Parameters\n              <InfoComponent\n                labelmessage={`Max Test Duration ${getMaxTestDuration} min`}\n              ></InfoComponent>{' '}\n            </Text>\n            <LaunchIconButton\n              viewCode={testSuitePopupHandler}\n            ></LaunchIconButton>\n          </LabelFieldComponent>\n          <LabelFieldComponent label=\"Execute Test\">\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length || !areDevicesBusy}\n              fontWeight=\"500\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              name=\"executeNowTV\"\n              buttonHandler={e => scheduleAutomationTestHandler('NOW')}\n            >\n              Now\n            </ButtonComp>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <Text padding=\"5px\">OR</Text>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length}\n              fontWeight=\"500\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              marginLeft=\"0px\"\n              name=\"scheduleTestTV\"\n              buttonHandler={e => scheduleAutomationTestHandler('SCHEDULE')}\n            >\n              Schedule\n            </ButtonComp>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              Start date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n\n            <InputDateTime\n              name=\"startDateTV\"\n              selectedDate={startDate}\n              setSelectDate={setStartDate}\n            ></InputDateTime>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              End date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <InputDateTime\n              name=\"endDateXTV\"\n              selectedDate={endDate}\n              setSelectDate={setEndDate}\n            ></InputDateTime>\n\n            {getMessageFlag && (\n              <Text color=\"red1\" textTransform=\"none\">\n                {' '}\n                *End time &gt; Start time{' '}\n              </Text>\n            )}\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" width=\"200px\">\n              Interval\n              <InfoComponent labelmessage=\"Interval between two test execution a single device(in minutes)\"></InfoComponent>\n            </Text>\n            <ToggleSelectInput\n              isShadow={true}\n              selectOptions={timeIntervalValue}\n              selectValue={getInterval}\n              setSelectValue={setInterval}\n            ></ToggleSelectInput>\n          </LabelFieldComponent>\n          <PopupCardDetail\n            isOpen={TVMozarkTestingPopupCard}\n            onClose={setTVMozarkTestingPopupCard}\n          >\n            <Stack\n              width=\"100%\"\n              padding=\"10px 5px\"\n              spacing=\"15px\"\n              overflowY=\"auto\"\n              css={{\n                '&::-webkit-scrollbar': {\n                  width: '8px',\n                  border: '5px solid #F3F6F9',\n                },\n                '&::-webkit-scrollbar-track': {\n                  boxShadow: 'inset 0 0 6px white',\n                },\n                '&::-webkit-scrollbar-thumb': {\n                  backgroundColor: '#C1C1C1',\n                  borderRadius: '5px',\n                  boreder: '2px solid',\n                },\n              }}\n            >\n              <KeyValueComponent\n                label=\"Project Name\"\n                getValue={selectProject}\n                isDisabled={true}\n              ></KeyValueComponent>\n              <KeyValueComponent\n                label=\"Test Framework\"\n                getValue=\"tv-uiautomator\"\n                isDisabled={true}\n              ></KeyValueComponent>\n              {selectAppBuild === '' && (\n                <KeyValueComponent\n                  label=\"Package Name\"\n                  getValue={getPackageName}\n                  setValue={setPackageName}\n                  isDisabled={false}\n                ></KeyValueComponent>\n              )}\n\n              <Flex justifyContent=\"space-between\">\n                <Text>Maximum Test Duration</Text>\n\n                <SelectValueComponent\n                  isShadow={false}\n                  width=\"150px\"\n                  selectOptions={timeIntervalValue}\n                  selectValue={getMaxTestDuration}\n                  setSelectValue={setMaxTestDuration}\n                ></SelectValueComponent>\n              </Flex>\n              {isVisEnabled && (\n                <Flex justifyContent=\"space-between\">\n                  <Text>Visual Synthetic Monitoring</Text>\n                  <Switch isChecked={isVisEnabled} />\n                </Flex>\n              )}\n              {isVisEnabled && (\n                <KeyValueComponent\n                  isMandatory={false}\n                  isDisabled={true}\n                  label=\"Visual Journey Script\"\n                  getValue={isVisEnabled ? getVisualUrl : ''}\n                  // setValue={setPackageName}\n                ></KeyValueComponent>\n              )}\n\n              {getAddedKey.length > 0 &&\n                getAddedKey.map((item, index) => (\n                  <NewKeyValueComponent\n                    removeKeyValueHandler={removeKeyValueHandler}\n                    objectData={item}\n                    key={index}\n                    id={index}\n                  ></NewKeyValueComponent>\n                ))}\n              <Flex justifyContent=\"flex-end\">\n                <ButtonComp\n                  fontSize=\"18px\"\n                  padding=\"5px 10px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  fontWeight=\"600\"\n                  buttonHandler={addKeyHandler}\n                  name=\"addNewParamTV\"\n                >\n                  +\n                </ButtonComp>\n              </Flex>\n\n              <Flex justify=\"center\">\n                <ButtonComp\n                  name=\"saveOptionParamTV\"\n                  fontWeight=\"500\"\n                  padding=\"7px 25px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  buttonHandler={saveOptionalParamHandler}\n                >\n                  Save\n                </ButtonComp>\n              </Flex>\n            </Stack>\n          </PopupCardDetail>\n        </Stack>\n      </Flex>\n    </>\n  );\n}\nexport default TvMozarkAutomate;\n","// @ts-nocheck\nimport { useState } from 'react';\n\nimport { TvMozarkAutomate } from './Features/TvMozarkAutomate';\n\nimport SubContainer from '../../components/SubContainer';\n\nimport SubLayout from '../../components/SubLayout/index';\nimport {\n  Flex,\n  HStack,\n  Stack,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  useMediaQuery,\n  useRadioGroup,\n} from '@chakra-ui/react';\nimport Subheader from 'app/components/Subheader';\nimport ROUTES from '../../constants/Routes';\nimport ResponsiveAliginWrapper from 'app/components/ResponsiveAlignWrapper';\n\nexport function TvAutomate() {\n  const [getTabIndexStatus, setTabIndexStatus] = useState(0);\n  const [isLargerScreen] = useMediaQuery('(min-width: 1900px)');\n  const tabroute = [' Get Started with Automation Testing'];\n  return (\n    <Flex flexDirection=\"column\" width=\"100%\" align=\"center\">\n      <Subheader\n        path={`${ROUTES.LR_AUTOMATION}`}\n        tabroute={tabroute}\n      ></Subheader>\n      <SubContainer isCenter={true}>\n        {/* <SubLayout> */}\n        <ResponsiveAliginWrapper>\n          <Tabs>\n            <Stack spacing=\"10px\">\n              <HStack width=\"100%\">\n                <TabPanels padding=\"0px\" margin=\"0px\">\n                  <TabPanel width=\"100%\" padding=\"0px\">\n                    <TvMozarkAutomate\n                      setTabIndexStatus={setTabIndexStatus}\n                    ></TvMozarkAutomate>\n                  </TabPanel>\n                  {/* <TabPanel width=\"100%\" padding=\"0px\">\n                    <XcUiCiIntegration></XcUiCiIntegration>\n                  </TabPanel> */}\n                </TabPanels>\n              </HStack>\n            </Stack>\n          </Tabs>\n        </ResponsiveAliginWrapper>\n        {/* </SubLayout> */}\n      </SubContainer>\n    </Flex>\n  );\n}\n\nexport default TvAutomate;\n"],"sourceRoot":""}