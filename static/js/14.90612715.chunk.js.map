{"version":3,"sources":["app/pages/MyDevices/slice/selector.ts","app/pages/DebugReportGenerate/components/SelectOption.tsx","styles/Assets/display1.png","app/pages/MyDevices/assets/Icon awesome-trash-alt.svg","app/pages/MyDevices/components/DeviceCounter.tsx","app/pages/MyDevices/components/GridListViewLayout.tsx","app/pages/MyDevices/components/MonthsCounter.tsx","app/pages/MyDevices/components/TableRowData.tsx","app/pages/MyDevices/components/DeviceListTable.tsx","app/pages/MyDevices/components/ListViewDevice.tsx","app/pages/MyDevices/components/DeviceDisplayLayout.tsx","app/pages/Calender/Components/SearchbarWithButton.tsx","app/pages/MyDevices/components/DeviceCard.tsx","app/pages/MyDevices/components/GrideViewRow.tsx","app/pages/MyDevices/components/GridViewDevice.tsx","../../../src/container.tsx","app/pages/MozarkDevices/components/SelectedDeviceList.tsx","app/pages/MyDevices/components/SelectDeviceTrayPopup.tsx","app/pages/MyDevices/components/TrayComponent.tsx","app/pages/MyDevices/components/MyTrayList.tsx","app/pages/MyDevices/components/CreateTrayComp.tsx","app/pages/MyDevices/components/AddtoTrayComponent.tsx","app/pages/MyDevices/index.tsx"],"names":["selectSlice","state","myDevices","initialState","selectMyDevicesData","createSelector","myDevicesData","selectedDeviceForTray","myDevicesLoading","myDevicesError","traySelectDevice","selectedDeviceTrayName","devicesTrayName","selecteTrayList","deviceTrayList","selecteTrayListError","deviceListTrayError","selecteTrayDevices","TrayDeviceData","selectCreateTrayLoading","createTrayLoading","selectCreateTrayError","createTrayResponseError","selectDeleteTrayLoading","deleteTrayLoading","selectUpdateTrayLoading","updateTrayLoading","selectUpdateTrayError","updateTrayResponseError","selectFetchTrayListLoading","loadingTrayList","selectCreateTrayResponse","createTrayResponseLoaded","selectDeleteTrayResponse","deleteTrayResponseLoaded","selectDeleteTrayError","deleteTrayResponseError","selectUpdateTrayResponse","updateTrayResponseLoaded","selectLoadTrayDevicesError","TrayDataLoadError","SelectOption","_ref","placeholder","width","selectValue","setSelectValue","optionList","height","_jsx","Select","bg","size","color","h","border","borderColor","borderRadius","margin","textTransform","value","onChange","e","target","_focus","boxShadow","children","map","item","index","concat","style","DeviceCounter","countDevice","setCountDevice","isGrideView","isMonth","deviceId","deviceInfo","countMonth","setCountMonth","useState","actions","useMyDevicesSlice","dispatch","useDispatch","Flex","position","flexDirection","_jsxs","w","justifyContent","fontSize","top","right","alignItems","alignContent","Text","cursor","onClick","incrementCountHandler","addTrayDevices","GridListViewLayout","isLabels","paddingTop","overflowY","css","backgroundColor","boreder","StatusLabels","MonthsCounter","useCallback","align","padding","decrementCountHandler","TableRowData","isDelete","isCheckBox","isLaunch","testExecutionActions","useTestExecutionSlice","removeID","useSelector","selectRemoveDeviceId","useEffect","addTestDevices","id","serial","count","_Fragment","Tr","location","_hover","background","className","Td","minWidth","paddingLeft","paddingRight","Box","title","deviceParameters","deviceStatus","getStatusColorDevice","brand","modelName","osVersion","network","mobile","screenSize","city","sx","display","justify","Img","src","deleteIcon","Link","to","Icon","as","FaTelegramPlane","DeviceListTable","tableHeading","tableData","isInput","getCountDevice","setSelectedDevice","Table","fontFamily","fontWeight","variant","Thead","Th","headers","Tbody","ListViewDevice","isLoading","errorDeviceData","fileterTableData","filter","device","hasOwnProperty","LoadingComponent","NoContent","message","length","DeviceDisplayLayout","child","child1","child2","os","hideSearchButton","selectCategory","setSelectCategory","getRootProps","getRadioProps","useRadioGroup","name","defaultValue","val","Tabs","flexwrap","HStack","TabList","Tab","borderBottom","_selected","IconButton","icon","FaListUl","alignSelf","TabPanels","TabPanel","minHeight","SearchbarWithButton","searchItem","setSearchItem","searchItemsHandler","SearchBar","enterKeyHandler","event","keyCode","ButtonComp","marginLeft","buttonHandler","BiSearch","DeviceCard","connection","hoverObject","cardData","selectArray","selectedDeviceArray","marginRight","marginBottom","borderLeft","borderLeftColor","onCLick","clickHandler","alt","model","osName","deviceLocation","networkProvider","GrideViewRow","Make","marginTop","overflow","flexWrap","card","GridViewDevice","samsung","row","manufacturer","redmi","oppo","lenovo","Container","forwardRef","props","ref","omitThemingProps","centerContent","rest","styles","useStyleConfig","div","cx","__css","__DEV__","displayName","SelectedDeviceList","isAddButton","selectedDevices","isNotRemoveButton","addToMyDeviceHandler","CloseButton","removeIconHandler","uuid","removeDeviceFromTary","SelectDeviceTrayPopup","activeDevicePopup","setActiveDevicePopup","selectedDeviceHandler","selectedDeviceList","deviceOs","actionButtonTitle","isOpen","onOpen","onClose","useDisclosure","searchItemElements","setSearchElements","searchItemHandler","tableDataPlatform","platform","toLowerCase","searchData","trim","toLocaleLowerCase","PopupComponent","buttonTitle1","buttonTitle2","buttonHandler1","buttonHandler2","footerleftItem","flex","logo","RiRefreshLine","applyResetFilterSearchHandler","TrayComponent","itemData","activeSelectDevice","setActiveSelectDevice","getDeleteTrayButton","setDeleteTrayButton","getEditTrayName","setEditTrayName","getEditTrayType","setEditTrayType","getEditTrayId","setEditTrayId","deviceListDataError","selectTestExecutionSelectedDevice","selectDeviceListingError","getListingDevices","selectListingDevices","getEditSelectedDevices","resetSelectedDevice","Stack","editTrayHandler","trayName","trayID","loadTrayData","devices","deleteTrayHandler","deleteTrayButtonHandler","loadingDeleteTray","justifyItems","textAlign","loadingUpdateTray","trayId","body","MyTrayList","getCreateTrayResponse","getCreateTrayError","getDeleteTrayResponse","getDeleteTrayError","getUpdateTrayResponse","getUpdateTrayError","getTrayList","getTrayListError","getTrayDevicesError","toast","useToast","isMobileTesting","usePlatformtypeHook","loadDeviceTrayList","statusCode","status","isClosable","createdDeviceTray","deleteTrayResponseData","updateTrayResponseData","createDeviceTrayError","trayDataLoadedError","CreateTrayComp","setTrayName","trayType","setTrayType","platformList","setPlatformList","useLocation","InputComponent","setInputValue","inputValue","addDeviceHandler","match","createDeviceTrayName","testType","AddtoTrayComponent","selectedDeviceTray","deviceTrayName","selectedDeviceId","loadCreateDeviceTray","MyDevices","loadingCreateTray","loadingMydevice","selectDeviceListLoading","loadDeviceList","fileterData","isOverLay","borderRight"],"mappings":"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","file":"static/js/14.90612715.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { initialState } from '.';\n\nimport { RootState } from 'types';\n\n// First select the relevant part from the state\nconst selectSlice = (state: RootState) => state.myDevices || initialState;\n\nexport const selectMyDevicesData = createSelector(\n  [selectSlice],\n  state => state.myDevicesData,\n);\n\nexport const selectLoadingMyDevices = createSelector(\n  [selectSlice],\n  state => state.myDevicesLoading,\n);\nexport const selectMyDevicesError = createSelector(\n  [selectSlice],\n  state => state.myDevicesError,\n);\n\nexport const selectDeviceCount = createSelector(\n  [selectSlice],\n  state => state.traySelectDevice,\n);\n\nexport const selectedDeviceForTray = createSelector(\n  [selectSlice],\n  state => state.traySelectDevice,\n);\nexport const selectedDeviceTrayName = createSelector(\n  [selectSlice],\n  state => state.devicesTrayName,\n);\nexport const selecteTrayList = createSelector(\n  [selectSlice],\n  state => state.deviceTrayList,\n);\nexport const selecteTrayListError = createSelector(\n  [selectSlice],\n  state => state.deviceListTrayError,\n);\nexport const selecteTrayDevices = createSelector(\n  [selectSlice],\n  state => state.TrayDeviceData,\n);\nexport const selectCreateTrayLoading = createSelector(\n  [selectSlice],\n  state => state.createTrayLoading,\n);\nexport const selectCreateTrayError = createSelector(\n  [selectSlice],\n  state => state.createTrayResponseError,\n);\nexport const selectDeleteTrayLoading = createSelector(\n  [selectSlice],\n  state => state.deleteTrayLoading,\n);\nexport const selectUpdateTrayLoading = createSelector(\n  [selectSlice],\n  state => state.updateTrayLoading,\n);\nexport const selectUpdateTrayError = createSelector(\n  [selectSlice],\n  state => state.updateTrayResponseError,\n);\nexport const selectFetchTrayListLoading = createSelector(\n  [selectSlice],\n  state => state.loadingTrayList,\n);\nexport const selectCreateTrayResponse = createSelector(\n  [selectSlice],\n  state => state.createTrayResponseLoaded,\n);\nexport const selectDeleteTrayResponse = createSelector(\n  [selectSlice],\n  state => state.deleteTrayResponseLoaded,\n);\nexport const selectDeleteTrayError = createSelector(\n  [selectSlice],\n  state => state.deleteTrayResponseError,\n);\nexport const selectUpdateTrayResponse = createSelector(\n  [selectSlice],\n  state => state.updateTrayResponseLoaded,\n);\nexport const selectLoadTrayDevicesError = createSelector(\n  [selectSlice],\n  state => state.TrayDataLoadError,\n);\n\n// export const selectDeletedUser = createSelector(\n//   [selectSlice],\n//   state => state.deleteUserDetail,\n// );\n// export const selectDeletedUserError = createSelector(\n//   [selectSlice],\n//   state => state.deletteUserError,\n// );\n\n// export const selectToastMessageUser = createSelector(\n//   [selectSlice],\n//   state => state.toastMessage,\n// );\n","import { Select } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface propsType {\n  placeholder?: string;\n  width?: any;\n  optionList?: Array<any>;\n  selectValue?: string | number;\n  setSelectValue?: any;\n  height?: string | number;\n}\n\nfunction SelectOption({\n  placeholder,\n  width,\n  selectValue,\n  setSelectValue,\n  optionList,\n  height,\n}: propsType) {\n  return (\n    <Select\n      bg=\"white\"\n      placeholder={placeholder}\n      size=\"sm\"\n      width={width || '100%'}\n      color=\"grey15\"\n      h={height || ' 34px'}\n      border=\"1px solid \"\n      borderColor=\"grey1\"\n      borderRadius=\"5px\"\n      margin=\"0px 2px\"\n      textTransform=\"capitalize\"\n      value={selectValue}\n      onChange={e => setSelectValue(e.target.value)}\n      _focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n    >\n      {optionList &&\n        optionList.map((item, index) => (\n          <option\n            data-option={`select-${item}-${index}`}\n            style={{ textTransform: 'capitalize' }}\n            key={index}\n            value={item}\n          >\n            {item === 'completed' ? 'success' : item}\n          </option>\n        ))}\n    </Select>\n  );\n}\n\nexport default SelectOption;\n","export default __webpack_public_path__ + \"static/media/display1.4fd653a7.png\";","export default __webpack_public_path__ + \"static/media/Icon awesome-trash-alt.e87640b6.svg\";","//@ts-nocheck\nimport { Flex, Text } from '@chakra-ui/react';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport MonthsCounter from './MonthsCounter';\n\ninterface propsType {\n  countDevice?: number;\n  setCountDevice?: any;\n  isGrideView?: boolean;\n  deviceId?: string | number;\n}\n\nfunction DeviceCounter({\n  countDevice,\n  setCountDevice,\n  isGrideView,\n  isMonth,\n  deviceId,\n  deviceInfo,\n}) {\n  const [countMonth, setCountMonth] = useState(1);\n  const { actions } = useMyDevicesSlice();\n  const dispatch = useDispatch();\n  const incrementCountHandler = () => {\n    // if (countDevice < 1) {\n    setCountDevice(countDevice + 1);\n    // }\n    dispatch(actions.addTrayDevices(deviceInfo));\n  };\n\n  const decrementCountHandler = c => {\n    if (countDevice) {\n      setCountDevice(countDevice - 1);\n      setCountMonth(1);\n    }\n  };\n\n  //  console.log(typeof setCountDevice)\n\n  return (\n    <Flex position=\"relative\" flexDirection=\"column\">\n      <Flex\n        w=\"50px\"\n        h=\"20px\"\n        bg=\"blue1\"\n        borderRadius=\"5px\"\n        justifyContent=\"space-around\"\n        fontSize=\"18px\"\n        color=\"white\"\n        top={isGrideView ? '-2px' : '-12px'}\n        //  top=\"-2px\"\n        right={isGrideView ? '-100px' : ''}\n        //     right= '-100px'\n        alignItems=\"center\"\n        alignContent=\"center\"\n      >\n        <Text\n          fontSize=\"14px\"\n          data-addbutton-id={deviceId}\n          cursor=\"pointer\"\n          onClick={incrementCountHandler}\n        >\n          Add\n        </Text>{' '}\n        {/* <Text fontSize=\"14px\">Add</Text>{' '} */}\n        {/* <Text onClick={decrementCountHandler} cursor=\"pointer\" fontSize=\"20px\">\n          -\n        </Text> */}\n      </Flex>\n\n      {/* {(!isGrideView && countDevice) ? (\n        <Flex\n          position=\"absolute\"\n          bg=\"red\"\n          width=\"55px\"\n          borderRadius=\"5px\"\n        right=\"105px\"\n\n          top=\"-12px\"\n        >\n          \n        {isMonth &&<MonthsCounter countMonth={countMonth}  setCountMonth={setCountMonth} ></MonthsCounter> }\n        </Flex>\n      ) : <></>} */}\n    </Flex>\n  );\n}\n\nexport default DeviceCounter;\n","//@ts-nocheck\nimport { Flex, Grid } from '@chakra-ui/react';\nimport LabelComp from 'app/components/LabelComp';\nimport StatusLabels from 'app/pages/AssignDevices/components/StatusLabels';\nimport React from 'react';\nimport GrideViewRow from './GrideViewRow';\n\nfunction GridListViewLayout({ children, isLabels, height }) {\n  return (\n    <Flex h={height || '350px'} flexDirection=\"column\" paddingTop=\"10px\">\n      <Flex\n        flexDirection=\"column\"\n        overflowY=\"auto\"\n        width=\"100%\"\n        css={{\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            border: '5px solid #F3F6F9',\n          },\n          '&::-webkit-scrollbar-track': {\n            boxShadow: 'inset 0 0 6px white',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#C1C1C1',\n            borderRadius: '5px',\n            boreder: '2px solid',\n          },\n        }}\n      >\n        <Flex width=\"100%\" flexDirection=\"column\">\n          {children}\n        </Flex>\n      </Flex>\n      {isLabels && <StatusLabels></StatusLabels>}\n    </Flex>\n  );\n}\n\nexport default GridListViewLayout;\n","import { Flex, Text } from '@chakra-ui/react';\nimport React, { useCallback } from 'react';\n\n// interface propsType{\n//     setCountMonth?:function;\n//     countMonth?:number;\n// }\n\nfunction MonthsCounter({ setCountMonth, countMonth }) {\n  const incrementCountHandler = useCallback(() => {\n    if (countMonth <= 100) {\n      setCountMonth(countMonth + 1);\n    }\n  }, [countMonth]);\n\n  const decrementCountHandler = () => {\n    if (countMonth > 1) {\n      setCountMonth(countMonth - 1);\n    }\n  };\n\n  return (\n    <Flex\n      w=\"55px\"\n      h=\"25px\"\n      bg=\"blue1\"\n      borderRadius=\"5px\"\n      align=\"center\"\n      justifyContent=\"space-around\"\n      fontSize=\"20px\"\n      color=\"white\"\n    >\n      <Text\n        fontSize=\"20px\"\n        padding=\"5px\"\n        cursor=\"pointer\"\n        onClick={incrementCountHandler}\n      >\n        +\n      </Text>{' '}\n      <Text fontSize=\"16px\">{countMonth}</Text>{' '}\n      <Text\n        padding=\"5px\"\n        onClick={decrementCountHandler}\n        cursor=\"pointer\"\n        fontSize=\"20px\"\n      >\n        -\n      </Text>\n    </Flex>\n  );\n}\n\nexport default MonthsCounter;\n","//@ts-nocheck\nimport { Box, Flex, Icon, Img, Td, Tr } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport DeviceCounter from './DeviceCounter';\nimport deleteIcon from '../assets/Icon awesome-trash-alt.svg';\nimport MonthsCounter from './MonthsCounter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport { selectRemoveDeviceId } from 'app/pages/Xcui/slice/selector';\nimport { getStatusColorDevice } from 'utils/gernricfunction';\n\nfunction TableRowData({ item, isDelete, isCheckBox, isLaunch, isMonth }) {\n  const { actions } = useMyDevicesSlice();\n  const { testExecutionActions } = useTestExecutionSlice();\n  const [countDevice, setCountDevice] = useState(0);\n  const [countMonth, setCountMonth] = useState(1);\n  const removeID = useSelector(selectRemoveDeviceId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (countDevice) {\n      dispatch(\n        testExecutionActions.addTestDevices({\n          id: item.serial,\n          count: countDevice,\n          deviceInfo: item,\n        }),\n      );\n    }\n  }, [countDevice, dispatch]);\n\n  useEffect(() => {\n    if (countDevice) {\n      if (item.serial === removeID) {\n        setCountDevice(0);\n        setCountMonth(1);\n      }\n    }\n  }, [removeID]);\n\n  const removeDeviceHandler = removeID => {};\n\n  return (\n    <>\n      <Tr\n        data-device-id={item.serial}\n        data-device-location={item.location}\n        _hover={{ background: 'grey14' }}\n        className=\"hoverRow\"\n      >\n        {/* {console.log({id : item.id , deviceCount: countDevice , month : countMonth})} */}\n        <Td minWidth=\"20px\" paddingLeft=\"0px\" paddingRight=\"0px\" padding=\"5px\">\n          <Box\n            borderRadius=\"50%\"\n            width=\"10px\"\n            h=\"10px\"\n            title={item.deviceParameters.deviceStatus}\n            bg={`${getStatusColorDevice(item.deviceParameters)}`}\n          ></Box>\n        </Td>\n        {/* data for table */}\n\n        <Td paddingLeft=\"15px\" padding=\"5px\">\n          {item.brand}\n        </Td>\n        <Td padding=\"5px\">{item.modelName}</Td>\n        <Td padding=\"5px\">{item.osVersion}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.network}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.mobile}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.screenSize}</Td>\n\n        <Td padding=\"5px\" paddingRight=\"0px\">\n          {item.deviceParameters.city}\n        </Td>\n        <Td padding=\"5px\" paddingRight=\"0px\">\n          {item.serial}\n        </Td>\n\n        {isMonth && (\n          <Td padding=\"3px\" paddingRight=\"0px\">\n            {countDevice > 0 && (\n              <MonthsCounter\n                countMonth={countMonth}\n                setCountMonth={setCountMonth}\n              ></MonthsCounter>\n            )}\n          </Td>\n        )}\n\n        <Td minWidth=\"55px\" padding=\"0px\" paddingLeft=\"0px\">\n          <Flex\n            position=\"relative\"\n            sx={{\n              '.hoverRow:hover &': {\n                display: 'block',\n              },\n            }}\n            //  id={`tab${item.id}`}\n\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            flex-direction=\"row\"\n            //display={countDevice ? 'block' : 'none'}\n            display=\"none\"\n          >\n            {isCheckBox && (\n              <DeviceCounter\n                deviceId={item.serial}\n                deviceInfo={item}\n                isMonth={isMonth}\n                setCountDevice={setCountDevice}\n                countDevice={countDevice}\n                isGrideView={false}\n              ></DeviceCounter>\n            )}\n            {/* {isInput && (\n                    <Flex\n                      position=\"absolute\"\n                      bg=\"white\"\n                      borderRadius=\"5px\"\n                      left=\"-55px\"\n                      top=\"-12px\"\n                    >\n                      <InputComponent\n                        title=\"mon(s)\"\n                        padding=\"2px\"\n                        height=\"25px\"\n                        type=\"number\"\n                        width=\"50px\"\n                      ></InputComponent>\n                    </Flex>\n                  )} */}\n\n            {isDelete && (\n              <Img cursor=\"pointer\" src={deleteIcon} w=\"16px\" h=\"18px\"></Img>\n            )}\n\n            {isLaunch && (\n              <Link to=\"/interacttest/1\">\n                <Icon as={FaTelegramPlane} w=\"24px\" h=\"20px\"></Icon>\n              </Link>\n            )}\n          </Flex>\n        </Td>\n      </Tr>\n    </>\n  );\n}\n\nexport default TableRowData;\n","//@ts-nocheck\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Center,\n  Checkbox,\n  Flex,\n  Icon,\n  Img,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport LabelComp from 'app/components/LabelComp';\nimport { Link } from 'react-router-dom';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport DeviceCounter from './DeviceCounter';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport TableRowData from './TableRowData';\nimport { tableHeaders as headers } from 'app/pages/Interact/config';\n\nconst actionBoxShow = e => {\n  // document.getElementById(`tab${e}`).style.display = 'block';\n};\nconst actionBoxHide = e => {\n  // document.getElementById(`tab${e}`).style.display = 'none';\n};\nfunction DeviceListTable({\n  tableHeading,\n  tableData,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n}) {\n  const [getCountDevice, setSelectedDevice] = useState(0);\n\n  //console.log(filterDeviceData)\n  return (\n    <Flex\n      flexDirection=\"column\"\n      // marginTop=\"10px\"\n      //  minHeight=\"550px\"\n\n      width=\"100%\"\n      backgroundColor=\"white\"\n      padding=\"0px 5px\"\n    >\n      <Table\n        //minWidth=\"780px\"\n        fontFamily=\"Montserrat\"\n        fontWeight=\"500\"\n        variant=\"simple\"\n        // minWidth=\"750px\"\n      >\n        <Thead>\n          <Tr>\n            <Th\n              fontFamily=\"Montserrat\"\n              minWidth=\"20px\"\n              paddingLeft=\"0px\"\n              paddingRight=\"0px\"\n              padding=\"5px\"\n            ></Th>\n\n            {/*  heading for table  */}\n\n            {headers.map((item, index) => (\n              <Th\n                key={index}\n                fontFamily=\"Montserrat\"\n                textTransform=\"capitalize\"\n                color=\"grey1\"\n                minWidth=\"70px\"\n                padding=\"5px\"\n              >\n                {item}\n              </Th>\n            ))}\n\n            {isInput && (\n              <Th\n                fontFamily=\"Montserrat\"\n                minWidth=\"0px\"\n                color=\"grey1\"\n                textTransform=\"none\"\n                paddingLeft=\"0px\"\n                paddingRight=\"0px\"\n                padding=\"5px 0px\"\n              >\n                Months\n              </Th>\n            )}\n            <Th\n              fontFamily=\"Montserrat\"\n              minWidth=\"0px\"\n              color=\"grey1\"\n              textTransform=\"none\"\n              padding=\"5px 0px\"\n            >\n              {/* {isCheckBox ? 'Count' : ''} */}\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {tableData.map((item, index) => (\n            <TableRowData\n              key={index}\n              item={item}\n              isCheckBox={isCheckBox}\n              isDelete={isDelete}\n              isLaunch={isLaunch}\n              isMonth={isInput}\n            ></TableRowData>\n          ))}\n        </Tbody>\n      </Table>\n    </Flex>\n  );\n}\n\nexport default DeviceListTable;\n","//@ts-nocheck\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport React from 'react';\nimport DeviceListTable from './DeviceListTable';\nimport GridListViewLayout from './GridListViewLayout';\n\nconst tableHeading = ['make', 'os', 'serial', 'model', 'location'];\n\nfunction ListViewDevice({\n  tableData,\n  isLabels,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n  isLoading,\n  errorDeviceData,\n  height,\n}) {\n  //console.log(tableData);\n  const fileterTableData = tableData.filter(\n    device =>\n      device.deviceParameters.hasOwnProperty('deviceStatus') &&\n      device.deviceParameters.deviceStatus !== 'unavailable',\n  );\n  return (\n    <GridListViewLayout height={height} isLabels={isLabels}>\n      {isLoading ? (\n        <LoadingComponent height=\"50vh\"></LoadingComponent>\n      ) : (\n        <>\n          {errorDeviceData === 1 ? (\n            <NoContent height=\"50vh\" message=\"Something Went Wrong\"></NoContent>\n          ) : (\n            <>\n              {fileterTableData.length !== 0 ? (\n                <DeviceListTable\n                  isDelete={isDelete}\n                  isLaunch={isLaunch}\n                  isCheckBox={isCheckBox}\n                  isInput={isInput}\n                  tableData={fileterTableData}\n                  tableHeading={tableHeading}\n                ></DeviceListTable>\n              ) : (\n                <NoContent height=\"50vh\" message=\"No Data Found\"></NoContent>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </GridListViewLayout>\n  );\n}\n\nexport default ListViewDevice;\n","//@ts-nocheck\nimport React, { useState } from 'react';\nimport {\n  Text,\n  Flex,\n  HStack,\n  VStack,\n  IconButton,\n  Select,\n  Tabs,\n  Tab,\n  TabList,\n  TabPanels,\n  TabPanel,\n  useRadioGroup,\n} from '@chakra-ui/react';\nimport { PhoneIcon, DragHandleIcon } from '@chakra-ui/icons';\nimport SearchBar from 'app/pages/TestAnalytics/components/SearchBar';\nimport { FaListUl } from 'react-icons/fa';\nimport { BsGrid3X3GapFill } from 'react-icons/bs';\nimport { AiFillAndroid } from 'react-icons/ai';\nimport { FaApple } from 'react-icons/fa';\nimport CustomIconButton from 'app/pages/Appium/components/CustomIconButton';\nimport TrayDropdown from 'app/pages/Appium/components/TrayDropdown';\nimport ButtonComp from 'app/components/ButtonComp';\nimport TabButton from 'app/pages/AutomationTest/components/TabButton';\n// import { width } from '@amcharts/amcharts4/.internal/core/utils/Utils';\n\nfunction DeviceDisplayLayout({ child, child1, child2, os, hideSearchButton }) {\n  const [selectCategory, setSelectCategory] = useState('android');\n  const options =\n    os === 'ios' ? ['ios'] : os === 'android' ? ['android'] : ['andoid', 'ios']; //['andoid', 'ios'];\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'category',\n    defaultValue: 'android',\n    onChange: val => setSelectCategory(val),\n  });\n\n  const group = getRootProps();\n  return (\n    <Flex\n      color=\"grey1\"\n      fontSize=\"14px\"\n      fontFamily=\"Montserrat\"\n      fontWeight=\"500\"\n      flexDirection=\"column\"\n      padding=\"20px 5px\"\n      width=\"100%\"\n    >\n      <Tabs>\n        <Flex justifyContent=\"flex-end\" alignItems=\"center\" flexwrap=\"wrap\">\n          {/* <SearchBar width=\"330px\"></SearchBar> */}\n          <HStack>\n            {/* <TabList border=\"none\"> */}\n            {/* <Flex h=\"35px\" marginTop=\"2px\" align=\"center\"> */}\n\n            {child}\n            {/* <TabButton\n          title=\"Devices\"\n  width=\"140px\">\n          </TabButton> */}\n            {/* </Flex> */}\n            {/* <Flex h=\"35px\" marginTop=\"2px\" align=\"center\"> */}\n            {/* <IconButton\n                borderRadius=\"3px\"\n                _focus={{ boxShadow: ' 0 0 0 white' }}\n                _selected={{ color: 'blue1' }}\n                w=\"40px\"\n                h=\"35px\"\n                aria-label=\"Search database\"\n                icon={<AiFillAndroid />}\n              />\n              <IconButton\n                borderRadius=\"3px\"\n                _selected={{ color: 'blue1' }}\n                _focus={{ boxShadow: ' 0 0 0 white' }}\n                w=\"40px\"\n                h=\"35px\"\n                aria-label=\"Search database\"\n                icon={<FaApple />}\n              /> */}\n\n            {/* <HStack {...group} spacing=\"0px\">\n                {options.map(value => {\n                  const radio = getRadioProps({ value });\n                  return (\n                    <CustomIconButton\n                      height=\"35px\"\n                      width=\"40px\"\n                      key={value}\n                      {...radio}\n                    >\n                      {value}\n                    </CustomIconButton>\n                  );\n                })}\n              </HStack> */}\n\n            {/* <TrayDropdown></TrayDropdown> */}\n            {/* <TabButton\n          title=\"Trays\"\n           width=\"140px\"\n           >\n          </TabButton> */}\n            {/* </Flex>\n             */}\n            {/* </TabList> */}\n\n            <Flex align=\"center\">\n              <TabList border=\"none\">\n                {/* <Tab \n                  disabled={true}\n                  borderBottom=\"none\"\n                  _focus={{ boxShadow: ' 0 0 0 white' }}\n                  padding=\"0\"\n                  _selected={{ color: 'blue1' }}\n                >\n                  <IconButton\n                    borderRadius=\"3px\"\n                     as=\"div\"\n                    // border=\".2px solid #C8C8C8\"\n                    _focus={{ boxShadow: ' 0 0 0 white' }}\n                    w=\"40px\"\n                    h=\"36px\"\n                    aria-label=\"Search database\"\n                    icon={<BsGrid3X3GapFill />}\n                  />\n                </Tab> */}\n                <Tab\n                  borderBottom=\"none\"\n                  _focus={{ boxShadow: ' 0 0 0 white' }}\n                  padding=\"0\"\n                  _selected={{ color: 'blue1' }}\n                >\n                  {!hideSearchButton && (\n                    <IconButton\n                      borderRadius=\"3px\"\n                      as=\"div\"\n                      _focus={{ boxShadow: ' 0 0 0 white' }}\n                      w=\"40px\"\n                      h=\"36px\"\n                      // border=\".2px solid #C8C8C8\"\n                      aria-label=\"Search database\"\n                      icon={<FaListUl />}\n                    />\n                  )}\n                </Tab>\n              </TabList>\n            </Flex>\n\n            <Flex\n              w=\"200\"\n              justifyContent=\"space-betweens\"\n              color=\"grey\"\n              fontWeight=\"500\"\n              alignItems=\"center\"\n              alignSelf=\"end\"\n            >\n              {/* <Text marginRight=\"10px\" color=\"grey13\">\n                Group By\n              </Text>\n              <Select align=\"right\" width=\"110px\" h=\"35px\" placeholder=\"Make\">\n              </Select>{' '} */}\n            </Flex>\n          </HStack>\n        </Flex>\n\n        <TabPanels height=\"100%\">\n          {/* <TabPanel padding=\"0\" margin=\"0\" minHeight=\"100vh\">\n            {child1}\n          </TabPanel> */}\n\n          <TabPanel padding=\"0\" margin=\"0\" minHeight=\"100vh\">\n            {child2}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n\nexport default DeviceDisplayLayout;\n","// @ts-nocheck\nimport { Flex, Icon } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport SearchBar from 'app/pages/TestAnalytics/components/SearchBar';\nimport React from 'react';\nimport { BiSearch } from 'react-icons/bi';\n\nfunction SearchbarWithButton({\n  searchItem,\n  setSearchItem,\n  searchItemsHandler,\n}) {\n  const enterKeyHandler = event => {\n    if (event.keyCode === 13) {\n      searchItemsHandler();\n    }\n  };\n\n  return (\n    <Flex paddingRight=\"20px\" width=\"40%\" align=\"center\">\n      <SearchBar\n        width=\"70%\"\n        enterKeyHandler={enterKeyHandler}\n        searchItem={searchItem}\n        setSearchItem={setSearchItem}\n      ></SearchBar>\n      <ButtonComp\n        marginLeft=\"0px\"\n        padding=\"9px  10px\"\n        name=\"search-testanalytic-key-button\"\n        buttonHandler={searchItemsHandler}\n      >\n        <Icon as={BiSearch}></Icon>\n      </ButtonComp>\n    </Flex>\n  );\n}\n\nexport default SearchbarWithButton;\n","//@ts-nocheck\nimport { Box, Button, Checkbox, Flex, Icon, Img, Text } from '@chakra-ui/react';\nimport { CardComponent as Card } from 'app/pages/TestAnalytics/components/Card';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport display from '../../../../styles/Assets/display1.png';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport deleteIcon from '../assets/Icon awesome-trash-alt.svg';\nimport DeviceCounter from './DeviceCounter';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\n\nfunction DeviceCard({\n  connection,\n  width,\n  margin,\n  hoverObject,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n  cardData,\n  selectArray,\n  selectedDeviceArray,\n}) {\n  // const [getCountDevice, setSelectedDevice] = useState(0);\n  const [countDevice, setCountDevice] = useState(0);\n  //   const actionBoxShow = e => {\n  //     document.getElementById(`box${e}`).style.display = 'block';\n  //   };\n  //   const actionBoxHide = e => {\n  //     document.getElementById(`box${e}`).style.display = 'none';\n  //   };\n\n  // const hoverObject = connection\n  //   ? null\n  //   : {\n  //       backgroundColor: '#B5B5C3',\n  //     };\n\n  // const renderIdPage = id => {\n  //   const cardId = id;\n  // };\n\n  const clickHandler = () => {\n    {\n      isDelete && isDelete(e.target.id);\n    }\n    {\n      isCheckBox && isLaunch(e.target.id);\n    }\n    {\n      isLaunch && isLaunch(e.target.id);\n    }\n\n    //selectedDeviceArray.push({deviceId : cardData.id, count : countDevice})\n  };\n  //console.log(\"array\"+selectArray)\n  // console.log(cardDart.id , countDevice)\n\n  return (\n    <>\n      {cardData && (\n        <Flex\n          width={width || '235px'}\n          hoverObject={hoverObject}\n          padding=\"1\"\n          marginRight=\"5px\"\n          marginBottom=\"5px\"\n          margin={margin}\n          border=\"1px solid\"\n          borderColor=\"white3\"\n          borderLeft=\"3px solid\"\n          borderLeftColor=\"red1\"\n          borderRadius=\"3px\"\n          _hover={{ background: 'grey14' }}\n          position=\"relative\"\n          background={countDevice ? 'grey14' : ''}\n          className=\"deviceCard\"\n          onCLick={clickHandler}\n        >\n          {/* // onMouseOver={() => actionBoxShow(cardData.id)}\n            // onMouseOut={() => actionBoxHide(cardData.id)}\n           // position=\"relative\"\n           // color=\"grey13\"\n          //  fontWeight=\"500\"\n           // fontSize=\"14px\"\n            // className=\"cardId\" */}\n          {/* {console.log({ id: cardData.id, count: countDevice })} */}\n\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            id={`box${cardData.id}`}\n            top=\"35px\"\n            right=\"107px\"\n            // w=\"15px\"\n            // h=\"15px\"\n            sx={{\n              '.deviceCard:hover &': {\n                display: 'block',\n              },\n            }}\n            position=\"absolute\"\n            display={countDevice ? 'block' : 'none'}\n          >\n            {isCheckBox && (\n              <DeviceCounter\n                setCountDevice={setCountDevice}\n                countDevice={countDevice}\n                isGrideView={true}\n              ></DeviceCounter>\n            )}\n            {/* {isInput && (\n              <InputComponent\n                title=\"mon(s)\"\n                padding=\"2px\"\n                height=\"25px\"\n                type=\"number\"\n                width=\"55px\"\n              ></InputComponent>\n            )} */}\n            {isDelete && (\n              <Img cursor=\"pointer\" src={deleteIcon} w=\"16px\" h=\"18px\"></Img>\n            )}\n\n            {isLaunch && (\n              <Link to=\"/interacttest/1\">\n                <Icon as={FaTelegramPlane} w=\"24px\" h=\"24px\"></Icon>\n              </Link>\n            )}\n\n            {/* {clickHandler && <Checkbox colorScheme=\"red\"></Checkbox>}\n          {clickHandler && (\n            <Link to=\"/interacttest/{cardId}\">\n              <Img src={goIcon} alt=\"go\"></Img>\n            </Link>\n          )} */}\n          </Flex>\n          <Flex align=\"center\" padding=\"0px 5px\">\n            <Img src={display} w=\"45px\" h=\"76px\" alt=\"display\"></Img>\n          </Flex>\n          <Flex paddingLeft=\"5px\" flexDirection=\"column\" width=\"100%\">\n            <Text textTransform=\"capitalize\">{cardData.model} </Text>\n            <Text>\n              {cardData.osName} {cardData.osVersion}\n            </Text>\n            <Text>{cardData.deviceLocation}</Text>\n            <Text>{cardData.networkProvider}</Text>\n          </Flex>\n\n          {/* connetion  status  */}\n          <Flex justify=\"end\" fontSize=\"14px\" paddingRight=\"5px\">\n            {connection}\n          </Flex>\n        </Flex>\n      )}\n    </>\n  );\n}\n\nexport default DeviceCard;\n","//@ts-nocheck\nimport { Flex, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport DeviceCard from './DeviceCard';\nlet selectArray = [];\nfunction GrideViewRow({\n  Make,\n  tableData,\n  hoverObject,\n  isDelete,\n  isCheckBox,\n  isLaunch,\n  isInput,\n  selectedDeviceArray,\n}) {\n  // console.log(selectArray);\n  return (\n    <Flex\n      flexDirection=\"column\"\n      marginTop=\"10px\"\n      color=\"grey13\"\n      fontWeight=\"500\"\n      overflow=\"hidden\"\n    >\n      <Text>{Make}</Text>\n      <Flex\n        alignContent=\"center\"\n        justifyContent=\"flex-start\"\n        flexWrap=\"wrap\"\n        width=\"100%\"\n      >\n        {tableData.map(card => (\n          <DeviceCard\n            isInput={isInput}\n            isLaunch={isLaunch}\n            isDelete={isDelete}\n            isCheckBox={isCheckBox}\n            cardData={card}\n            selectArray={selectArray}\n            selectedDeviceArray={selectedDeviceArray}\n            //  hoverObject={hoverObject}\n            // margin=\"0px 5px 0px 0px \"\n          ></DeviceCard>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default GrideViewRow;\n","//@ts-nocheck\nimport { map } from '@amcharts/amcharts4/.internal/core/utils/Iterator';\nimport React from 'react';\nimport GrideViewRow from './GrideViewRow';\nimport GridListViewLayout from './GridListViewLayout';\n\nfunction GridViewDevice({\n  tableData,\n  isLabels,\n  hoverObject,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  selectedDeviceArray,\n}) {\n  const samsung = tableData.filter(row => row.manufacturer == 'Samsung');\n  const redmi = tableData.filter(row => row.manufacturer == 'Redmi');\n  const oppo = tableData.filter(row => row.manufacturer === 'Oppo');\n  const lenovo = tableData.filter(row => row.manufacturer === 'Lenovo');\n  //console.log(samsung);\n  return (\n    <GridListViewLayout isLabels={isLabels}>\n      {samsung.length > 0 && (\n        <GrideViewRow\n          isCheckBox={isCheckBox}\n          isLaunch={isLaunch}\n          Make=\"Samsung\"\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={samsung}\n          selectedDeviceArray={selectedDeviceArray}\n        ></GrideViewRow>\n      )}\n      {redmi.length > 0 && (\n        <GrideViewRow\n          isLaunch={isLaunch}\n          isCheckBox={isCheckBox}\n          Make=\"RedMi\"\n          selectedDeviceArray={selectedDeviceArray}\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={redmi}\n        ></GrideViewRow>\n      )}\n      {oppo.length > 0 && (\n        <GrideViewRow\n          isLaunch={isLaunch}\n          isDelete={isDelete}\n          isCheckBox={isCheckBox}\n          Make=\"Oppo\"\n          selectedDeviceArray={selectedDeviceArray}\n          hoverObject={hoverObject}\n          tableData={oppo}\n        ></GrideViewRow>\n      )}\n      {lenovo.length > 0 && (\n        <GrideViewRow\n          selectedDeviceArray={selectedDeviceArray}\n          isLaunch={isLaunch}\n          isCheckBox={isCheckBox}\n          Make=\"Lenovo\"\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={lenovo}\n        ></GrideViewRow>\n      )}\n    </GridListViewLayout>\n  );\n}\n\nexport default GridViewDevice;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n */\nexport const Container = forwardRef<ContainerProps, \"div\">((props, ref) => {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nif (__DEV__) {\n  Container.displayName = \"Container\"\n}\n","// @ts-nocheck\nimport { CloseButton, Container, Flex, Img, Text } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport { useMyDevicesSlice } from 'app/pages/MyDevices/slice';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport display from '../../../../styles/Assets/display1.png';\n\nfunction SelectedDeviceList({\n  isAddButton,\n  selectedDevices,\n  isNotRemoveButton,\n}) {\n  const dispatch = useDispatch();\n  const { actions } = useMyDevicesSlice();\n  const removeIconHandler = id => {\n    //console.log(id);\n    dispatch(actions.removeDeviceFromTary(id));\n  };\n  const addToMyDeviceHandler = () => {};\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      fontFamily=\"Montserrat\"\n      fontWeight=\"500\"\n      fontSize=\"14px\"\n      color=\"black\"\n      marginBottom=\"5px\"\n      padding=\"15px\"\n      bg=\"white\"\n      width=\"100%\"\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text fontSize=\"16px\">Selected Devices({selectedDevices.length})</Text>\n        {isAddButton && (\n          <ButtonComp\n            width=\"170px\"\n            backgroundColor=\"blue1\"\n            buttonHandler={addToMyDeviceHandler}\n            color=\"white\"\n          >\n            Add To My Device\n          </ButtonComp>\n        )}\n      </Flex>\n      <Flex\n        flexDirection=\"column\"\n        marginTop=\"5px\"\n        overflowY=\"auto\"\n        css={{\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            //height: '30px',\n            border: '5px solid #F3F6F9',\n          },\n          '&::-webkit-scrollbar-track': {\n            boxShadow: 'inset 0 0 6px white',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#C1C1C1',\n            borderRadius: '5px',\n            boreder: '2px solid',\n          },\n        }}\n        padding=\"2px\"\n      >\n        {selectedDevices.map((item, index) => (\n          <Flex\n            alignItems=\"center\"\n            key={index}\n            justifyContent=\"space-between\"\n            margin=\"5px 0px\"\n          >\n            <Flex alignContent=\"center\">\n              <Img\n                w=\"20px\"\n                h=\"40px\"\n                src={display}\n                alt=\"display\"\n                marginRight=\"10px\"\n              ></Img>\n              <Container padding=\"0px\">\n                <Text>{item.brand}</Text>\n                <Text>\n                  {item.modelName} {item.osVersion}\n                </Text>\n                {/* <Text>\n                \n                  {item.serial}\n                  </Text> */}\n              </Container>\n            </Flex>\n\n            {!isNotRemoveButton && (\n              <CloseButton\n                marginRight=\"5px\"\n                onClick={e => removeIconHandler(item.uuid)}\n              />\n            )}\n          </Flex>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default SelectedDeviceList;\n","// @ts-nocheck\nimport { Flex, Icon, useDisclosure } from '@chakra-ui/react';\nimport PopupComponent from 'app/components/PopupComponent';\nimport StatusLabels from 'app/pages/AssignDevices/components/StatusLabels';\nimport SelectedDeviceList from 'app/pages/MozarkDevices/components/SelectedDeviceList';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DeviceDisplayLayout from './DeviceDisplayLayout';\nimport GridViewDevice from './GridViewDevice';\nimport ListViewDevice from './ListViewDevice';\nimport SearchbarWithButton from 'app/pages/Calender/Components/SearchbarWithButton';\nimport ButtonComp from 'app/components/ButtonComp';\nimport { RiRefreshLine } from 'react-icons/ri';\n// eslint-disable-next-line no-dupe-args\nfunction SelectDeviceTrayPopup({\n  tableData,\n  activeDevicePopup,\n  setActiveDevicePopup,\n  title,\n  selectedDeviceHandler,\n  selectedDeviceList,\n  deviceOs,\n  isLoading,\n  errorDeviceData,\n  actionButtonTitle,\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [searchItem, setSearchItem] = useState('');\n  const [searchItemElements, setSearchElements] = useState(tableData);\n\n\n\n  const searchItemHandler = (searchItem) => {\n     const tableDataPlatform = deviceOs\n    ? tableData.filter(\n          item => item.platform.toLowerCase() === deviceOs.toLowerCase(),\n      )\n    : tableData;\n    if (!searchItem) {\n      setSearchElements(tableDataPlatform)\n      return \n    }\n    const searchData = tableDataPlatform.filter(\n      item =>\n    item.platform.toLowerCase() == searchItem.trim().toLocaleLowerCase() ||\n    item.brand.toLowerCase() == searchItem.trim().toLocaleLowerCase() ||\n    item.serial.toLowerCase() == searchItem.trim().toLocaleLowerCase() ||\n    item.modelName.toLowerCase() == searchItem.trim().toLocaleLowerCase() ||\n        item.deviceParameters.city.toLowerCase() ==\n          searchItem.trim().toLocaleLowerCase(),\n);\n//console.log(searchData)\n    setSearchElements(searchData);\n  };\n  const applyResetFilterSearchHandler = ()=>{\n    const tableDataPlatform = deviceOs\n    ? tableData.filter(\n          item => item.platform.toLowerCase() === deviceOs.toLowerCase(),\n      )\n    : tableData;\n    setSearchItem('');\n    setSearchElements(tableDataPlatform)\n  }\n \n  useEffect(()=>{\n    searchItemHandler('')\n    return ()=>{\n       setSearchItem('');\n    }\n  },[tableData , deviceOs])\n \n  return (\n    <>\n      <PopupComponent\n        isOpen={activeDevicePopup}\n        onClose={() => setActiveDevicePopup(false)}\n        title={title || 'Select Devices'}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2={actionButtonTitle}\n        buttonHandler1={() => setActiveDevicePopup(false)}\n        width=\"1100px\"\n        buttonHandler2={selectedDeviceHandler}\n        footerleftItem={<StatusLabels></StatusLabels>}\n      >\n        <Flex height=\"400px\" width=\"100%\" background=\"white\" borderRadius=\"3\">\n      \n          <Flex flex={2.5} justifyContent=\"center\">\n            \n            {/* <DeviceDisplayLayout */}\n            {/* os={deviceOs}\n              child1={ */}\n            <Flex width=\"100%\" flexDirection=\"column\">\n              <Flex padding=\"0px 8px\" justifyContent='space-between' alignItems='center' >\n                <SearchbarWithButton\n                  searchItem={searchItem}\n                  setSearchItem={setSearchItem}\n                  searchItemsHandler={()=>searchItemHandler(searchItem)}\n                ></SearchbarWithButton>\n                <ButtonComp\n          padding=\"4px 8px\"\n          backgroundColor=\"white\"\n          color=\"#3F4254\"\n          logo={<Icon as={RiRefreshLine} fontWeight=\"600\"></Icon>}\n          buttonHandler={applyResetFilterSearchHandler}\n        >\n          Reset\n        </ButtonComp>\n              </Flex>\n             \n              {/* <GridViewDevice\n              isCheckBox={true}\n              tableData={tableData}\n            ></GridViewDevice> */}\n              {/* } */}\n              {/* child2={ */}\n              <ListViewDevice\n                isLoading={isLoading}\n                isCheckBox={true}\n                isLabels={false}\n                height=\"380px\"\n                tableData={searchItemElements}\n                errorDeviceData={errorDeviceData}\n              ></ListViewDevice>\n            </Flex>\n            {/* } */}\n            {/* ></DeviceDisplayLayout> */}\n          </Flex>\n\n          <Flex\n            borderLeft=\"2px solid #EDEDED\"\n            color=\"grey13\"\n            fontWeight=\"500\"\n            flex={1}\n            fontFamily=\"Montserrat\"\n            // width=\"290px\"\n          >\n            <SelectedDeviceList\n              isAddButton={false}\n              selectedDevices={selectedDeviceList}\n            ></SelectedDeviceList>\n          </Flex>\n        </Flex>\n      </PopupComponent>\n    </>\n  );\n}\n\nexport default SelectDeviceTrayPopup;\n","//@ts-nocheck\nimport {\n  background,\n  Box,\n  CloseButton,\n  Flex,\n  HStack,\n  Stack,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport PopupComponent from 'app/components/PopupComponent';\nimport SelectDevicePopup from 'app/pages/Appium/components/SelectDevicePopup';\nimport { tableData } from 'app/pages/MozarkDevices';\nimport React, { useState } from 'react';\nimport SelectDeviceTrayPopup from './SelectDeviceTrayPopup';\nimport { useSelector } from 'react-redux';\nimport {\n  selectDeviceListingError,\n  selectListingDevices,\n  selectTestExecutionSelectedDevice,\n} from 'app/pages/Xcui/slice/selector';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport { useMyDevicesSlice } from '../slice';\nimport { selectedDeviceForTray, selecteTrayDevices } from '../slice/selector';\n\nfunction TrayComponent({ itemData }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [activeSelectDevice, setActiveSelectDevice] = useState(false);\n  const [getDeleteTrayButton, setDeleteTrayButton] = useState('');\n  const [getEditTrayName, setEditTrayName] = useState('');\n  const [getEditTrayType, setEditTrayType] = useState('');\n  const [getEditTrayId, setEditTrayId] = useState('');\n  const { testExecutionActions } = useTestExecutionSlice();\n  const { actions } = useMyDevicesSlice();\n  const dispatch = useDispatch();\n  const selectedDevices = useSelector(selectTestExecutionSelectedDevice);\n  const deviceListDataError = useSelector(selectDeviceListingError);\n  const getListingDevices = useSelector(selectListingDevices);\n  const getTrayDeivces = useSelector(selecteTrayDevices);\n  const getEditSelectedDevices = useSelector(selectedDeviceForTray);\n\n  const fileterData = getListingDevices;\n  // .filter(\n  //   item => item.deviceParameters.status === 'available',\n  // );\n\n  const editTrayHandler = item => {\n    setEditTrayName(item.trayName);\n    setEditTrayId(item.trayID);\n    setEditTrayType(item.platform);\n    dispatch(actions.loadTrayData(item.trayID));\n    setActiveSelectDevice(true);\n  };\n  const deleteTrayHandler = id => {\n    onOpen();\n    setDeleteTrayButton(id);\n  };\n  useEffect(() => {\n    if (activeSelectDevice === false) {\n      dispatch(actions.resetSelectedDevice());\n    }\n  }, [activeSelectDevice]);\n\n  const deleteTrayButtonHandler = () => {\n    dispatch(actions.loadingDeleteTray(getDeleteTrayButton));\n    onClose();\n  };\n\n  const selectedDeviceHandler = () => {\n    setActiveSelectDevice(false);\n    dispatch(\n      actions.loadingUpdateTray({\n        trayId: getEditTrayId,\n        body: {\n          devices: getEditSelectedDevices.map(item => item.serial),\n        },\n      }),\n    );\n  };\n\n  return (\n    <>\n      <Flex\n        align=\"center\"\n        minWidth=\"300px\"\n        justify=\"space-between\"\n        flexDirection=\"row\"\n        h=\"100px\"\n        padding=\"5px 7px\"\n        background=\"white\"\n        _hover={{ background: 'grey14' }}\n        border=\"1px solid\"\n        borderColor=\"grey14\"\n        borderRadius=\"4px\"\n        boxShadow=\"0px 1px 2px #00000029\"\n        //position=\"relative\"\n        //zIndex=\"0\"\n      >\n        <Stack\n          cursor=\"pointer\"\n          flex={1}\n          display=\"flex\"\n          title=\"Update\"\n          onClick={e => editTrayHandler(itemData)}\n        >\n          <HStack>\n            <Text>Tray -</Text>\n            <Text>{itemData.trayName}</Text>\n          </HStack>\n          <HStack>\n            <Text>Type -</Text>\n            <Text>{itemData.platform}</Text>\n          </HStack>\n          <HStack>\n            <Text>No of Devices -</Text>\n            <Text>{itemData.devices && itemData.devices.length}</Text>\n          </HStack>\n        </Stack>\n        <Stack>\n          {/* <HStack position=\"absolute\"  zIndex=\"1\"  >\n            <CloseButton></CloseButton>\n          </HStack> */}\n          {/* <HStack>\n            <Text cursor=\"pointer\" >\n              Edit\n            </Text>\n          </HStack> */}\n        </Stack>\n        <CloseButton\n          onClick={e => deleteTrayHandler(itemData.trayID)}\n        ></CloseButton>\n      </Flex>\n\n      <PopupComponent\n        title=\"Delete Tray\"\n        buttonHandler1={onClose}\n        width=\"450px\"\n        //footer={true}\n        isOpen={isOpen}\n        onClose={onClose}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2=\"Delete\"\n        buttonHandler1={onClose}\n        buttonHandler2={deleteTrayButtonHandler}\n      >\n        <Flex\n          justify=\"center\"\n          width=\"100%\"\n          align=\"center\"\n          justifyItems=\"center\"\n        >\n          <Text textAlign=\"center\">Are you sure delete this Tray ? </Text>\n        </Flex>\n      </PopupComponent>\n      <SelectDeviceTrayPopup\n        selectedDeviceHandler={selectedDeviceHandler}\n        title={getEditTrayName}\n        actionButtonTitle=\"Update\"\n        deviceOs={getEditTrayType}\n        activeDevicePopup={activeSelectDevice}\n        setActiveDevicePopup={setActiveSelectDevice}\n        selectedDeviceList={getEditSelectedDevices}\n        tableData={getListingDevices}\n        errorDeviceData={deviceListDataError}\n      ></SelectDeviceTrayPopup>\n    </>\n  );\n}\n\nexport default TrayComponent;\n","//@ts-nocheck\nimport { Flex, Stack, Text, useFocusEffect, useToast } from '@chakra-ui/react';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport {\n  selectCreateTrayError,\n  selectCreateTrayResponse,\n  selectDeleteTrayError,\n  selectDeleteTrayResponse,\n  selecteTrayList,\n  selecteTrayListError,\n  selectFetchTrayListLoading,\n  selectLoadTrayDevicesError,\n  selectUpdateTrayError,\n  selectUpdateTrayResponse,\n} from '../slice/selector';\nimport TrayComponent from './TrayComponent';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction MyTrayList() {\n  const getCreateTrayResponse = useSelector(selectCreateTrayResponse);\n  const getCreateTrayError = useSelector(selectCreateTrayError);\n  const getDeleteTrayResponse = useSelector(selectDeleteTrayResponse);\n  const getDeleteTrayError = useSelector(selectDeleteTrayError);\n  const getUpdateTrayResponse = useSelector(selectUpdateTrayResponse);\n  const getUpdateTrayError = useSelector(selectUpdateTrayError);\n  const loadingTrayList = useSelector(selectFetchTrayListLoading);\n  const getTrayList = useSelector(selecteTrayList);\n  const getTrayListError = useSelector(selecteTrayListError);\n  const getTrayDevicesError = useSelector(selectLoadTrayDevicesError);\n  const dispatch = useDispatch();\n  const { actions } = useMyDevicesSlice();\n  const toast = useToast();\nconst isMobileTesting = usePlatformtypeHook();\n  useEffect(() => {\n\n      dispatch(actions.loadDeviceTrayList(isMobileTesting ? 'app-automation' : 'lr-automation'));\n\n  }, []);\n\n\n\n  useEffect(() => {\n    if (getCreateTrayResponse.hasOwnProperty('statusCode')) {\n      if (\n        getCreateTrayResponse.hasOwnProperty('statusCode') &&\n        getCreateTrayResponse.statusCode === 200\n      ) {\n        toast({\n          title: getCreateTrayResponse.body.message,\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        dispatch(actions.loadDeviceTrayList(isMobileTesting ? 'app-automation' : 'lr-automation'));\n      } else {\n        toast({\n          title: getCreateTrayResponse.body.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n      dispatch(actions.createdDeviceTray({}));\n    }\n  }, [getCreateTrayResponse]);\n\n  useEffect(() => {\n    if (getDeleteTrayResponse.hasOwnProperty('message')) {\n      toast({\n        title: getDeleteTrayResponse.message,\n        status: 'success',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.deleteTrayResponseData({}));\n      dispatch(actions.loadDeviceTrayList(isMobileTesting ? 'app-automation' : 'lr-automation'));\n    }\n  }, [getDeleteTrayResponse]);\n  useEffect(() => {\n    if (getUpdateTrayResponse.hasOwnProperty('message')) {\n      toast({\n        title: getUpdateTrayResponse.message,\n        status: 'success',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.updateTrayResponseData({}));\n      dispatch(actions.loadDeviceTrayList(isMobileTesting ? 'app-automation' : 'lr-automation'));\n    }\n  }, [getUpdateTrayResponse]);\n  useEffect(() => {\n    if (getCreateTrayError === 1) {\n      toast({\n        title: \"Couldn't create Tray\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.createDeviceTrayError(null));\n    }\n    if (getDeleteTrayError === 1) {\n      toast({\n        title: \"Couldn't delete Tray\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.deleteTrayResponseError(null));\n    }\n    if (getUpdateTrayError === 1) {\n      toast({\n        title: \"Couldn't update Tray\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.updateTrayResponseError(null));\n    }\n    if (getTrayDevicesError === 1) {\n      toast({\n        title: \"Couldn't load tray Devices\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.trayDataLoadedError(null));\n    }\n  }, [\n    getCreateTrayError,\n    getDeleteTrayError,\n    getUpdateTrayError,\n    getTrayDevicesError,\n  ]);\n\n  return (\n    <Flex flexDirection=\"column\" width=\"100%\" marginTop=\"20px\">\n      <Text fontWeight=\"600\">My Trays</Text>\n      <Flex\n        marginTop=\"15px\"\n        paddingRight=\"5px\"\n        height=\"65vh\"\n        flexDirection=\"column\"\n        css={{\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            //height: '30px',\n            border: '5px solid #F3F6F9',\n          },\n          '&::-webkit-scrollbar-track': {\n            boxShadow: 'inset 0 0 6px white',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#C1C1C1',\n            borderRadius: '5px',\n            boreder: '2px solid',\n          },\n        }}\n        overflowY=\"auto\"\n      >\n        {loadingTrayList ? (\n          <LoadingComponent width=\"300px\"></LoadingComponent>\n        ) : (\n          <Stack>\n            {getTrayListError === 1 ? (\n              <NoContent\n                height=\"300px\"\n                message=\"Something Went Wrong\"\n              ></NoContent>\n            ) : (\n              <>\n                {getTrayList.length > 0 ? (\n                  getTrayList.map((item, index) => (\n                    <TrayComponent key={index} itemData={item}></TrayComponent>\n                  ))\n                ) : (\n                  <NoContent message=\"No Data Found\"></NoContent>\n                )}\n              </>\n            )}\n          </Stack>\n        )}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default MyTrayList;\n","//@ts-nocheck\nimport { Stack, Text, useToast } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport SelectOption from 'app/pages/DebugReportGenerate/components/SelectOption';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport {\n  selectCreateTrayError,\n  selectCreateTrayResponse,\n} from '../slice/selector';\nimport { useLocation } from 'react-router-dom';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction CreateTrayComp({ setActiveSelectDevice, onOpen }) {\n  const getCreateTrayResponse = useSelector(selectCreateTrayResponse);\n  const getCreateTrayError = useSelector(selectCreateTrayError);\n  const [trayName, setTrayName] = useState('');\n  const [trayType, setTrayType] = useState('');\n  const  [platformList , setPlatformList] = useState(['android', 'ios', 'tv']);   \n  const location = useLocation()  \n  const dispatch = useDispatch();\n  const toast = useToast();\n  const isMobileTesting = usePlatformtypeHook()\n  const { actions } = useMyDevicesSlice();\n\n  const addDeviceHandler = () => {\n    if (trayName === '') {\n      toast({\n        title: 'Please Enter Tray Name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      return;\n    }\n\n    const pattern = /[^a-zA-Z0-9_-]/;\n    if (trayName.match(pattern)) {\n      toast({\n        title: 'Please enter valid Tray Name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (trayType === '' || trayType === null) {\n      toast({\n        title: 'Please Select Tray Type',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      return;\n    }\n\n    setActiveSelectDevice(true);\n    onOpen();\n    dispatch(\n      actions.createDeviceTrayName({testType : isMobileTesting ? 'app-automation' : 'lr-automation', trayName: trayName, trayType: trayType }),\n    );\n  };\n\n\n  useEffect(()=>{\n  \n    if(isMobileTesting){\n      setPlatformList(['android', 'ios'])\n    }else{\n      setPlatformList(['tv'])\n    }\n  }, [isMobileTesting]);\n  useEffect(() => {\n    if (getCreateTrayResponse.hasOwnProperty('statusCode')) {\n      if (getCreateTrayResponse.statusCode === 200) {\n        setTrayName('');\n        setTrayType('');\n      }\n    }\n  }, [getCreateTrayResponse]);\n\n  useEffect(() => {\n    if (getCreateTrayError === 1) {\n    }\n  }, [getCreateTrayError]);\n\n  return (\n    <Stack>\n      <Text color=\"black\" fontWeight=\"500\">\n        Create Tray\n      </Text>\n      <Text color=\"grey8\" fontWeight=\"400\">\n        Input Tray Name to create new Tray\n      </Text>\n      <InputComponent\n        title=\"Tray Name\"\n        width=\"90%\"\n        setInputValue={setTrayName}\n        inputValue={trayName}\n      ></InputComponent>\n      <SelectOption\n        placeholder=\"select Type\"\n        selectValue={trayType}\n        width=\"90%\"\n        setSelectValue={setTrayType}\n        optionList={platformList}\n      ></SelectOption>\n      {/* <DashedButton width=\"250px\" buttonHandler={addDeviceHandler}>\n      Add Devices to tray\n    </DashedButton> */}\n      <ButtonComp\n        color=\"white\"\n        width=\"90%\"\n        backgroundColor=\"blue1\"\n        fontWeight=\"500\"\n        buttonHandler={addDeviceHandler}\n      >\n        Create\n      </ButtonComp>\n    </Stack>\n  );\n}\n\nexport default CreateTrayComp;\n","//@ts-nocheck\nimport {\n  Container,\n  Flex,\n  HStack,\n  Stack,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport DashedButton from 'app/components/DashedButton';\nimport PopupComponent from 'app/components/PopupComponent';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport React, { useEffect, useState } from 'react';\nimport MyTrayList from './MyTrayList';\nimport TraylisrComponent from '../../../components/TraylistComp/index';\nimport SelectDeviceTrayPopup from './SelectDeviceTrayPopup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTestExecutionSelectedDevice } from 'app/pages/Xcui/slice/selector';\nimport { selectDeviceListingError } from 'app/pages/Xcui/slice/selector';\nimport { selectListingDevices } from 'app/pages/Xcui/slice/selector';\nimport { useMyDevicesSlice } from '../slice';\nimport CreateTrayComp from './CreateTrayComp';\nimport {\n  selectedDeviceForTray,\n  selectedDeviceTrayName,\n} from '../slice/selector';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction AddtoTrayComponent() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [activeSelectDevice, setActiveSelectDevice] = useState(false);\n  const { actions } = useMyDevicesSlice();\n\n  //const selectedDevices = useSelector(selectTestExecutionSelectedDevice);\n  const deviceListDataError = useSelector(selectDeviceListingError);\n  const getListingDevices = useSelector(selectListingDevices);\n  const selectedDeviceTray = useSelector(selectedDeviceForTray);\n  const deviceTrayName = useSelector(selectedDeviceTrayName);\n  const dispatch = useDispatch();\nconst isMobileTesting = usePlatformtypeHook();\n\n\n  useEffect(() => {\n    if (activeSelectDevice === false) {\n      dispatch(actions.resetSelectedDevice());\n    }\n  }, [activeSelectDevice]);\n\n  const selectedDeviceHandler = () => {\n    const selectedDeviceId = selectedDeviceTray.map(item => item.serial);\n\n    // onClose();\n    dispatch(\n      actions.loadCreateDeviceTray({\n        trayName: deviceTrayName.trayName,\n        platform: deviceTrayName.trayType,\n        devices: selectedDeviceId,\n       testType : isMobileTesting ? 'app-automation': 'lr-automation',\n      }),\n    );\n    setActiveSelectDevice(false);\n  };\n\n  return (\n    <Flex\n      padding=\"20px\"\n      bg=\"white\"\n      align=\"center\"\n      flexDirection=\"column\"\n      width=\"100%\"\n    >\n      <CreateTrayComp\n        setActiveSelectDevice={setActiveSelectDevice}\n        onOpen={onOpen}\n      ></CreateTrayComp>\n\n      <MyTrayList></MyTrayList>\n\n      {/* show all the register device */}\n      {/* <RegisterDeviceContainer>\n      <DeviceCard\n        hoverObject={hoverObject}\n        isDelete={isDelete}\n        connection=\"Connect to SSANED87675\"\n        width=\"95%\"\n      ></DeviceCard>\n    </RegisterDeviceContainer> */}\n      {/* <TraylisrComponent\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"Create Tray\"\n        buttonHandler1={onClose}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2=\"Assign\"\n      >\n       \n      </TraylisrComponent> */}\n\n      <SelectDeviceTrayPopup\n        actionButtonTitle=\"Create\"\n        deviceOs={deviceTrayName.trayType}\n        title={deviceTrayName.trayName}\n        selectedDeviceHandler={selectedDeviceHandler}\n        activeDevicePopup={activeSelectDevice}\n        setActiveDevicePopup={setActiveSelectDevice}\n        selectedDeviceList={selectedDeviceTray}\n        tableData={getListingDevices}\n        errorDeviceData={deviceListDataError}\n      ></SelectDeviceTrayPopup>\n    </Flex>\n  );\n}\n\nexport default AddtoTrayComponent;\n","// @ts-nocheck\nimport { Divider, Flex, HStack } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport DeviceDisplayLayout from './components/DeviceDisplayLayout';\nimport GridListViewLayout from './components/GridListViewLayout';\nimport ListViewDevice from './components/ListViewDevice';\nimport GridViewDevice from './components/GridViewDevice';\nimport AddDeviceComponent from './components/AddDeviceComponent';\nimport AddtoTrayComponent from './components/AddtoTrayComponent';\nimport { useMyDevicesSlice } from './slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCreateTrayLoading,\n  selectDeleteTrayLoading,\n  selectMyDevicesData,\n  selectUpdateTrayLoading,\n} from './slice/selector';\nimport {\n  selectDeviceListLoading,\n  selectListingDevices,\n} from 'app/pages/Xcui/slice/selector';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport StatusLabels from '../AssignDevices/components/StatusLabels';\nimport { useLocation } from 'react-router';\nimport usePlatformtypeHook from '../HomePage/usePlatformtypeHook';\n\nconst hoverObject = {\n  backgroundColor: 'grey5',\n};\n\nconst isDelete = id => {\n  const cardid = id;\n};\n\nexport function MyDevices() {\n  const { actions } = useMyDevicesSlice();\n  const { testExecutionActions } = useTestExecutionSlice();\n  const dispatch = useDispatch();\n  const myDeviceData = useSelector(selectMyDevicesData);\n  const getListingDevices = useSelector(selectListingDevices);\n  const loadingCreateTray = useSelector(selectCreateTrayLoading);\n  const loadingDeleteTray = useSelector(selectDeleteTrayLoading);\n  const loadingUpdateTray = useSelector(selectUpdateTrayLoading);\nconst loadingMydevice = useSelector(selectDeviceListLoading);\nconst isMobileTesting = usePlatformtypeHook();\n\n  useEffect(()=>{\n      dispatch(testExecutionActions.loadDeviceList({testType : isMobileTesting ? 'app-automation,mobile-interact' : 'lr-automation,lr-interact' , platform: ''}))\n}\n,[isMobileTesting])\n\n  const fileterData = getListingDevices.filter(\n    device =>\n      device.deviceParameters.hasOwnProperty('deviceStatus') &&\n      device.deviceParameters.deviceStatus !== 'unavailable',\n  );\n\n  return (\n    <Flex flexDirection=\"column\" position=\"relative\">\n      {(loadingCreateTray || loadingDeleteTray || loadingUpdateTray) && (\n        <LoadingComponent\n          isOverLay={true}\n          // background=\"#3F425429\"\n          position=\"absolute\"\n          height=\"110vh\"\n        ></LoadingComponent>\n      )}\n      <Flex\n        height=\"112vh\"\n        background=\"white\"\n        borderRadius=\"3\"\n        border=\"1px solid #EDEDED\"\n      >\n        <Flex\n          flex={1.98}\n          borderRight=\"2px solid #EDEDED\"\n          flexDirection=\"column\"\n        >\n          <DeviceDisplayLayout\n            child1={\n              <GridViewDevice\n                isLabels={true}\n                hoverObject={hoverObject}\n                tableData={getListingDevices}\n                isDelete={isDelete}\n              ></GridViewDevice>\n            }\n            child2={\n              <ListViewDevice\n                height=\"100vh\"\n                isLoading={loadingMydevice}\n                // isDelete={isDelete}\n                isLabels={fileterData.length === 0 ? false : true}\n                tableData={getListingDevices}\n              ></ListViewDevice>\n            }\n          ></DeviceDisplayLayout>\n        </Flex>\n\n        <Flex color=\"grey13\" fontWeight=\"500\" fontFamily=\"Montserrat\" flex={1}>\n          {/* <AddDeviceComponent></AddDeviceComponent> */}\n          <AddtoTrayComponent></AddtoTrayComponent>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default MyDevices;\n"],"sourceRoot":""}