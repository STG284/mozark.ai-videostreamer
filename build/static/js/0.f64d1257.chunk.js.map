{"version":3,"sources":["app/pages/Xcui/slice/selector.ts","app/pages/Xcui/slice/types.ts","app/pages/Xcui/utils/index.ts","app/pages/Xcui/slice/saga.ts","app/pages/Xcui/slice/index.ts","app/pages/MyDevices/slice/types.ts","app/pages/MyDevices/slice/saga.ts","app/pages/MyDevices/slice/index.ts","app/pages/HomePage/usePlatformtypeHook.tsx"],"names":["selectSlice","state","XcuiTestExecution","initialState","selectProjectList","createSelector","TestExecutionSelectDevice","selectLoadingProjectList","loadingProjectList","selectProjectError","loadProjectListError","selectRemoveDeviceId","removeId","selectUploadApplicationUrl","applicationUploaded","selectUploadApplicationUrlAndroid","applicationUploadedAndroid","selectCreatedProject","creatProjectResponse","selectCreateProjectError","createProjectError","selectAppBuildListState","selectAppBuildList","selectAppBuildAndroidListState","selectAppBuildAndroidList","selectScriptState","selectScriptList","selectScriptAndroidState","selectScriptAndroidList","selectuploadApplicationUrlError","applicationUploadError","selectuploadApplicationUrlAndroidError","applicationUploadAndroidError","selectTestExecutionSelectedDevice","selectDeviceListLoading","loadingDeviceList","selectBusyDeviceLoading","loadingBusySlots","selectListingDevices","DeviceListData","selectDeviceListingError","DeviceListingError","selectScheduleTestResponse","XcuiData","selectScheduleTestResponseError","error","selectCreateProjectLoading","loadCreateProjectRequest","selectUploadingApplicationLoading","loadingUploadApplication","selectUploadingApplicationAndroidLoading","loadingUploadApplicationAndroid","selectScheduleExecuteTestLoading","loading","selectApplicationFileUploadLoading","loadingAppBuildFile","selectApplicationFileUploadResponse","appBuildFileUploaded","selectApplicationFileUploadError","appBuildFileError","selectEventConfigFileUploadLoading","loadingEventConfigFile","selectEventConfigFileUploadResponse","eventConfigFileUploaded","selectEventConfigFileUploadError","eventConfigFileError","selectUploadFileProgressValue","progressValue","selectBusyDeviceSlots","BusyDeviceSlotsData","selectgetOptionalKeyValue","addedOptionalKeyValue","selectAppBuildIosLoading","loadingAppBuildList","selectAppBuildAndroidLoading","loadingAppBuildAndroidList","selectScriptAndroidLoading","loadingScriptAndroidList","selectScriptIosLoading","loadingScriptList","selectScriptIosError","selectScriptListError","selectScriptAndroidError","selectScriptListAndroidError","selectAppbuildAndroidError","selectAppBuildListAndroidError","selectAppbuildIosError","selectAppBuildListError","selectTestExcutionState","TestExecutionErrorType","getProjectString","project","concat","BASE_URL","REACT_APP_AUTOMATION_TESTING_BASE_URL","BASE_URL_FILES","REACT_APP_AUTOMATION_TESTING_FILES_BASE_URL","BASE_URL_SCHEDULE","REACT_APP_AUTOMATION_TESTING_SCHEDULE_BASE_URL","username","GetLastAuthUser","last_auth","UserPool","getClientId","reg","RegExp","document","cookie","match","getTestExecutionProjectList","param","idToken","GetIdToken","config","method","headers","Authorization","queryString","payload","requestURL","selectProjectData","call","request","hasOwnProperty","put","actions","selectTestExecutionProjectListLoaded","data","list","selectTestExecutionProjectListError","RESPONSE_ERROR","err","createProjectSagaWatcher","projectInfo","name","description","testType","user","body","JSON","stringify","redirect","createProjectResponse","testExecutionProjectCreated","createTestExecutionProjectError","uploadFileSagaWatcher","fileInfo","payloadbody","fileName","filename","fileCategory","md5sum","md5","userName","projectName","fileuploadResponse","uploadApplicationResponse","type","applicationType","response","uploadApplicationError","uploadFileSagaWatcherAndroid","configdata","uploadApplicationAndroidResponse","uploadApplicationAndroidError","uploadAppBuildFileSagaWatcher","fileData","file","url","fileResponse","fetch","status","appBuildApplicationFileUploaded","appBuildFileUploadError","uploadEventConfigFileSagaWatcher","eventConfigFileUploadError","selectAppBuildSagaWatcher","paramstring","fileStringTestType","_paramstring$payload","selectAppBuildListLoaded","selectAppBuildAndroidSagaWatcher","_paramstring$payload2","selectAppBuildListAndroidLoaded","selectAppBuildAndroidError","selectScriptSagaWatcher","_paramstring$payload3","selectScriptListLoaded","selectVisualScriptSagaWatcher","_paramstring$payload4","selectVisualScriptListLoaded","selectVisualScriptListError","selectScriptAndroidSagaWatcher","_paramstring$payload5","selectScriptListAndroidLoaded","selectDeviceListingSagaWatcher","devicePlaform","platform","testTypeString","getDeviceList","DeviceListLoaded","deviceListLoadError","getTestExecutionDetail","testdetail","delay","getExecuteResponse","testExecutionDataLoaded","testExecutionDataError","getBusyDeviceSlotsSagaWatcher","deviceIds","join","deviceBusySlots","BusyDeviceSlotsListLoaded","BusyDeviceSlotsListError","xcuiTestExecutionSaga","takeLatest","loadTestExecutionData","createTestExecutionProject","loadUploadApplication","loadUploadApplicationAndroid","loadSelectTestExecutionProjectList","loadDeviceList","loadSelectAppBuildList","loadSelectAppBuildAndroidList","loadSelectScriptAndroidList","loadSelectScriptList","loadSelectVisualScriptList","loadUploadAppBuildFile","loadUploadEventConfigFile","loadindBusyDeviceSlots","selectVisualScriptList","loadingVisualScriptList","BusyDeviceSlotsError","slice","createSlice","reducers","action","removeSelectedDevices","removeSelectedDeviceHandler","arr","id","filter","item","resetTestDevices","addTestDevices","addUniqueDevices","index","i","length","count","splice","push","addSelectedDevices","deviceParameters","deviceStatus","uploadFileProgress","addOptionalKeyValue","xcuiTestExecutionActions","useTestExecutionSlice","useInjectReducer","key","reducer","useInjectSaga","saga","testExecutionActions","MyDevicesErrorType","AWS_BASE_URL","REACT_APP_APP_TESTING_BASE_URL","getTrayListSagaWacher","paramString","requestUrl","statusCode","deviceTrayListLoaded","trays","deviceListTrayError","e","console","log","fetchTrayDataSagaWacher","trayId","trayDataLoaded","trayDataLoadedError","createTrayListSagaWacher","trayData","createdDeviceTray","createDeviceTrayError","deleteTrayDataSagaWacher","deleteTrayResponseData","deleteTrayResponseError","updateTrayDataSagaWacher","updateTrayResponseData","updateTrayResponseError","myDevicesSaga","loadDeviceTrayList","loadCreateDeviceTray","loadTrayData","loadingDeleteTray","loadingUpdateTray","myDevicesLoading","myDevicesError","myDevicesData","loadingTrayList","deviceTrayList","devicesTrayName","createTrayLoading","createTrayResponseLoaded","createTrayResponseError","deleteTrayLoading","deleteTrayResponseLoaded","updateTrayLoading","updateTrayResponseLoaded","loadingTrayData","TrayDeviceData","TrayDataLoadError","traySelectDevice","loadMyDevicesData","myDevicesDataLoaded","myDevicesDataError","createDeviceTrayName","addTrayDevices","serial","removeDeviceFromTary","getRemovedTrayDevices","trayselectedList","deviceId","uuid","resetSelectedDevice","myDevicesActions","useMyDevicesSlice","usePlatformtypeHook","location","useLocation","pathname","isMobileTesting","setMobileTesting","useState","hasStartingString","startsWith","useEffect"],"mappings":"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","file":"static/js/0.f64d1257.chunk.js","sourcesContent":["import { initialState } from '.';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'types';\n\nconst selectSlice = (state: RootState) =>\n  state.XcuiTestExecution || initialState;\n\nexport const selectTestExecutionDevices = createSelector(\n  [selectSlice],\n  state => state.TestExecutionSelectDevice,\n);\nexport const selectProjectList = createSelector(\n  [selectSlice],\n  state => state.selectProjectList,\n);\nexport const selectLoadingProjectList = createSelector(\n  [selectSlice],\n  state => state.loadingProjectList,\n);\n\nexport const selectProjectError = createSelector(\n  [selectSlice],\n  state => state.loadProjectListError,\n);\n\nexport const selectRemoveDeviceId = createSelector(\n  [selectSlice],\n  state => state.removeId,\n);\n\nexport const selectUploadApplicationUrl = createSelector(\n  [selectSlice],\n  state => state.applicationUploaded,\n);\nexport const selectUploadApplicationUrlAndroid = createSelector(\n  [selectSlice],\n  state => state.applicationUploadedAndroid,\n);\n\nexport const selectCreatedProject = createSelector(\n  [selectSlice],\n  state => state.creatProjectResponse,\n);\nexport const selectCreateProjectError = createSelector(\n  [selectSlice],\n  state => state.createProjectError,\n);\n\nexport const selectAppBuildListState = createSelector(\n  [selectSlice],\n  state => state.selectAppBuildList,\n);\n\nexport const selectAppBuildAndroidListState = createSelector(\n  [selectSlice],\n  state => state.selectAppBuildAndroidList,\n);\nexport const selectScriptState = createSelector(\n  [selectSlice],\n  state => state.selectScriptList,\n);\nexport const selectScriptAndroidState = createSelector(\n  [selectSlice],\n  state => state.selectScriptAndroidList,\n);\n\nexport const selectuploadApplicationUrlError = createSelector(\n  [selectSlice],\n  state => state.applicationUploadError,\n);\nexport const selectuploadApplicationUrlAndroidError = createSelector(\n  [selectSlice],\n  state => state.applicationUploadAndroidError,\n);\nexport const selectTestExecutionSelectedDevice = createSelector(\n  [selectSlice],\n  state => state.TestExecutionSelectDevice,\n);\nexport const selectDeviceListLoading = createSelector(\n  [selectSlice],\n  state => state.loadingDeviceList,\n);\nexport const selectBusyDeviceLoading = createSelector(\n  [selectSlice],\n  state => state.loadingBusySlots,\n);\nexport const selectListingDevices = createSelector(\n  [selectSlice],\n  state => state.DeviceListData,\n);\n\nexport const selectDeviceListingError = createSelector(\n  [selectSlice],\n  state => state.DeviceListingError,\n);\n\nexport const selectScheduleTestResponse = createSelector(\n  [selectSlice],\n  state => state.XcuiData,\n);\nexport const selectScheduleTestResponseError = createSelector(\n  [selectSlice],\n  state => state.error,\n);\nexport const selectCreateProjectLoading = createSelector(\n  [selectSlice],\n  state => state.loadCreateProjectRequest,\n);\nexport const selectUploadingApplicationLoading = createSelector(\n  [selectSlice],\n  state => state.loadingUploadApplication,\n);\nexport const selectUploadingApplicationAndroidLoading = createSelector(\n  [selectSlice],\n  state => state.loadingUploadApplicationAndroid,\n);\n\nexport const selectScheduleExecuteTestLoading = createSelector(\n  [selectSlice],\n  state => state.loading,\n);\n\nexport const selectApplicationFileUploadLoading = createSelector(\n  [selectSlice],\n  state => state.loadingAppBuildFile,\n);\n\nexport const selectApplicationFileUploadResponse = createSelector(\n  [selectSlice],\n  state => state.appBuildFileUploaded,\n);\n\nexport const selectApplicationFileUploadError = createSelector(\n  [selectSlice],\n  state => state.appBuildFileError,\n);\nexport const selectEventConfigFileUploadLoading = createSelector(\n  [selectSlice],\n  state => state.loadingEventConfigFile,\n);\n\nexport const selectEventConfigFileUploadResponse = createSelector(\n  [selectSlice],\n  state => state.eventConfigFileUploaded,\n);\n\nexport const selectEventConfigFileUploadError = createSelector(\n  [selectSlice],\n  state => state.eventConfigFileError,\n);\n\nexport const selectUploadFileProgressValue = createSelector(\n  [selectSlice],\n  state => state.progressValue,\n);\n\nexport const selectBusyDeviceSlots = createSelector(\n  [selectSlice],\n  state => state.BusyDeviceSlotsData,\n);\nexport const selectgetOptionalKeyValue = createSelector(\n  [selectSlice],\n  state => state.addedOptionalKeyValue,\n);\nexport const selectAppBuildIosLoading = createSelector(\n  [selectSlice],\n  state => state.loadingAppBuildList,\n);\nexport const selectAppBuildAndroidLoading = createSelector(\n  [selectSlice],\n  state => state.loadingAppBuildAndroidList,\n);\nexport const selectScriptAndroidLoading = createSelector(\n  [selectSlice],\n  state => state.loadingScriptAndroidList,\n);\nexport const selectScriptIosLoading = createSelector(\n  [selectSlice],\n  state => state.loadingScriptList,\n);\nexport const selectScriptIosError = createSelector(\n  [selectSlice],\n  state => state.selectScriptListError,\n);\nexport const selectScriptAndroidError = createSelector(\n  [selectSlice],\n  state => state.selectScriptListAndroidError,\n);\nexport const selectAppbuildAndroidError = createSelector(\n  [selectSlice],\n  state => state.selectAppBuildListAndroidError,\n);\nexport const selectAppbuildIosError = createSelector(\n  [selectSlice],\n  state => state.selectAppBuildListError,\n);\n\nexport const selectTestExcutionState = createSelector(\n  [selectSlice],\n  state => state,\n);\n","import { XcuiData } from 'types/XcuiTestExecution';\n\nexport interface XcuiTestExecutionState {\n  XcuiData: XcuiData;\n  loading: boolean;\n  error?: TestExecutionErrorType | null;\n  TestExecutionSelectDevice: testExecutionDevice[];\n  selectProjectList: SelectProjectList[];\n  loadingProjectList: boolean;\n  loadProjectListError: TestExecutionErrorType | null;\n  selectAppBuildList: SelectProjectList[];\n  loadingAppBuildList: boolean;\n  selectAppBuildListError: TestExecutionErrorType | null;\n  selectScriptList: SelectProjectList[];\n  loadingScriptList: boolean;\n  selectScriptListError: TestExecutionErrorType | null;\n  selectVisualScriptList: SelectProjectList[];\n  loadingVisualScriptList: boolean;\n  selectVisualScriptListError: TestExecutionErrorType | null;\n  loadCreateProjectRequest: boolean;\n  creatProjectResponse: CreateProjectResponse;\n  createProjectError: TestExecutionErrorType | null;\n  removeId: number | string;\n\n  loadingUploadApplication: boolean;\n  applicationUploaded: CreateProjectResponse;\n  applicationUploadError: null | TestExecutionErrorType;\n  loadingUploadApplicationAndroid: boolean;\n  applicationUploadedAndroid: CreateProjectResponse;\n  applicationUploadAndroidError: null | TestExecutionErrorType;\n\n  loadingAppBuildFile: boolean;\n  appBuildFileUploaded: CreateProjectResponse;\n  appBuildFileError: null | TestExecutionErrorType;\n  loadingEventConfigFile: boolean;\n  eventConfigFileUploaded: CreateProjectResponse;\n  eventConfigFileError: null | TestExecutionErrorType;\n\n  selectAppBuildAndroidList: SelectProjectList[];\n  loadingAppBuildAndroidList: boolean;\n  selectAppBuildListAndroidError: null | TestExecutionErrorType;\n  selectScriptAndroidList: SelectProjectList[];\n  loadingScriptAndroidList: boolean;\n  selectScriptListAndroidError: null | TestExecutionErrorType;\n  loadingDeviceList: boolean;\n  DeviceListData: SelectProjectList[];\n  DeviceListingError: null | TestExecutionErrorType;\n  progressValue: number | string;\n  loadingBusySlots: boolean;\n  BusyDeviceSlotsData: testExecutionDevice[];\n  BusyDeviceSlotsError: null | TestExecutionErrorType;\n  addedOptionalKeyValue: testExecutionDevice[];\n}\nexport interface SelectProjectList {}\ninterface testExecutionDevice {}\ninterface CreateProjectResponse {}\nexport enum TestExecutionErrorType {\n  RESPONSE_ERROR = 1,\n  TEST_NOT_FOUND = 2,\n}\n","const getProjectString = (project: Project) => {\n  const projectString = project ? `&projectName=${project}` : '';\n  return projectString;\n};\n\nexport { getProjectString };\n","// @ts-nocheck\nimport GetIdToken from 'Authentication/configuration/GetIdToken';\nimport UserPool from 'Authentication/configuration/UserPool';\nimport { takeLatest, call, put, delay } from 'redux-saga/effects';\n\nimport { request } from 'utils/request';\nimport { xcuiTestExecutionActions as actions } from './index';\n\nimport { SelectProjectList, TestExecutionErrorType } from './types';\nimport {\n  REACT_APP_AUTOMATION_TESTING_BASE_URL,\n  REACT_APP_AUTOMATION_TESTING_FILES_BASE_URL,\n  REACT_APP_AUTOMATION_TESTING_SCHEDULE_BASE_URL,\n} from 'utils/enviroment';\n\nimport { getProjectString } from '../utils';\n\nconst BASE_URL = REACT_APP_AUTOMATION_TESTING_BASE_URL;\nconst BASE_URL_FILES = REACT_APP_AUTOMATION_TESTING_FILES_BASE_URL;\nconst BASE_URL_SCHEDULE = REACT_APP_AUTOMATION_TESTING_SCHEDULE_BASE_URL;\n\nconst GetLastAuthUser = () => {\n  const last_auth = `CognitoIdentityServiceProvider.${UserPool.getClientId()}.LastAuthUser`;\n  const reg = new RegExp(`(?<=${last_auth}=)[^;]*`);\n  try {\n    return document.cookie.match(reg)[0];\n  } catch {\n    return null;\n  }\n};\nconst username = GetLastAuthUser();\n\nfunction* getTestExecutionProjectList(param) {\n  const idToken = GetIdToken();\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  const queryString = param.payload ? `?testType=${param.payload}` : '';\n  try {\n    const requestURL = `${BASE_URL}/projects${queryString}`;\n    const selectProjectData: SelectProjectList[] = yield call(\n      request,\n      requestURL,\n      config,\n    );\n\n    if (selectProjectData.hasOwnProperty('data')) {\n      yield put(\n        actions.selectTestExecutionProjectListLoaded(\n          selectProjectData.data.list,\n        ),\n      );\n    } else {\n      yield put(\n        actions.selectTestExecutionProjectListError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectTestExecutionProjectListError(\n        TestExecutionErrorType.RESPONSE_ERROR,\n      ),\n    );\n  }\n}\n\nfunction* createProjectSagaWatcher(param) {\n  const idToken = GetIdToken();\n  const projectInfo = {\n    name: param.payload.name,\n    description: param.payload.name,\n    testType: param.payload.testType,\n    user: username,\n  };\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n\n    body: JSON.stringify(projectInfo),\n    redirect: 'follow',\n  };\n\n  try {\n    const requestURL = `${BASE_URL}/projects`;\n    const createProjectResponse = yield call(request, requestURL, config);\n\n    if (createProjectResponse.hasOwnProperty('message')) {\n      yield put(actions.testExecutionProjectCreated(createProjectResponse));\n    } else {\n      yield put(\n        actions.createTestExecutionProjectError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.createTestExecutionProjectError(\n        TestExecutionErrorType.RESPONSE_ERROR,\n      ),\n    );\n  }\n}\n\nfunction* uploadFileSagaWatcher(fileInfo) {\n  const idToken = GetIdToken();\n  const payloadbody = JSON.stringify({\n    fileName: fileInfo.payload.filename,\n    fileCategory: fileInfo.payload.fileCategory,\n    md5sum: fileInfo.payload.md5,\n    userName: username,\n    projectName: fileInfo.payload.project,\n    testType: fileInfo.payload.testType,\n  });\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n    body: payloadbody,\n  };\n\n  try {\n    const requestURL = `${BASE_URL_FILES}/files`;\n    const fileuploadResponse = yield call(request, requestURL, config);\n    if (fileuploadResponse.hasOwnProperty('message')) {\n      yield put(\n        actions.uploadApplicationResponse({\n          type: fileInfo.payload.applicationType,\n          response: fileuploadResponse,\n        }),\n      );\n    } else {\n      yield put(\n        actions.uploadApplicationError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.uploadApplicationError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* uploadFileSagaWatcherAndroid(fileInfo) {\n  const idToken = GetIdToken();\n  const config = fileInfo.payload.hasOwnProperty('config')\n    ? fileInfo.payload.config\n    : {};\n  const payloadbody = JSON.stringify({\n    fileName: fileInfo.payload.filename,\n    fileCategory: fileInfo.payload.fileCategory,\n    md5sum: fileInfo.payload.md5,\n    userName: username,\n    projectName: fileInfo.payload.project,\n    testType: fileInfo.payload.testType,\n    config,\n  });\n\n  const configdata = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n    body: payloadbody,\n  };\n\n  try {\n    const requestURL = `${BASE_URL_FILES}/files`;\n\n    const fileuploadResponse = yield call(request, requestURL, configdata);\n    //console.log(fileuploadResponse);\n    if (fileuploadResponse.hasOwnProperty('message')) {\n      yield put(\n        actions.uploadApplicationAndroidResponse({\n          type: fileInfo.payload.applicationType,\n          response: fileuploadResponse,\n        }),\n      );\n    } else {\n      yield put(\n        actions.uploadApplicationAndroidError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.uploadApplicationAndroidError(\n        TestExecutionErrorType.RESPONSE_ERROR,\n      ),\n    );\n  }\n}\n\nfunction* uploadAppBuildFileSagaWatcher(fileData) {\n  const config = {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/x-msdos-program',\n    },\n    body: fileData.payload.file,\n  };\n\n  // const formdata = new FormData();\n  // formdata.append('file', fileData.payload.file);\n  // getMd5SumFilesTest(fileData.payload.file)\n\n  try {\n    const requestURL = fileData.payload.url;\n    const fileResponse = yield call(fetch, requestURL, config);\n    // const fileResponse = yield call(\n    //   axios.put,\n    //   requestURL,\n    // config\n    //   // {\n    //   //   headers: {\n    //   //     'Content-type': 'application/form-data',\n    //   //   },\n    //   //   onUploadProgress: data => {\n    //   //     fileData.payload.dispatch(\n    //   //       actions.uploadFileProgress(\n    //   //         Math.round((100 * data.loaded) / data.total),\n    //   //       ),\n    //   //     );\n    //   //   },\n    //   // },\n    // );\n\n    //console.log(fileResponse);\n    if (fileResponse.status === 200) {\n      yield put(\n        actions.appBuildApplicationFileUploaded({\n          type: fileData.payload.type,\n          status: fileResponse.status,\n        }),\n      );\n    } else {\n      yield put(\n        actions.appBuildFileUploadError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.appBuildFileUploadError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\nfunction* uploadEventConfigFileSagaWatcher(fileData) {\n  const config = {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/x-msdos-program',\n    },\n    body: fileData.payload.file,\n  };\n\n  try {\n    const requestURL = fileData.payload.url;\n    const fileResponse = yield call(fetch, requestURL, config);\n\n    if (fileResponse.status === 200) {\n      yield put(\n        actions.eventConfigFileUploaded({\n          type: fileData.payload.type,\n          status: fileResponse.status,\n        }),\n      );\n    } else {\n      yield put(\n        actions.eventConfigFileUploadError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.eventConfigFileUploadError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* selectAppBuildSagaWatcher(paramstring) {\n  const idToken = GetIdToken();\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n\n  const fileStatusString = paramstring.payload.hasOwnProperty('fileStatus')\n    ? ''\n    : 'fileStatus=processed&';\n  const fileStringTestType = paramstring.payload.hasOwnProperty('testType')\n    ? `&testType=${paramstring.payload.testType}`\n    : '';\n  try {\n    const requestURL = `${BASE_URL_FILES}/files?fileCategory=${\n      paramstring.payload.fileCategory\n    }${getProjectString(\n      paramstring?.payload?.projectName,\n    )}${fileStringTestType}`;\n    const selectAppBuildList = yield call(request, requestURL, config);\n    if (selectAppBuildList.hasOwnProperty('data')) {\n      yield put(actions.selectAppBuildListLoaded(selectAppBuildList.data));\n    } else {\n      yield put(\n        actions.selectAppBuildListError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectAppBuildListError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\nfunction* selectAppBuildAndroidSagaWatcher(paramstring) {\n  const idToken = GetIdToken();\n  const fileStringTestType = paramstring.payload.hasOwnProperty('testType')\n    ? `&testType=${paramstring.payload.testType}`\n    : '';\n  const requestURL = `${BASE_URL_FILES}/files?fileCategory=${\n    paramstring.payload.fileCategory\n  }${getProjectString(paramstring?.payload?.projectName)}${fileStringTestType}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const selectAppBuildList = yield call(request, requestURL, config);\n    if (selectAppBuildList.hasOwnProperty('data')) {\n      yield put(\n        actions.selectAppBuildListAndroidLoaded(selectAppBuildList.data),\n      );\n    } else {\n      yield put(\n        actions.selectAppBuildAndroidError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectAppBuildAndroidError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* selectScriptSagaWatcher(paramstring) {\n  const idToken = GetIdToken();\n  const fileStringTestType = paramstring.payload.hasOwnProperty('testType')\n    ? `&testType=${paramstring.payload.testType}`\n    : '';\n  const requestURL = `${BASE_URL_FILES}/files?fileCategory=${\n    paramstring.payload.fileCategory\n  }${getProjectString(paramstring?.payload?.projectName)}${fileStringTestType}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const selectScriptList = yield call(request, requestURL, config);\n    if (selectScriptList.hasOwnProperty('data')) {\n      yield put(actions.selectScriptListLoaded(selectScriptList.data));\n    } else {\n      yield put(\n        actions.selectScriptListError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectScriptListError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\nfunction* selectVisualScriptSagaWatcher(paramstring) {\n  const idToken = GetIdToken();\n  const fileStatus =\n    paramstring.payload.hasOwnProperty('fileCategory') &&\n    paramstring.payload.fileCategory === 'visual-journey-script'\n      ? 'unprocessed'\n      : 'processed';\n  const fileStringTestType = paramstring.payload.hasOwnProperty('testType')\n    ? `&testType=${paramstring.payload.testType}`\n    : '';\n  const requestURL = `${BASE_URL_FILES}/files?fileCategory=${\n    paramstring.payload.fileCategory\n  }${getProjectString(paramstring?.payload?.projectName)}${fileStringTestType}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const selectScriptList = yield call(request, requestURL, config);\n    if (selectScriptList.hasOwnProperty('data')) {\n      yield put(actions.selectVisualScriptListLoaded(selectScriptList.data));\n    } else {\n      yield put(\n        actions.selectVisualScriptListError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectVisualScriptListError(\n        TestExecutionErrorType.RESPONSE_ERROR,\n      ),\n    );\n  }\n}\nfunction* selectScriptAndroidSagaWatcher(paramstring) {\n  const idToken = GetIdToken();\n  const fileStringTestType = paramstring.payload.hasOwnProperty('testType')\n    ? `&testType=${paramstring.payload.testType}`\n    : '';\n  const requestURL = `${BASE_URL_FILES}/files?fileCategory=${\n    paramstring.payload.fileCategory\n  }${getProjectString(paramstring?.payload?.projectName)}${fileStringTestType}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const selectScriptList = yield call(request, requestURL, config);\n    if (selectScriptList.hasOwnProperty('data')) {\n      yield put(actions.selectScriptListAndroidLoaded(selectScriptList.data));\n    } else {\n      yield put(\n        actions.selectScriptListAndroidError(\n          TestExecutionErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.selectScriptListAndroidError(\n        TestExecutionErrorType.RESPONSE_ERROR,\n      ),\n    );\n  }\n}\n\nfunction* selectDeviceListingSagaWatcher(param) {\n  // console.log(param.payload);\n  const idToken = GetIdToken();\n  const devicePlaform = param.payload.platform\n    ? `?platform=${param.payload.platform}`\n    : '';\n  const testTypeString = param.payload.testType\n    ? `?testType=${param.payload.testType}`\n    : '';\n  const testType =\n    devicePlaform && testTypeString\n      ? `&testType=${param.payload.testType}`\n      : testTypeString;\n  const requestURL = `${BASE_URL_SCHEDULE}/devices${devicePlaform}${testType}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const getDeviceList = yield call(request, requestURL, config);\n    if (getDeviceList.hasOwnProperty('data')) {\n      yield put(actions.DeviceListLoaded(getDeviceList.data.list));\n    } else {\n      yield put(\n        actions.deviceListLoadError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.deviceListLoadError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* getTestExecutionDetail(testdetail) {\n  // console.log(testdetail.payload);\n  const idToken = GetIdToken();\n  yield delay(1000);\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n    body: JSON.stringify(testdetail.payload),\n  };\n  try {\n    const requestURL = `${BASE_URL_SCHEDULE}/schedules`;\n    const getExecuteResponse = yield call(request, requestURL, config);\n    //console.log(getExecuteResponse);\n    if (getExecuteResponse.hasOwnProperty('message')) {\n      yield put(actions.testExecutionDataLoaded(getExecuteResponse));\n    } else {\n      yield put(\n        actions.testExecutionDataError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.testExecutionDataError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* getBusyDeviceSlotsSagaWatcher(deviceIds) {\n  const idToken = GetIdToken();\n  // delay(500);\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  const param = deviceIds.payload.join(',');\n  const requestURL = `${BASE_URL}/busyslots?devices=${param}`;\n  //const requestURL = `https://development-api.mozark.ai/testexecute/busyslots?devices=${param}`;\n\n  try {\n    const deviceBusySlots = yield call(request, requestURL, config);\n    //console.log(deviceBusySlots);\n    if (deviceBusySlots.hasOwnProperty('data')) {\n      yield put(actions.BusyDeviceSlotsListLoaded(deviceBusySlots.data.list));\n    } else {\n      yield put(\n        actions.BusyDeviceSlotsListError(TestExecutionErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.BusyDeviceSlotsListError(TestExecutionErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nexport function* xcuiTestExecutionSaga() {\n  yield takeLatest(actions.loadTestExecutionData.type, getTestExecutionDetail);\n\n  yield takeLatest(\n    actions.createTestExecutionProject.type,\n    createProjectSagaWatcher,\n  );\n  yield takeLatest(actions.loadUploadApplication.type, uploadFileSagaWatcher);\n  yield takeLatest(\n    actions.loadUploadApplicationAndroid.type,\n    uploadFileSagaWatcherAndroid,\n  );\n\n  yield takeLatest(\n    actions.loadSelectTestExecutionProjectList.type,\n    getTestExecutionProjectList,\n  );\n  yield takeLatest(actions.loadDeviceList.type, selectDeviceListingSagaWatcher);\n  yield takeLatest(\n    actions.loadSelectAppBuildList.type,\n    selectAppBuildSagaWatcher,\n  );\n  yield takeLatest(\n    actions.loadSelectAppBuildAndroidList.type,\n    selectAppBuildAndroidSagaWatcher,\n  );\n  yield takeLatest(\n    actions.loadSelectScriptAndroidList.type,\n    selectScriptAndroidSagaWatcher,\n  );\n  yield takeLatest(actions.loadSelectScriptList.type, selectScriptSagaWatcher);\n  yield takeLatest(\n    actions.loadSelectVisualScriptList.type,\n    selectVisualScriptSagaWatcher,\n  );\n  yield takeLatest(\n    actions.loadUploadAppBuildFile.type,\n    uploadAppBuildFileSagaWatcher,\n  );\n  yield takeLatest(\n    actions.loadUploadEventConfigFile.type,\n    uploadEventConfigFileSagaWatcher,\n  );\n  yield takeLatest(\n    actions.loadindBusyDeviceSlots.type,\n    getBusyDeviceSlotsSagaWatcher,\n  );\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { xcuiTestExecutionSaga } from './saga';\nimport { XcuiTestExecutionState } from './types';\n\nexport const initialState: XcuiTestExecutionState = {\n  loading: false,\n  error: null,\n  XcuiData: {},\n  selectProjectList: [],\n  loadingProjectList: false,\n  loadProjectListError: null,\n\n  selectAppBuildList: [],\n  loadingAppBuildList: false,\n  selectAppBuildListError: null,\n  selectScriptList: [],\n  loadingScriptList: false,\n  selectScriptListError: null,\n  selectVisualScriptList: [],\n  loadingVisualScriptList: false,\n  selectVisualScriptListError: null,\n  selectAppBuildAndroidList: [],\n  loadingAppBuildAndroidList: false,\n  selectAppBuildListAndroidError: null,\n  selectScriptAndroidList: [],\n  loadingScriptAndroidList: false,\n  selectScriptListAndroidError: null,\n  loadingDeviceList: false,\n  DeviceListData: [],\n  DeviceListingError: null,\n\n  TestExecutionSelectDevice: [],\n  loadCreateProjectRequest: false,\n  creatProjectResponse: {},\n  createProjectError: null,\n  removeId: '',\n\n  loadingUploadApplication: false,\n  applicationUploaded: {},\n  applicationUploadError: null,\n\n  loadingUploadApplicationAndroid: false,\n  applicationUploadedAndroid: {},\n  applicationUploadAndroidError: null,\n\n  loadingAppBuildFile: false,\n  appBuildFileUploaded: {},\n  appBuildFileError: null,\n  loadingEventConfigFile: false,\n  eventConfigFileUploaded: {},\n  eventConfigFileError: null,\n  progressValue: 0,\n  loadingBusySlots: false,\n  BusyDeviceSlotsData: [],\n  BusyDeviceSlotsError: null,\n  addedOptionalKeyValue: [],\n};\n\nexport const addUniqueDevices = (arr, data) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].id === data.id) {\n      index = i;\n    }\n  }\n  if (index > -1) {\n    if (data.count > 0) {\n      arr[index] = data;\n    } else {\n      arr.splice(index, 1);\n    }\n  } else if (index === -1 && data.count !== 0) {\n    arr.push(data);\n  }\n\n  return arr;\n};\nconst removeSelectedDeviceHandler = (arr, id) => {\n  const data = arr.filter(item => item.id !== id);\n  return data;\n};\nexport const slice = createSlice({\n  name: 'XcuiTestExecution',\n  initialState,\n  reducers: {\n    loadTestExecutionData: state => {\n      state.loading = true;\n    },\n    testExecutionDataLoaded: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.error = null;\n      state.XcuiData = action.payload;\n    },\n    testExecutionDataError: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    loadSelectTestExecutionProjectList: state => {\n      state.loadingProjectList = true;\n    },\n    selectTestExecutionProjectListLoaded: (\n      state,\n      action: PayloadAction<any>,\n    ) => {\n      state.selectProjectList = action.payload;\n      state.loadingProjectList = false;\n      state.loadProjectListError = null;\n    },\n    selectTestExecutionProjectListError: (\n      state,\n      action: PayloadAction<any>,\n    ) => {\n      state.loadingProjectList = false;\n      state.loadProjectListError = action.payload;\n    },\n    loadSelectAppBuildList: (state , action: PayloadAction<any>) => {\n      state.loadingAppBuildList = true;\n    },\n    selectAppBuildListLoaded: (state, action: PayloadAction<any>) => {\n      state.selectAppBuildList = action.payload.list;\n      state.selectAppBuildListError = null;\n      state.loadingAppBuildList = false;\n    },\n    selectAppBuildListError: (state, action: PayloadAction<any>) => {\n      state.loadingAppBuildList = false;\n      state.selectAppBuildListError = action.payload;\n    },\n    loadSelectScriptList: state => {\n      state.loadingScriptList = true;\n    },\n    selectScriptListLoaded: (state, action: PayloadAction<any>) => {\n      state.selectScriptList = action.payload.list;\n      state.selectScriptListError = null;\n      state.loadingScriptList = false;\n    },\n    selectScriptListError: (state, action: PayloadAction<any>) => {\n      state.loadingScriptList = false;\n      state.selectScriptListError = action.payload;\n    },\n    loadSelectVisualScriptList: state => {\n      state.loadingVisualScriptList = true;\n    },\n    selectVisualScriptListLoaded: (state, action: PayloadAction<any>) => {\n      state.selectVisualScriptList = action.payload.list;\n      state.selectVisualScriptListError = null;\n      state.loadingVisualScriptList = false;\n    },\n    selectVisualScriptListError: (state, action: PayloadAction<any>) => {\n      state.loadingVisualScriptList = false;\n      state.selectVisualScriptListError = action.payload;\n    },\n    loadSelectScriptAndroidList: state => {\n      state.loadingScriptAndroidList = true;\n    },\n    selectScriptListAndroidLoaded: (state, action: PayloadAction<any>) => {\n      state.selectScriptAndroidList = action.payload.list;\n      state.selectScriptListAndroidError = null;\n      state.loadingScriptAndroidList = false;\n    },\n    selectScriptListAndroidError: (state, action: PayloadAction<any>) => {\n      state.loadingScriptAndroidList = false;\n      state.selectScriptListAndroidError = action.payload;\n    },\n    loadSelectAppBuildAndroidList: state => {\n      state.loadingAppBuildAndroidList = true;\n    },\n    selectAppBuildListAndroidLoaded: (state, action: PayloadAction<any>) => {\n      state.selectAppBuildAndroidList = action.payload.list;\n      state.selectAppBuildListAndroidError = null;\n      state.loadingAppBuildAndroidList = false;\n    },\n    selectAppBuildAndroidError: (state, action: PayloadAction<any>) => {\n      state.loadingAppBuildAndroidList = false;\n      state.selectAppBuildListAndroidError = action.payload;\n    },\n\n    createTestExecutionProject: (state ,action: PayloadAction<any>  ) => {\n      state.loadCreateProjectRequest = true;\n    },\n    testExecutionProjectCreated: (state, action: PayloadAction<any>) => {\n      state.loadCreateProjectRequest = false;\n      state.creatProjectResponse = action.payload;\n      state.createProjectError = null;\n    },\n    createTestExecutionProjectError: (state, action: PayloadAction<any>) => {\n      state.loadCreateProjectRequest = false;\n      state.createProjectError = action.payload;\n    },\n\n    removeSelectedDevices: (state, action: PayloadAction<any>) => {\n      state.TestExecutionSelectDevice = removeSelectedDeviceHandler(\n        state.TestExecutionSelectDevice,\n        action.payload,\n      );\n      state.removeId = action.payload;\n    },\n\n    resetTestDevices: state => {\n      state.TestExecutionSelectDevice = [];\n    },\n    addTestDevices: (state, action: PayloadAction<any>) => {\n      addUniqueDevices(state.TestExecutionSelectDevice, action.payload);\n    },\n    addSelectedDevices: (state, action: PayloadAction<any>) => {\n      state.TestExecutionSelectDevice = action.payload;\n    },\n    loadUploadApplication:(state ,action: PayloadAction<any>)=> {\n      state.loadingUploadApplication = true;\n    },\n    uploadApplicationResponse: (state, action: PayloadAction<any>) => {\n      state.loadingUploadApplication = false;\n      state.applicationUploaded = action.payload;\n      state.applicationUploadError = null;\n    },\n    uploadApplicationError: (state, action: PayloadAction<any>) => {\n      state.loadingUploadApplication = false;\n      state.applicationUploadError = action.payload;\n    },\n    loadUploadApplicationAndroid: state => {\n      state.loadingUploadApplicationAndroid = true;\n    },\n    uploadApplicationAndroidResponse: (state, action: PayloadAction<any>) => {\n      state.loadingUploadApplicationAndroid = false;\n      state.applicationUploadedAndroid = action.payload;\n      state.applicationUploadAndroidError = null;\n    },\n    uploadApplicationAndroidError: (state, action: PayloadAction<any>) => {\n      state.loadingUploadApplicationAndroid = false;\n      state.applicationUploadAndroidError = action.payload;\n    },\n\n    loadUploadAppBuildFile: state => {\n      state.loadingAppBuildFile = true;\n    },\n    appBuildApplicationFileUploaded: (state, action: PayloadAction<any>) => {\n      state.loadingAppBuildFile = false;\n      state.appBuildFileUploaded = action.payload;\n    },\n    appBuildFileUploadError: (state, action: PayloadAction<any>) => {\n      state.loadingAppBuildFile = false;\n      state.appBuildFileError = action.payload;\n    },\n    loadUploadEventConfigFile: state => {\n      state.loadingEventConfigFile = true;\n    },\n    eventConfigFileUploaded: (state, action: PayloadAction<any>) => {\n      state.loadingEventConfigFile = false;\n      state.eventConfigFileUploaded = action.payload;\n    },\n    eventConfigFileUploadError: (state, action: PayloadAction<any>) => {\n      state.loadingEventConfigFile = false;\n      state.eventConfigFileError = action.payload;\n    },\n    loadDeviceList: state => {\n      state.loadingDeviceList = true;\n    },\n    DeviceListLoaded: (state, action: PayloadAction<any>) => {\n      state.loadingDeviceList = false;\n      //console.log(action.payload)\n      state.DeviceListData = action.payload.filter(\n        item => item.deviceParameters.deviceStatus != 'unavailable',\n      );\n      state.DeviceListingError = null;\n    },\n    deviceListLoadError: (state, action: PayloadAction<any>) => {\n      state.loadingDeviceList = false;\n      state.DeviceListingError = action.payload;\n    },\n    uploadFileProgress: (state, action: PayloadAction<any>) => {\n      state.progressValue = action.payload;\n    },\n    loadindBusyDeviceSlots: state => {\n      state.loadingBusySlots = true;\n    },\n    BusyDeviceSlotsListLoaded: (state, action: PayloadAction<any>) => {\n      state.loadingBusySlots = false;\n\n      state.BusyDeviceSlotsData = action.payload;\n    },\n    BusyDeviceSlotsListError: (state, action: PayloadAction<any>) => {\n      state.loadingBusySlots = false;\n      state.BusyDeviceSlotsError = action.payload;\n    },\n    addOptionalKeyValue: (state, action: PayloadAction<any>) => {\n      //console.log(action.payload);\n      if (action.payload.hasOwnProperty('keyName')) {\n        state.addedOptionalKeyValue = [\n          ...state.addedOptionalKeyValue,\n          action.payload,\n        ];\n      } else {\n        state.addedOptionalKeyValue = action.payload;\n      }\n    },\n  },\n});\n\nexport const { actions: xcuiTestExecutionActions } = slice;\n\nexport const useTestExecutionSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: slice.name, saga: xcuiTestExecutionSaga });\n  return { testExecutionActions: slice.actions };\n};\n","import { ManageUserData } from 'types/ManageUser';\nimport { MydevicesData } from 'types/MydevicesData';\n\nexport interface myDevicesState {\n  myDevicesLoading: boolean;\n  myDevicesError: MyDevicesErrorType | null;\n  myDevicesData: MydevicesData[];\n  loadingTrayList: boolean;\n  deviceTrayList: MydevicesData[];\n  deviceListTrayError: MyDevicesErrorType | null;\n  devicesTrayName: deviceTrayDataResponse;\n  createTrayLoading: boolean;\n  createTrayResponseLoaded: deviceTrayDataResponse;\n  createTrayResponseError: null | MyDevicesErrorType;\n  deleteTrayLoading: boolean;\n  deleteTrayResponseLoaded: deviceTrayDataResponse;\n  deleteTrayResponseError: null | MyDevicesErrorType;\n  updateTrayLoading: boolean;\n  updateTrayResponseLoaded: deviceTrayDataResponse;\n  updateTrayResponseError: null | MyDevicesErrorType;\n  loadingTrayData: boolean;\n  TrayDeviceData: deviceTrayDataResponse[];\n  TrayDataLoadError: MyDevicesErrorType | null;\n  traySelectDevice: TraySelectedDevice[];\n}\n\nexport interface TraySelectedDevice {}\n\nexport interface deviceTrayDataResponse {}\n\nexport enum MyDevicesErrorType {\n  RESPONSE_ERROR = 1,\n  TEST_NOT_FOUND = 2,\n}\n","import GetIdToken from 'Authentication/configuration/GetIdToken';\nimport { call, put, takeLatest, delay, takeEvery } from 'redux-saga/effects';\nimport { ManageUserData } from 'types/ManageUser';\nimport { request } from 'utils/request';\nimport { myDevicesActions as actions } from '.';\nimport { MyDevicesErrorType } from './types';\nimport { REACT_APP_APP_TESTING_BASE_URL } from 'utils/enviroment';\n\nconst AWS_BASE_URL = REACT_APP_APP_TESTING_BASE_URL;\n\nfunction* getMyDevicesData() {\n  const requestUrl = `${AWS_BASE_URL}/device`;\n\n  const idToken = GetIdToken();\n\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const myDeviceData = yield call(request, requestUrl, config);\n    if (myDeviceData.data.items?.length > 0) {\n      yield put(actions.myDevicesDataLoaded(myDeviceData.data.items));\n    } else {\n      yield put(actions.myDevicesDataError(MyDevicesErrorType.RESPONSE_ERROR));\n    }\n  } catch (error) {\n    yield put(actions.myDevicesDataError(MyDevicesErrorType.RESPONSE_ERROR));\n  }\n}\n\nfunction* getTrayListSagaWacher(param) {\n  const idToken = GetIdToken();\n  const paramString = param.payload ? `?testType=${param.payload}` : '?testType=';\n\n  const requestUrl = `${AWS_BASE_URL}/tray/list${paramString}`;\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const response = yield call(request, requestUrl, config);\n\n    if (\n      response.hasOwnProperty('body') &&\n      response.hasOwnProperty('statusCode') &&\n      response.statusCode === 200\n    ) {\n      if (response.body !== null && response.body.hasOwnProperty('trays')) {\n        yield put(actions.deviceTrayListLoaded(response.body.trays));\n      } else {\n        yield put(actions.deviceTrayListLoaded([]));\n      }\n    } else {\n      yield put(actions.deviceListTrayError(MyDevicesErrorType.RESPONSE_ERROR));\n    }\n  } catch (e) {\n    yield put(actions.deviceListTrayError(MyDevicesErrorType.RESPONSE_ERROR));\n    console.log(e, 'error');\n  }\n}\n\nfunction* fetchTrayDataSagaWacher(trayId) {\n  const idToken = GetIdToken();\n  //console.log(idToken);\n\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  //const requestUrl = `${AWS_BASE_URL}/tray/devices/trayid=${trayId.payload}`;\n  const requestUrl = `${AWS_BASE_URL}/tray/devices?trayid=${trayId.payload}`;\n  try {\n    const response = yield call(request, requestUrl, config);\n    // console.log(response);\n    if (response.hasOwnProperty('body')) {\n      yield put(actions.trayDataLoaded(response.body));\n    } else {\n      yield put(actions.trayDataLoadedError(MyDevicesErrorType.RESPONSE_ERROR));\n    }\n  } catch (e) {\n    yield put(actions.trayDataLoadedError(MyDevicesErrorType.RESPONSE_ERROR));\n  }\n}\n\nfunction* createTrayListSagaWacher(trayData) {\n  const idToken = GetIdToken();\n\n  const requestUrl = `${AWS_BASE_URL}/tray/create`;\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n    body: JSON.stringify(trayData.payload),\n  };\n  try {\n    const response = yield call(request, requestUrl, config);\n    if (response.hasOwnProperty('body')) {\n      yield put(actions.createdDeviceTray(response));\n    } else {\n      yield put(\n        actions.createDeviceTrayError(MyDevicesErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (e) {\n    yield put(actions.createDeviceTrayError(MyDevicesErrorType.RESPONSE_ERROR));\n  }\n}\n\nfunction* deleteTrayDataSagaWacher(trayId) {\n  const idToken = GetIdToken();\n\n  const config = {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n\n  const requestUrl = `${AWS_BASE_URL}/tray/delete?trayid=${trayId.payload}`;\n  try {\n    const response = yield call(request, requestUrl, config);\n    if (response.hasOwnProperty('body') && response.statusCode === 200) {\n      yield put(actions.deleteTrayResponseData(response.body));\n    } else {\n      yield put(\n        actions.deleteTrayResponseError(MyDevicesErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (e) {\n    yield put(\n      actions.deleteTrayResponseError(MyDevicesErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* updateTrayDataSagaWacher(trayData) {\n  const idToken = GetIdToken();\n  const config = {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n    body: JSON.stringify(trayData.payload.body),\n  };\n\n  const requestUrl = `${AWS_BASE_URL}/tray/update?trayid=${trayData.payload.trayId}`;\n  try {\n    const response = yield call(request, requestUrl, config);\n\n    if (response.hasOwnProperty('body') && response.statusCode === 200) {\n      yield put(actions.updateTrayResponseData(response.body));\n    } else {\n      yield put(\n        actions.updateTrayResponseError(MyDevicesErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (e) {\n    yield put(\n      actions.updateTrayResponseError(MyDevicesErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nexport function* myDevicesSaga() {\n  yield takeLatest(actions.loadDeviceTrayList.type, getTrayListSagaWacher);\n  yield takeLatest(actions.loadCreateDeviceTray.type, createTrayListSagaWacher);\n  yield takeLatest(actions.loadTrayData.type, fetchTrayDataSagaWacher);\n  yield takeLatest(actions.loadingDeleteTray.type, deleteTrayDataSagaWacher);\n  yield takeLatest(actions.loadingUpdateTray.type, updateTrayDataSagaWacher);\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { myDevicesSaga } from './saga';\nimport { myDevicesState } from './types';\nexport const initialState: myDevicesState = {\n  myDevicesLoading: false,\n  myDevicesError: null,\n  myDevicesData: [],\n  loadingTrayList: false,\n  deviceTrayList: [],\n  deviceListTrayError: null,\n  devicesTrayName: {},\n  createTrayLoading: false,\n  createTrayResponseLoaded: {},\n  createTrayResponseError: null,\n  deleteTrayLoading: false,\n  deleteTrayResponseLoaded: {},\n  deleteTrayResponseError: null,\n  updateTrayLoading: false,\n  updateTrayResponseLoaded: {},\n  updateTrayResponseError: null,\n  loadingTrayData: false,\n  TrayDeviceData: [],\n  TrayDataLoadError: null,\n  traySelectDevice: [],\n};\n\nconst addUniqueDevices = (arr, data) => {\n  //console.log(arr, data);\n  // let index = -1;\n  if (arr.filter(item => item.serial === data.serial).length > 0) {\n    return arr;\n  }\n\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i].id === data.id) {\n  //     index = i;\n  //   }\n  // }\n  // if (index > -1) {\n  //   if (data.count > 0) {\n  //     arr[index] = data;\n  //   } else {\n  //     arr.splice(index, 1);\n  //   }\n  // } else if (index === -1 && data.count !== 0) {\n  //   arr.push(data);\n  // }\n  const updated = [...arr, data];\n  return updated;\n};\nconst getRemovedTrayDevices = (trayselectedList, deviceId) => {\n  const removedList = trayselectedList.filter(item => item.uuid !== deviceId);\n  return removedList;\n};\n\nconst slice = createSlice({\n  name: 'myDevices',\n  initialState,\n  reducers: {\n    loadMyDevicesData: state => {\n      state.myDevicesLoading = true;\n    },\n    myDevicesDataLoaded: (state, action: PayloadAction<any>) => {\n      state.myDevicesLoading = false;\n      state.myDevicesError = null;\n      state.myDevicesData = action.payload;\n    },\n    myDevicesDataError: (state, action: PayloadAction<any>) => {\n      state.myDevicesLoading = false;\n      state.myDevicesError = action.payload;\n    },\n    loadDeviceTrayList: state => {\n      state.loadingTrayList = true;\n    },\n    deviceTrayListLoaded: (state, action: PayloadAction<any>) => {\n      state.loadingTrayList = false;\n      state.deviceTrayList = action.payload;\n      state.deviceListTrayError = null;\n    },\n    deviceListTrayError: (state, action: PayloadAction<any>) => {\n      state.loadingTrayList = false;\n      state.deviceListTrayError = action.payload;\n    },\n    loadCreateDeviceTray: state => {\n      state.createTrayLoading = true;\n    },\n    createdDeviceTray: (state, action: PayloadAction<any>) => {\n      state.createTrayLoading = false;\n      state.createTrayResponseLoaded = action.payload;\n      state.createTrayResponseError = null;\n    },\n    createDeviceTrayError: (state, action: PayloadAction<any>) => {\n      state.createTrayLoading = false;\n      state.createTrayResponseError = action.payload;\n    },\n    createDeviceTrayName: (state, action: PayloadAction<any>) => {\n      state.devicesTrayName = action.payload;\n    },\n    loadTrayData: state => {\n      state.loadingTrayData = true;\n    },\n    trayDataLoaded: (state, action: PayloadAction<any>) => {\n      state.loadingTrayList = false;\n      state.TrayDeviceData = action.payload;\n      state.traySelectDevice = action.payload;\n      state.TrayDataLoadError = null;\n    },\n    trayDataLoadedError: (state, action: PayloadAction<any>) => {\n      state.loadingTrayList = false;\n      state.TrayDataLoadError = action.payload;\n    },\n    loadingDeleteTray: state => {\n      state.deleteTrayLoading = true;\n    },\n    deleteTrayResponseData: (state, action: PayloadAction<any>) => {\n      state.deleteTrayLoading = false;\n      state.deleteTrayResponseLoaded = action.payload;\n      state.deleteTrayResponseError = null;\n    },\n    deleteTrayResponseError: (state, action: PayloadAction<any>) => {\n      state.deleteTrayLoading = false;\n      state.deleteTrayResponseError = action.payload;\n    },\n    loadingUpdateTray: state => {\n      state.updateTrayLoading = true;\n    },\n    updateTrayResponseData: (state, action: PayloadAction<any>) => {\n      state.updateTrayLoading = false;\n      state.updateTrayResponseLoaded = action.payload;\n      state.updateTrayResponseError = null;\n    },\n    updateTrayResponseError: (state, action: PayloadAction<any>) => {\n      state.updateTrayLoading = false;\n      state.updateTrayResponseError = action.payload;\n    },\n    addTrayDevices: (state, action: PayloadAction<any>) => {\n      state.traySelectDevice = addUniqueDevices(\n        state.traySelectDevice,\n        action.payload,\n      );\n    },\n    removeDeviceFromTary: (state, action: PayloadAction<any>) => {\n      state.traySelectDevice = getRemovedTrayDevices(\n        state.traySelectDevice,\n        action.payload,\n      );\n    },\n    resetSelectedDevice: state => {\n      state.traySelectDevice = [];\n    },\n  },\n});\n\nexport const { actions: myDevicesActions } = slice;\n\nexport const useMyDevicesSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: slice.name, saga: myDevicesSaga });\n  return { actions: slice.actions };\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nconst usePlatformtypeHook = () => {\n  const location = useLocation();\n  const pathname = location.pathname;\n  const [isMobileTesting , setMobileTesting] = useState()\n  const searchTerm = '/motesting';\n  const hasStartingString = pathname.startsWith(searchTerm);\n\n  useEffect(() => {\n      setMobileTesting(hasStartingString)\n  }, [location]);\n\n  return hasStartingString;\n};\n\nexport default usePlatformtypeHook;\n"],"sourceRoot":""}