{"version":3,"sources":["app/pages/Appium/components/InfoComponent.tsx","app/pages/Appium/components/InputDateTime.tsx","app/pages/UiAutomator/components/SelectValueComponent.tsx","app/pages/UiAutomator/components/ToggleSelectInput.tsx","app/pages/Appium/components/SelectedTestDevice.tsx","app/pages/Appium/components/SelectDevicePopup.tsx","app/pages/Appium/components/LaunchIconButton.tsx","styles/Assets/display1.png","app/pages/MyDevices/assets/Icon awesome-trash-alt.svg","app/pages/MyDevices/components/DeviceCounter.tsx","app/pages/MyDevices/components/GridListViewLayout.tsx","app/pages/Appium/components/PopupCardDetail.tsx","app/pages/UiAutomator/components/CheckboxComp.tsx","app/pages/UiAutomator/components/KeyValueComponent.tsx","app/pages/UiAutomator/components/NewKeyValueComponent.tsx","utils/getFileUrlFromList.ts","app/utils/useSelectedDevicesStatus.tsx","app/utils/useDevicesLoadInterval.tsx","app/pages/MyDevices/components/MonthsCounter.tsx","app/pages/MyDevices/components/TableRowData.tsx","app/pages/MyDevices/components/DeviceListTable.tsx","app/pages/MyDevices/components/ListViewDevice.tsx","app/pages/MyDevices/components/DeviceDisplayLayout.tsx","app/pages/MyDevices/components/DeviceCard.tsx","app/pages/MyDevices/components/GrideViewRow.tsx","app/pages/MyDevices/components/GridViewDevice.tsx"],"names":["InfoComponent","_ref","labelmessage","_jsx","Tooltip","label","placement","children","Icon","marginLeft","color","w","h","as","AiOutlineInfoCircle","InputDateTime","selectedDate","setSelectDate","name","minHrs","setMinHrs","useState","Date","getHours","minMns","setMinMns","getMinutes","Flex","Input","onKeyDown","e","preventDefault","DatePicker","border","_focus","boxShadow","showTimeSelect","borderRadius","selected","onChange","date","year","getFullYear","month","toISOString","slice","currDate","getDate","hrs","mins","onSelect","handleSelectTime","onBlur","validateDateTime","minDate","timeFormat","dateFormat","timeIntervals","minTime","setHours","setMinutes","maxTime","type","SelectValueComponent","title","selectOptions","selectValue","setSelectValue","width","isShadow","Select","placeholder","size","borderColor","value","target","map","item","index","ToggleSelectInput","isToggle","setIsToggle","useEffect","_jsxs","align","justifyContent","height","justify","ButtonComp","buttonHandler","state","padding","fontWeight","SelectedTestDevice","isAddButton","selectedDevices","dispatch","useDispatch","testExecutionActions","useTestExecutionSlice","flexDirection","fontFamily","fontSize","marginBottom","paddingBottom","bg","alignItems","Text","length","backgroundColor","addToMyDeviceHandler","marginTop","overflowY","overflowX","css","boreder","margin","alignContent","Img","src","display","alt","marginRight","Container","isTruncated","deviceInfo","brand","modelName","whiteSpace","platform","osVersion","CloseButton","onClick","removeIconHandler","id","removeSelectedDevices","SelectDevicePopup","tableData","activeDevicePopup","setActiveDevicePopup","selectedDeviceHandler","selectedDeviceList","deviceOs","isLoading","errorDeviceData","_Fragment","PopupComponent","isOpen","onClose","buttonTitle1","buttonTitle2","buttonHandler1","buttonHandler2","footerleftItem","StatusLabels","background","DeviceDisplayLayout","child1","GridViewDevice","isCheckBox","child2","ListViewDevice","borderLeft","LaunchIconButton","viewCode","Button","className","textColor","paddingLeft","_hover","_active","leftIcon","MdLaunch","sx","DeviceCounter","countDevice","setCountDevice","isGrideView","isMonth","deviceId","countMonth","setCountMonth","actions","useMyDevicesSlice","position","top","right","cursor","incrementCountHandler","addTrayDevices","GridListViewLayout","isLabels","paddingTop","PopupCardDetail","flex","left","zIndex","CheckboxComp","setCheckedValue","infoIcon","isDisabled","Checkbox","colorScheme","disabled","isChecked","checked","KeyValueComponent","getValue","setValue","isMandatory","min","NewKeyValueComponent","objectData","removeKeyValueHandler","getKeyOption","setKeyOption","getValueOption","setValueOption","keyName","focus","getApplicationUrlHelper","optionList","selectedValue","selectedOption","hasOwnProperty","meta","s3Url","useSelectedDevicesStatus","setAreDevicesBusy","devices","filteredArray","filter","includes","serial","free","every","device","_device$deviceParamet","deviceParameters","deviceStatus","useDevicesLoadInterval","isMobileTesting","loadDevices","loadDeviceList","testType","intervalId","setInterval","clearInterval","MonthsCounter","useCallback","decrementCountHandler","TableRowData","isDelete","isLaunch","removeID","useSelector","selectRemoveDeviceId","addTestDevices","count","Tr","location","Td","minWidth","paddingRight","Box","concat","getStatusColorDevice","network","mobile","screenSize","city","deleteIcon","Link","to","FaTelegramPlane","DeviceListTable","tableHeading","isInput","getCountDevice","setSelectedDevice","Table","variant","Thead","Th","headers","textTransform","Tbody","fileterTableData","LoadingComponent","NoContent","message","child","os","hideSearchButton","selectCategory","setSelectCategory","getRootProps","getRadioProps","useRadioGroup","defaultValue","val","Tabs","flexwrap","HStack","TabList","Tab","borderBottom","_selected","IconButton","icon","FaListUl","alignSelf","TabPanels","TabPanel","minHeight","DeviceCard","connection","hoverObject","cardData","selectArray","selectedDeviceArray","borderLeftColor","onCLick","clickHandler","model","osName","deviceLocation","networkProvider","GrideViewRow","Make","overflow","flexWrap","card","samsung","row","manufacturer","redmi","oppo","lenovo"],"mappings":"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","file":"static/js/3.41652ffe.chunk.js","sourcesContent":["import { Flex, Icon, Tooltip } from '@chakra-ui/react';\nimport React from 'react';\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\n\nfunction InfoComponent({ labelmessage }) {\n  return (\n    <Tooltip label={labelmessage} placement=\"auto-start\">\n      <span>\n        <Icon\n          marginLeft=\"10px\"\n          color=\"#7E8299\"\n          w=\"14px\"\n          h=\"14px\"\n          as={AiOutlineInfoCircle}\n        />\n      </span>\n    </Tooltip>\n  );\n}\n\nexport default InfoComponent;\n","// @ts-nocheck\nimport React, { useState } from 'react';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Flex, Input } from '@chakra-ui/react';\nfunction InputDateTime({ selectedDate, setSelectDate, name }) {\n  const [minHrs, setMinHrs] = useState(new Date().getHours());\n  const [minMns, setMinMns] = useState(new Date().getMinutes());\n  // const [selectedDate, setSelectDate] = useState(\n  //   setHours(\n  //     setMinutes(new Date(), new Date().getMinutes()),\n  //     minHrs || new Date().getHours(),\n  //   ),\n  // );\n  const handleSelectDate = date => {\n    //setSelectDate(setHours(setMinutes(new Date(), 0), 0),)\n    setSelectDate(date);\n    if (date) {\n      const year = new Date().getFullYear();\n      const month = new Date().toISOString().slice(5, 7);\n      const currDate = new Date().getDate();\n      const hrs = new Date().getHours();\n      const mins = new Date().getMinutes();\n\n      if (\n        date.getFullYear() == year &&\n        date.toISOString().slice(5, 7) == month &&\n        date.getDate() == currDate\n      ) {\n        setMinHrs(hrs);\n        setMinMns(mins);\n        //  console.log('match date');\n        //  if(hrs > date.getHours() ){\n        //    selectedDate(\"\");\n        //  }\n      } else {\n        setMinHrs(0);\n        setMinMns(0);\n      }\n    }\n  };\n\n  const validateDateTime = () => {\n    //setDateTime(selectedDate);\n    //  console.log(selectedDate);\n  };\n\n  const handleSelectTime = () => {\n    //console.log(selectedDate);\n  };\n\n  return (\n    <Flex>\n      <Input\n        onKeyDown={e => e.preventDefault()}\n        data-input-datetime={name}\n        as={DatePicker}\n        border=\"0px solid white\"\n        _focus={{ boxShadow: '0px 3px 6px #00000029' }}\n        boxShadow=\"0px 3px 6px #00000029\"\n        w=\"260px\"\n        h=\"34px\"\n        showTimeSelect\n        borderRadius=\"5px\"\n        selected={selectedDate}\n        onChange={handleSelectDate}\n        onSelect={handleSelectTime}\n        onBlur={validateDateTime}\n        minDate={new Date()}\n        timeFormat=\"HH:mm\"\n        // dateFormat=\"hh:mm aa\"\n        dateFormat=\"dd-MM-yyyy  HH:mm\"\n        timeIntervals={5}\n        //  dateFormat=\"dd-MM-yyyy  hh:mm\"\n        minTime={setHours(setMinutes(new Date(), minMns), minHrs)}\n        maxTime={setHours(setMinutes(new Date(), 59), 23)}\n        type=\"datetime\"\n      ></Input>\n    </Flex>\n  );\n}\n\nexport default InputDateTime;\n","// @ts-nocheck\nimport { Select } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction SelectValueComponent({\n  title,\n  selectOptions,\n  selectValue,\n  setSelectValue,\n  width,\n  isShadow,\n}) {\n  return (\n    <Select\n      placeholder={title}\n      size=\"sm\"\n      data-select-interval=\"interval\"\n      border={isShadow ? '0px solid' : '1px solid'}\n      borderColor=\"grey1\"\n      boxShadow={isShadow ? '0px 3px 6px #00000029' : 'none'}\n      width={width || '260px'}\n      color=\"grey13\"\n      h=\"34px\"\n      // _hover={{border: \"0px solid\"}}\n\n      borderRadius=\"5px\"\n      value={selectValue}\n      onChange={e => setSelectValue(e.target.value)}\n      //_focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n      _focus={\n        isShadow\n          ? { boxShadow: '0px 3px 6px #00000029', borderColor: 'none' }\n          : { boxShadow: ' 0 0 0 white', borderColor: 'grey1' }\n      }\n    >\n      {selectOptions &&\n        selectOptions.map((item, index) => (\n          <option data-select-value={item} key={index} value={item}>\n            {item}\n          </option>\n        ))}\n    </Select>\n  );\n}\n\nexport default SelectValueComponent;\n","import { Flex, Input, Select, Text } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport React, { useEffect, useState } from 'react';\n\nfunction ToggleSelectInput({\n  isShadow,\n  width,\n  selectOptions,\n  setSelectValue,\n  selectValue,\n}) {\n  const [isToggle, setIsToggle] = useState(true);\n  useEffect(() => {\n    setSelectValue(5);\n  }, [isToggle]);\n\n  return (\n    <Flex\n      //      border={isShadow ? '0px solid' : '1px solid'}\n      // borderColor=\"grey1\"\n      //boxShadow={isShadow ? '0px 3px 6px #00000029' : 'none'}\n      width=\"260px\"\n      h=\"34px\"\n      borderRadius=\"5px\"\n      align=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Flex width=\"160px\">\n        {isToggle ? (\n          <Select\n            height=\"34px\"\n            width=\"100%\"\n            border={isShadow ? '0px solid' : '1px solid'}\n            borderColor=\"white\"\n            boxShadow={isShadow ? '0px 3px 6px #00000029' : 'none'}\n            _focus={\n              isShadow\n                ? { boxShadow: '0px 3px 6px #00000029', borderColor: 'none' }\n                : { boxShadow: ' 0 0 0 white', borderColor: 'grey1' }\n            }\n            value={selectValue}\n            onChange={e => setSelectValue(e.target.value)}\n          >\n            {selectOptions &&\n              selectOptions.map((item, index) => (\n                <option data-select-value={item} key={index} value={item}>\n                  {item}\n                </option>\n              ))}\n          </Select>\n        ) : (\n          <Input\n            _focus={\n              isShadow\n                ? { boxShadow: '0px 3px 6px #00000029', borderColor: 'none' }\n                : { boxShadow: ' 0 0 0 white', borderColor: 'grey1' }\n            }\n            border={isShadow ? '0px solid' : '1px solid'}\n            borderColor=\"white\"\n            boxShadow={isShadow ? '0px 3px 6px #00000029' : 'none'}\n            value={selectValue}\n            onChange={e => setSelectValue(e.target.value)}\n            height=\"34px\"\n            width=\"100%\"\n            type=\"number\"\n            placeholder=\"type\"\n          ></Input>\n        )}\n      </Flex>\n\n      <Flex justify=\"center\" align=\"center\">\n        <ButtonComp\n          buttonHandler={() => setIsToggle(state => !state)}\n          width=\"80px\"\n          padding=\"8px\"\n          fontWeight=\"500\"\n        >\n          {isToggle ? 'Custom' : 'Select'}\n        </ButtonComp>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default ToggleSelectInput;\n","// @ts-nocheck\nimport { CloseButton, Container, Flex, Img, Text } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport display from '../../../../styles/Assets/display1.png';\nconst listData = [\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n  {\n    make: 'Samsung',\n    model: 'galaxy pro 8',\n    os: 'Android',\n  },\n];\nfunction SelectedTestDevice({ isAddButton, selectedDevices }) {\n  const dispatch = useDispatch();\n  const { testExecutionActions } = useTestExecutionSlice();\n\n  const removeIconHandler = id => {\n    dispatch(testExecutionActions.removeSelectedDevices(id));\n    // console.log(\"id\"+id)\n  };\n  const addToMyDeviceHandler = () => {};\n\n  return (\n    <Flex\n      flexDirection=\"column\"\n      fontFamily=\"Montserrat\"\n      fontWeight=\"500\"\n      fontSize=\"14px\"\n      color=\"black\"\n      marginBottom=\"5px\"\n      padding=\"15px\"\n      paddingBottom=\"0px\"\n      bg=\"white\"\n      width=\"100%\"\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text fontSize=\"16px\">Selected Devices({selectedDevices.length})</Text>\n        {isAddButton && (\n          <ButtonComp\n            width=\"170px\"\n            backgroundColor=\"blue1\"\n            buttonHandler={addToMyDeviceHandler}\n            color=\"white\"\n          >\n            Add To My Device\n          </ButtonComp>\n        )}\n      </Flex>\n      <Flex\n        flexDirection=\"column\"\n        marginTop=\"5px\"\n        overflowY=\"auto\"\n        overflowX=\"hidden\"\n        css={{\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            //height: '30px',\n            border: '5px solid #F3F6F9',\n          },\n          '&::-webkit-scrollbar-track': {\n            boxShadow: 'inset 0 0 6px white',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#C1C1C1',\n            borderRadius: '5px',\n            boreder: '2px solid',\n          },\n        }}\n        padding=\"2px\"\n      >\n        {selectedDevices.map((item, index) => (\n          <Flex\n            key={index}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            margin=\"5px 0px\"\n          >\n            <Flex alignContent=\"center\" alignItems=\"center\">\n              <Img\n                w=\"20px\"\n                h=\"40px\"\n                src={display}\n                alt=\"display\"\n                marginRight=\"10px\"\n              ></Img>\n              <Container padding=\"0px\">\n                <Text isTruncated>\n                  {item.deviceInfo.brand} {item.deviceInfo.modelName}\n                </Text>\n\n                <Text whiteSpace=\"nowrap\">\n                  {item.deviceInfo.platform} {item.deviceInfo.osVersion}\n                </Text>\n                {/* <Text whiteSpace=\"nowrap\"   >{item.deviceInfo.serial}</Text> */}\n              </Container>\n            </Flex>\n\n            <CloseButton\n              marginRight=\"5px\"\n              onClick={e => removeIconHandler(item.id)}\n            />\n          </Flex>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default SelectedTestDevice;\n","// @ts-nocheck\nimport { Flex, useDisclosure } from '@chakra-ui/react';\nimport PopupComponent from 'app/components/PopupComponent';\nimport StatusLabels from 'app/pages/AssignDevices/components/StatusLabels';\nimport SelectedTestDevice from './SelectedTestDevice';\nimport DeviceDisplayLayout from 'app/pages/MyDevices/components/DeviceDisplayLayout';\nimport GridViewDevice from 'app/pages/MyDevices/components/GridViewDevice';\nimport ListViewDevice from 'app/pages/MyDevices/components/ListViewDevice';\nimport { selectDeviceCount } from 'app/pages/MyDevices/slice/selector';\nimport { selectTestExecutionDevices } from 'app/pages/Xcui/slice/selector';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport DeviceAndTray from '../../MyDevices/components/DeviceAndTray';\nfunction SelectDevicePopup({\n  tableData,\n  activeDevicePopup,\n  setActiveDevicePopup,\n  title,\n  selectedDeviceHandler,\n  selectedDeviceList,\n  deviceOs,\n  isLoading,\n  errorDeviceData,\n}) {\n  // const { isOpen, onOpen, onClose } = useDisclosure();\n  //  const selectedDevices = useSelector(selectTestExecutionDevices);\n\n  // console.log(selectedDeviceList);\n  //const   selectedDevices  = useSelector(selectDeviceCount)\n\n  return (\n    <>\n      <PopupComponent\n        isOpen={activeDevicePopup}\n        onClose={() => setActiveDevicePopup(false)}\n        title={title || 'Select Devices'}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2=\"Select\"\n        buttonHandler1={() => setActiveDevicePopup(false)}\n        width=\"1100px\"\n        buttonHandler2={selectedDeviceHandler}\n        footerleftItem={<StatusLabels></StatusLabels>}\n      >\n        <Flex height=\"396px\" background=\"white\" borderRadius=\"3\">\n          <Flex width=\"800px\">\n            <DeviceDisplayLayout\n              // os={deviceOs}\n              // child={<DeviceAndTray></DeviceAndTray>}\n              child1={\n                <GridViewDevice\n                  isCheckBox={true}\n                  tableData={tableData}\n                ></GridViewDevice>\n              }\n              child2={\n                <ListViewDevice\n                  isLoading={isLoading}\n                  isCheckBox={true}\n                  tableData={tableData}\n                  errorDeviceData={errorDeviceData}\n                ></ListViewDevice>\n              }\n              // child={<DeviceAndTray></DeviceAndTray>}\n            ></DeviceDisplayLayout>\n          </Flex>\n\n          <Flex\n            borderLeft=\"2px solid #EDEDED\"\n            color=\"grey13\"\n            fontWeight=\"500\"\n            fontFamily=\"Montserrat\"\n            width=\"290px\"\n            height=\"405px\"\n          >\n            <SelectedTestDevice\n              selectedDevices={selectedDeviceList}\n              isAddButton={false}\n            ></SelectedTestDevice>\n          </Flex>\n        </Flex>\n      </PopupComponent>\n    </>\n  );\n}\n\nexport default SelectDevicePopup;\n","import { Button, Flex, IconButton, Img, Text } from '@chakra-ui/react';\nimport instructIcon from '../../AutomationTest/assets/15760488931582806008.svg';\nimport React from 'react';\nimport { width } from '@amcharts/amcharts4/.internal/core/utils/Utils';\nimport { MdLaunch } from 'react-icons/md';\n\nfunction LaunchIconButton({ viewCode }) {\n  return (\n    <Flex w=\"130px\" h=\"35px\" color=\"grey1\">\n      {/* <IconButton _hover={{w:\"77px\" ,   bg:\"blue1\" ,Content:\"blue\" }}  aria-label='androidIcon' bg=\"white3\" borderRadius=\"3px\" w=\"33px\" h=\"35px\" color=\"grey5\"  _focus={{boxShadow :\"none\"}}\n         _active={{bg:\"white3\", color:\"blue1\"}} icon={<Img src={instructIcon} w=\"10px\" h=\"10px\"></Img>} ></IconButton> */}\n      <Button\n        onClick={viewCode}\n        className=\"launch-btn\"\n        fontWeight=\"500\"\n        textColor=\"grey\"\n        paddingLeft=\"23px\"\n        _hover={{ w: '90px', bg: 'blue1', color: 'white' }}\n        aria-label=\"androidIcon\"\n        bg=\"white3\"\n        borderRadius=\"3px\"\n        w=\"33px\"\n        h=\"35px\"\n        color=\"grey5\"\n        _focus={{ boxShadow: 'none' }}\n        _active={{ bg: 'white3', color: 'blue1' }}\n        leftIcon={<MdLaunch></MdLaunch>}\n      >\n        <Text\n          color=\"white\"\n          display=\"none\"\n          sx={{\n            '.launch-btn:hover &': {\n              display: 'block',\n            },\n          }}\n        >\n          {/* View Code */}\n          Open\n        </Text>\n      </Button>\n    </Flex>\n  );\n}\n\nexport default LaunchIconButton;\n","export default __webpack_public_path__ + \"static/media/display1.4fd653a7.png\";","export default __webpack_public_path__ + \"static/media/Icon awesome-trash-alt.e87640b6.svg\";","//@ts-nocheck\nimport { Flex, Text } from '@chakra-ui/react';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport MonthsCounter from './MonthsCounter';\n\ninterface propsType {\n  countDevice?: number;\n  setCountDevice?: any;\n  isGrideView?: boolean;\n  deviceId?: string | number;\n}\n\nfunction DeviceCounter({\n  countDevice,\n  setCountDevice,\n  isGrideView,\n  isMonth,\n  deviceId,\n  deviceInfo,\n}) {\n  const [countMonth, setCountMonth] = useState(1);\n  const { actions } = useMyDevicesSlice();\n  const dispatch = useDispatch();\n  const incrementCountHandler = () => {\n    // if (countDevice < 1) {\n    setCountDevice(countDevice + 1);\n    // }\n    dispatch(actions.addTrayDevices(deviceInfo));\n  };\n\n  const decrementCountHandler = c => {\n    if (countDevice) {\n      setCountDevice(countDevice - 1);\n      setCountMonth(1);\n    }\n  };\n\n  //  console.log(typeof setCountDevice)\n\n  return (\n    <Flex position=\"relative\" flexDirection=\"column\">\n      <Flex\n        w=\"50px\"\n        h=\"20px\"\n        bg=\"blue1\"\n        borderRadius=\"5px\"\n        justifyContent=\"space-around\"\n        fontSize=\"18px\"\n        color=\"white\"\n        top={isGrideView ? '-2px' : '-12px'}\n        //  top=\"-2px\"\n        right={isGrideView ? '-100px' : ''}\n        //     right= '-100px'\n        alignItems=\"center\"\n        alignContent=\"center\"\n      >\n        <Text\n          fontSize=\"14px\"\n          data-addbutton-id={deviceId}\n          cursor=\"pointer\"\n          onClick={incrementCountHandler}\n        >\n          Add\n        </Text>{' '}\n        {/* <Text fontSize=\"14px\">Add</Text>{' '} */}\n        {/* <Text onClick={decrementCountHandler} cursor=\"pointer\" fontSize=\"20px\">\n          -\n        </Text> */}\n      </Flex>\n\n      {/* {(!isGrideView && countDevice) ? (\n        <Flex\n          position=\"absolute\"\n          bg=\"red\"\n          width=\"55px\"\n          borderRadius=\"5px\"\n        right=\"105px\"\n\n          top=\"-12px\"\n        >\n          \n        {isMonth &&<MonthsCounter countMonth={countMonth}  setCountMonth={setCountMonth} ></MonthsCounter> }\n        </Flex>\n      ) : <></>} */}\n    </Flex>\n  );\n}\n\nexport default DeviceCounter;\n","//@ts-nocheck\nimport { Flex, Grid } from '@chakra-ui/react';\nimport LabelComp from 'app/components/LabelComp';\nimport StatusLabels from 'app/pages/AssignDevices/components/StatusLabels';\nimport React from 'react';\nimport GrideViewRow from './GrideViewRow';\n\nfunction GridListViewLayout({ children, isLabels, height }) {\n  return (\n    <Flex h={height || '350px'} flexDirection=\"column\" paddingTop=\"10px\">\n      <Flex\n        flexDirection=\"column\"\n        overflowY=\"auto\"\n        width=\"100%\"\n        css={{\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            border: '5px solid #F3F6F9',\n          },\n          '&::-webkit-scrollbar-track': {\n            boxShadow: 'inset 0 0 6px white',\n          },\n          '&::-webkit-scrollbar-thumb': {\n            backgroundColor: '#C1C1C1',\n            borderRadius: '5px',\n            boreder: '2px solid',\n          },\n        }}\n      >\n        <Flex width=\"100%\" flexDirection=\"column\">\n          {children}\n        </Flex>\n      </Flex>\n      {isLabels && <StatusLabels></StatusLabels>}\n    </Flex>\n  );\n}\n\nexport default GridListViewLayout;\n","import {\n  CloseButton,\n  Flex,\n  Icon,\n  ModalOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from '@chakra-ui/react';\n\nimport React from 'react';\nimport { MdContentCopy } from 'react-icons/md';\nimport AndroidCode from './AndroidCode';\nimport IosCode from './IosCode';\n\nfunction PopupCardDetail({ isOpen, onClose, children }) {\n  const listofTabs = ['Android', 'IOS'];\n\n  return (\n    <Flex display=\"flex\">\n      <Flex\n        flex={1}\n        width=\"100%\"\n        left=\"0px\"\n        position=\"fixed\"\n        h=\"100vh\"\n        top=\"0px\"\n        onClick={() => onClose(false)}\n        zIndex=\"10\"\n        display={isOpen ? 'block' : 'none'}\n      ></Flex>\n      <Flex\n        position=\"fixed\"\n        zIndex=\"100\"\n        display={isOpen ? 'block' : 'none'}\n        flexDirection=\"column\"\n        color=\"grey13\"\n        fontSize=\"14px\"\n        fontWeight=\"500\"\n        fontFamily=\"Montserrat\"\n        padding=\"15px\"\n        right=\"0px\"\n        top=\"130px\"\n        id=\"popupCard\"\n        bg=\"white\"\n        w=\"390px\"\n        h=\"390px\"\n        boxShadow=\"0px 3px 6px #00000075\"\n      >\n        {/* <CloseButton onClick={()=>onClose(false)} /> */}\n\n        <Flex flexDirection=\"column\">\n          <Flex justify=\"space-between\" align=\"center\">\n            <Text fontWeight=\"600\">\n              {/* Code Snippet{' '}\n              <Icon\n                marginLeft=\"5px\"\n                cursor=\"pointer\"\n                color=\"grey1\"\n                as={MdContentCopy}\n              ></Icon>{' '} */}\n              Test Parameters\n            </Text>\n\n            <CloseButton\n              w=\"16px\"\n              color=\"grey1\"\n              h=\"16px\"\n              onClick={() => onClose(false)}\n            />\n          </Flex>\n          {/* {children} */}\n          <Flex padding=\"5px\" width=\"100%\" h=\"320px\">\n            {children}\n            {/* <Tabs fontSize=\"14px\" width=\"100%\">\n              <TabList borderBottom=\"0px\" color=\"grey13\">\n                {listofTabs.map(tab => (\n                  <Tab\n                    fontSize=\"14px\"\n                    padding=\"0px\"\n                    borderBottom=\"3px solid transparent\"\n                    _selected={{ borderBottomColor: 'red1' }}\n                    margin=\"0px 15px 0px 0px\"\n                    _focus={{ boxShadow: ' 0 0 0 white' }}\n                    color=\"grey13\"\n                  >\n                    {tab}\n                  </Tab>\n                ))}\n              </TabList>\n              <TabPanels width=\"100%\">\n                <TabPanel\n                  width=\"100%\"\n                  h=\"320px\"\n                  color=\"black\"\n                  padding=\"0px\"\n                  margin=\"0px\"\n                >\n                  <AndroidCode codeData={children}></AndroidCode>\n                </TabPanel>\n\n                <TabPanel\n                  width=\"100%\"\n                  h=\"320px\"\n                  color=\"black\"\n                  padding=\"0px\"\n                  margin=\"0px\"\n                >\n                  <IosCode codeData={children}></IosCode>\n                </TabPanel>\n              </TabPanels>\n            </Tabs> */}\n          </Flex>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default PopupCardDetail;\n","// @ts-nocheck\nimport { Checkbox, Flex, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction CheckboxComp({ title, setCheckedValue, infoIcon, value, isDisabled }) {\n  return (\n    <Flex alignItems=\"center\" width=\"280px\" h=\"30px\" padding=\"5px 7px\">\n      {' '}\n      <Checkbox\n        colorScheme=\"red\"\n        disabled={isDisabled}\n        w=\"18px\"\n        h=\"18px\"\n        data-checkbox-flag={title}\n        marginRight=\"10px\"\n       // isChecked={!isDisabled ? false : value}\n        isChecked={value}\n        onChange={e => isDisabled ? setCheckedValue(value) : setCheckedValue(e.target.checked)}\n      ></Checkbox>\n      <Text>\n        {title}\n        {infoIcon}\n      </Text>\n    </Flex>\n  );\n}\n\nexport default CheckboxComp;\n","// @ts-nocheck\nimport { Flex, Input, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction KeyValueComponent({\n  label,\n  getValue,\n  setValue,\n  isDisabled,\n  isMandatory,\n}) {\n  return (\n    <Flex justifyContent=\"space-between\">\n      <Text>\n        {label}{' '}\n        {isMandatory && (\n          <Text as=\"span\" color=\"red\">\n            *\n          </Text>\n        )}\n      </Text>\n\n      <Input\n        size=\"sm\"\n        isDisabled={isDisabled}\n        border=\"1px solid \"\n        borderColor=\"grey1\"\n        w=\"150px\"\n        h=\"34px\"\n        min=\"5\"\n        data-input-key={label}\n        value={getValue}\n        onChange={e => setValue(e.target.value)}\n        //disabled={true}\n        borderRadius=\"5px\"\n        placeholder={label}\n      />\n    </Flex>\n  );\n}\n\nexport default KeyValueComponent;\n","import { CloseButton, Flex, Input, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\n\nfunction NewKeyValueComponent({ objectData, removeKeyValueHandler, id }) {\n  // console.log(objectData);\n  const [getKeyOption, setKeyOption] = useState();\n  const [getValueOption, setValueOption] = useState();\n\n  const setKeyDataHandler = e => {\n    setKeyOption(e.target.value);\n    objectData.keyName = e.target.value;\n  };\n  const setValueDataHandler = e => {\n    setValueOption(e.target.value);\n    objectData.value = e.target.value;\n  };\n  // console.log(objectData)\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Input\n        size=\"sm\"\n        border=\"1px solid \"\n        borderColor=\"grey1\"\n        w=\"140px\"\n        h=\"34px\"\n        data-input-newKey={getKeyOption || objectData.keyName}\n        focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n        min=\"5\"\n        value={getKeyOption || objectData.keyName}\n        onChange={setKeyDataHandler}\n        //disabled={true}\n        borderRadius=\"5px\"\n        placeholder=\"Key Name\"\n      />\n      <Input\n        size=\"sm\"\n        focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n        border=\"1px solid \"\n        borderColor=\"grey1\"\n        w=\"140px\"\n        h=\"34px\"\n        min=\"5\"\n        data-input-newValue={getValueOption || objectData.value}\n        value={getValueOption || objectData.value}\n        onChange={setValueDataHandler}\n        //disabled={true}\n        borderRadius=\"5px\"\n        placeholder=\"Value\"\n      />\n      {/* <CloseButton onClick={ () => removeKeyValueHandler(id) } w=\"25px\" h=\"25px\"  color=\"grey1\"></CloseButton> */}\n    </Flex>\n  );\n}\n\nexport default NewKeyValueComponent;\n"," const getApplicationUrlHelper = ( optionList , selectedValue) => {\n  //  const selectedValue = parseInt(index)\n    if (selectedValue === '' || selectedValue >= optionList.length) {\n      return '';\n    }\n  \n    const selectedOption = optionList[selectedValue];\n    if (selectedOption.hasOwnProperty('meta') && selectedOption.meta.hasOwnProperty('s3Url')) {\n      return selectedOption.meta.s3Url;\n    }\n  \n    return '';\n  };\n\n  export default getApplicationUrlHelper ","import { useEffect } from 'react';\n\nconst useSelectedDevicesStatus = (\n  selectedDevices,\n  setAreDevicesBusy,\n  devices,\n) => {\n  useEffect(() => {\n    const filteredArray =\n      devices && devices.filter(item => selectedDevices.includes(item.serial));\n    const free =\n      filteredArray &&\n      filteredArray.every(\n        device => device?.deviceParameters?.deviceStatus === 'free',\n      );\n    setAreDevicesBusy(free);\n  }, [selectedDevices, setAreDevicesBusy, devices]);\n};\n\nexport default useSelectedDevicesStatus;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useDevicesLoadInterval = (\n  isMobileTesting,\n  testExecutionActions,\n  platform,\n) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const loadDevices = () => {\n      dispatch(\n        testExecutionActions.loadDeviceList({\n          testType: isMobileTesting\n            ? 'app-automation,mobile-interact'\n            : 'lr-automation,lr-interact',\n          platform: platform,\n        }),\n      );\n    };\n    loadDevices();\n\n    let intervalId;\n    // Set up the interval to call the saga every 15 seconds\n\n    intervalId = setInterval(() => {\n      loadDevices();\n    }, 15000);\n\n    return () => {\n      intervalId && clearInterval(intervalId);\n    };\n  }, [dispatch, isMobileTesting, platform, testExecutionActions]);\n};\n\nexport default useDevicesLoadInterval;\n","import { Flex, Text } from '@chakra-ui/react';\nimport React, { useCallback } from 'react';\n\n// interface propsType{\n//     setCountMonth?:function;\n//     countMonth?:number;\n// }\n\nfunction MonthsCounter({ setCountMonth, countMonth }) {\n  const incrementCountHandler = useCallback(() => {\n    if (countMonth <= 100) {\n      setCountMonth(countMonth + 1);\n    }\n  }, [countMonth]);\n\n  const decrementCountHandler = () => {\n    if (countMonth > 1) {\n      setCountMonth(countMonth - 1);\n    }\n  };\n\n  return (\n    <Flex\n      w=\"55px\"\n      h=\"25px\"\n      bg=\"blue1\"\n      borderRadius=\"5px\"\n      align=\"center\"\n      justifyContent=\"space-around\"\n      fontSize=\"20px\"\n      color=\"white\"\n    >\n      <Text\n        fontSize=\"20px\"\n        padding=\"5px\"\n        cursor=\"pointer\"\n        onClick={incrementCountHandler}\n      >\n        +\n      </Text>{' '}\n      <Text fontSize=\"16px\">{countMonth}</Text>{' '}\n      <Text\n        padding=\"5px\"\n        onClick={decrementCountHandler}\n        cursor=\"pointer\"\n        fontSize=\"20px\"\n      >\n        -\n      </Text>\n    </Flex>\n  );\n}\n\nexport default MonthsCounter;\n","//@ts-nocheck\nimport { Box, Flex, Icon, Img, Td, Tr } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport DeviceCounter from './DeviceCounter';\nimport deleteIcon from '../assets/Icon awesome-trash-alt.svg';\nimport MonthsCounter from './MonthsCounter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMyDevicesSlice } from '../slice';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport { selectRemoveDeviceId } from 'app/pages/Xcui/slice/selector';\nimport { getStatusColorDevice } from 'utils/gernricfunction';\n\nfunction TableRowData({ item, isDelete, isCheckBox, isLaunch, isMonth }) {\n  const { actions } = useMyDevicesSlice();\n  const { testExecutionActions } = useTestExecutionSlice();\n  const [countDevice, setCountDevice] = useState(0);\n  const [countMonth, setCountMonth] = useState(1);\n  const removeID = useSelector(selectRemoveDeviceId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (countDevice) {\n      dispatch(\n        testExecutionActions.addTestDevices({\n          id: item.serial,\n          count: countDevice,\n          deviceInfo: item,\n        }),\n      );\n    }\n  }, [countDevice, dispatch]);\n\n  useEffect(() => {\n    if (countDevice) {\n      if (item.serial === removeID) {\n        setCountDevice(0);\n        setCountMonth(1);\n      }\n    }\n  }, [removeID]);\n\n  const removeDeviceHandler = removeID => {};\n\n  return (\n    <>\n      <Tr\n        data-device-id={item.serial}\n        data-device-location={item.location}\n        _hover={{ background: 'grey14' }}\n        className=\"hoverRow\"\n      >\n        {/* {console.log({id : item.id , deviceCount: countDevice , month : countMonth})} */}\n        <Td minWidth=\"20px\" paddingLeft=\"0px\" paddingRight=\"0px\" padding=\"5px\">\n          <Box\n            borderRadius=\"50%\"\n            width=\"10px\"\n            h=\"10px\"\n            title={item.deviceParameters.deviceStatus}\n            bg={`${getStatusColorDevice(item.deviceParameters)}`}\n          ></Box>\n        </Td>\n        {/* data for table */}\n\n        <Td paddingLeft=\"15px\" padding=\"5px\">\n          {item.brand}\n        </Td>\n        <Td padding=\"5px\">{item.modelName}</Td>\n        <Td padding=\"5px\">{item.osVersion}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.network}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.mobile}</Td>\n        <Td padding=\"5px\">{item.deviceParameters.screenSize}</Td>\n\n        <Td padding=\"5px\" paddingRight=\"0px\">\n          {item.deviceParameters.city}\n        </Td>\n        <Td padding=\"5px\" paddingRight=\"0px\">\n          {item.serial}\n        </Td>\n\n        {isMonth && (\n          <Td padding=\"3px\" paddingRight=\"0px\">\n            {countDevice > 0 && (\n              <MonthsCounter\n                countMonth={countMonth}\n                setCountMonth={setCountMonth}\n              ></MonthsCounter>\n            )}\n          </Td>\n        )}\n\n        <Td minWidth=\"55px\" padding=\"0px\" paddingLeft=\"0px\">\n          <Flex\n            position=\"relative\"\n            sx={{\n              '.hoverRow:hover &': {\n                display: 'block',\n              },\n            }}\n            //  id={`tab${item.id}`}\n\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            flex-direction=\"row\"\n            //display={countDevice ? 'block' : 'none'}\n            display=\"none\"\n          >\n            {isCheckBox && (\n              <DeviceCounter\n                deviceId={item.serial}\n                deviceInfo={item}\n                isMonth={isMonth}\n                setCountDevice={setCountDevice}\n                countDevice={countDevice}\n                isGrideView={false}\n              ></DeviceCounter>\n            )}\n            {/* {isInput && (\n                    <Flex\n                      position=\"absolute\"\n                      bg=\"white\"\n                      borderRadius=\"5px\"\n                      left=\"-55px\"\n                      top=\"-12px\"\n                    >\n                      <InputComponent\n                        title=\"mon(s)\"\n                        padding=\"2px\"\n                        height=\"25px\"\n                        type=\"number\"\n                        width=\"50px\"\n                      ></InputComponent>\n                    </Flex>\n                  )} */}\n\n            {isDelete && (\n              <Img cursor=\"pointer\" src={deleteIcon} w=\"16px\" h=\"18px\"></Img>\n            )}\n\n            {isLaunch && (\n              <Link to=\"/interacttest/1\">\n                <Icon as={FaTelegramPlane} w=\"24px\" h=\"20px\"></Icon>\n              </Link>\n            )}\n          </Flex>\n        </Td>\n      </Tr>\n    </>\n  );\n}\n\nexport default TableRowData;\n","//@ts-nocheck\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Center,\n  Checkbox,\n  Flex,\n  Icon,\n  Img,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\nimport LabelComp from 'app/components/LabelComp';\nimport { Link } from 'react-router-dom';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport DeviceCounter from './DeviceCounter';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport TableRowData from './TableRowData';\nimport { tableHeaders as headers } from 'app/pages/Interact/config';\n\nconst actionBoxShow = e => {\n  // document.getElementById(`tab${e}`).style.display = 'block';\n};\nconst actionBoxHide = e => {\n  // document.getElementById(`tab${e}`).style.display = 'none';\n};\nfunction DeviceListTable({\n  tableHeading,\n  tableData,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n}) {\n  const [getCountDevice, setSelectedDevice] = useState(0);\n\n  //console.log(filterDeviceData)\n  return (\n    <Flex\n      flexDirection=\"column\"\n      // marginTop=\"10px\"\n      //  minHeight=\"550px\"\n\n      width=\"100%\"\n      backgroundColor=\"white\"\n      padding=\"0px 5px\"\n    >\n      <Table\n        //minWidth=\"780px\"\n        fontFamily=\"Montserrat\"\n        fontWeight=\"500\"\n        variant=\"simple\"\n        // minWidth=\"750px\"\n      >\n        <Thead>\n          <Tr>\n            <Th\n              fontFamily=\"Montserrat\"\n              minWidth=\"20px\"\n              paddingLeft=\"0px\"\n              paddingRight=\"0px\"\n              padding=\"5px\"\n            ></Th>\n\n            {/*  heading for table  */}\n\n            {headers.map((item, index) => (\n              <Th\n                key={index}\n                fontFamily=\"Montserrat\"\n                textTransform=\"capitalize\"\n                color=\"grey1\"\n                minWidth=\"70px\"\n                padding=\"5px\"\n              >\n                {item}\n              </Th>\n            ))}\n\n            {isInput && (\n              <Th\n                fontFamily=\"Montserrat\"\n                minWidth=\"0px\"\n                color=\"grey1\"\n                textTransform=\"none\"\n                paddingLeft=\"0px\"\n                paddingRight=\"0px\"\n                padding=\"5px 0px\"\n              >\n                Months\n              </Th>\n            )}\n            <Th\n              fontFamily=\"Montserrat\"\n              minWidth=\"0px\"\n              color=\"grey1\"\n              textTransform=\"none\"\n              padding=\"5px 0px\"\n            >\n              {/* {isCheckBox ? 'Count' : ''} */}\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {tableData.map((item, index) => (\n            <TableRowData\n              key={index}\n              item={item}\n              isCheckBox={isCheckBox}\n              isDelete={isDelete}\n              isLaunch={isLaunch}\n              isMonth={isInput}\n            ></TableRowData>\n          ))}\n        </Tbody>\n      </Table>\n    </Flex>\n  );\n}\n\nexport default DeviceListTable;\n","//@ts-nocheck\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport React from 'react';\nimport DeviceListTable from './DeviceListTable';\nimport GridListViewLayout from './GridListViewLayout';\n\nconst tableHeading = ['make', 'os', 'serial', 'model', 'location'];\n\nfunction ListViewDevice({\n  tableData,\n  isLabels,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n  isLoading,\n  errorDeviceData,\n  height,\n}) {\n  //console.log(tableData);\n  const fileterTableData = tableData.filter(\n    device =>\n      device.deviceParameters.hasOwnProperty('deviceStatus') &&\n      device.deviceParameters.deviceStatus !== 'unavailable',\n  );\n  return (\n    <GridListViewLayout height={height} isLabels={isLabels}>\n      {isLoading ? (\n        <LoadingComponent height=\"50vh\"></LoadingComponent>\n      ) : (\n        <>\n          {errorDeviceData === 1 ? (\n            <NoContent height=\"50vh\" message=\"Something Went Wrong\"></NoContent>\n          ) : (\n            <>\n              {fileterTableData.length !== 0 ? (\n                <DeviceListTable\n                  isDelete={isDelete}\n                  isLaunch={isLaunch}\n                  isCheckBox={isCheckBox}\n                  isInput={isInput}\n                  tableData={fileterTableData}\n                  tableHeading={tableHeading}\n                ></DeviceListTable>\n              ) : (\n                <NoContent height=\"50vh\" message=\"No Data Found\"></NoContent>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </GridListViewLayout>\n  );\n}\n\nexport default ListViewDevice;\n","//@ts-nocheck\nimport React, { useState } from 'react';\nimport {\n  Text,\n  Flex,\n  HStack,\n  VStack,\n  IconButton,\n  Select,\n  Tabs,\n  Tab,\n  TabList,\n  TabPanels,\n  TabPanel,\n  useRadioGroup,\n} from '@chakra-ui/react';\nimport { PhoneIcon, DragHandleIcon } from '@chakra-ui/icons';\nimport SearchBar from 'app/pages/TestAnalytics/components/SearchBar';\nimport { FaListUl } from 'react-icons/fa';\nimport { BsGrid3X3GapFill } from 'react-icons/bs';\nimport { AiFillAndroid } from 'react-icons/ai';\nimport { FaApple } from 'react-icons/fa';\nimport CustomIconButton from 'app/pages/Appium/components/CustomIconButton';\nimport TrayDropdown from 'app/pages/Appium/components/TrayDropdown';\nimport ButtonComp from 'app/components/ButtonComp';\nimport TabButton from 'app/pages/AutomationTest/components/TabButton';\n// import { width } from '@amcharts/amcharts4/.internal/core/utils/Utils';\n\nfunction DeviceDisplayLayout({ child, child1, child2, os, hideSearchButton }) {\n  const [selectCategory, setSelectCategory] = useState('android');\n  const options =\n    os === 'ios' ? ['ios'] : os === 'android' ? ['android'] : ['andoid', 'ios']; //['andoid', 'ios'];\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'category',\n    defaultValue: 'android',\n    onChange: val => setSelectCategory(val),\n  });\n\n  const group = getRootProps();\n  return (\n    <Flex\n      color=\"grey1\"\n      fontSize=\"14px\"\n      fontFamily=\"Montserrat\"\n      fontWeight=\"500\"\n      flexDirection=\"column\"\n      padding=\"20px 5px\"\n      width=\"100%\"\n    >\n      <Tabs>\n        <Flex justifyContent=\"flex-end\" alignItems=\"center\" flexwrap=\"wrap\">\n          {/* <SearchBar width=\"330px\"></SearchBar> */}\n          <HStack>\n            {/* <TabList border=\"none\"> */}\n            {/* <Flex h=\"35px\" marginTop=\"2px\" align=\"center\"> */}\n\n            {child}\n            {/* <TabButton\n          title=\"Devices\"\n  width=\"140px\">\n          </TabButton> */}\n            {/* </Flex> */}\n            {/* <Flex h=\"35px\" marginTop=\"2px\" align=\"center\"> */}\n            {/* <IconButton\n                borderRadius=\"3px\"\n                _focus={{ boxShadow: ' 0 0 0 white' }}\n                _selected={{ color: 'blue1' }}\n                w=\"40px\"\n                h=\"35px\"\n                aria-label=\"Search database\"\n                icon={<AiFillAndroid />}\n              />\n              <IconButton\n                borderRadius=\"3px\"\n                _selected={{ color: 'blue1' }}\n                _focus={{ boxShadow: ' 0 0 0 white' }}\n                w=\"40px\"\n                h=\"35px\"\n                aria-label=\"Search database\"\n                icon={<FaApple />}\n              /> */}\n\n            {/* <HStack {...group} spacing=\"0px\">\n                {options.map(value => {\n                  const radio = getRadioProps({ value });\n                  return (\n                    <CustomIconButton\n                      height=\"35px\"\n                      width=\"40px\"\n                      key={value}\n                      {...radio}\n                    >\n                      {value}\n                    </CustomIconButton>\n                  );\n                })}\n              </HStack> */}\n\n            {/* <TrayDropdown></TrayDropdown> */}\n            {/* <TabButton\n          title=\"Trays\"\n           width=\"140px\"\n           >\n          </TabButton> */}\n            {/* </Flex>\n             */}\n            {/* </TabList> */}\n\n            <Flex align=\"center\">\n              <TabList border=\"none\">\n                {/* <Tab \n                  disabled={true}\n                  borderBottom=\"none\"\n                  _focus={{ boxShadow: ' 0 0 0 white' }}\n                  padding=\"0\"\n                  _selected={{ color: 'blue1' }}\n                >\n                  <IconButton\n                    borderRadius=\"3px\"\n                     as=\"div\"\n                    // border=\".2px solid #C8C8C8\"\n                    _focus={{ boxShadow: ' 0 0 0 white' }}\n                    w=\"40px\"\n                    h=\"36px\"\n                    aria-label=\"Search database\"\n                    icon={<BsGrid3X3GapFill />}\n                  />\n                </Tab> */}\n                <Tab\n                  borderBottom=\"none\"\n                  _focus={{ boxShadow: ' 0 0 0 white' }}\n                  padding=\"0\"\n                  _selected={{ color: 'blue1' }}\n                >\n                  {!hideSearchButton && (\n                    <IconButton\n                      borderRadius=\"3px\"\n                      as=\"div\"\n                      _focus={{ boxShadow: ' 0 0 0 white' }}\n                      w=\"40px\"\n                      h=\"36px\"\n                      // border=\".2px solid #C8C8C8\"\n                      aria-label=\"Search database\"\n                      icon={<FaListUl />}\n                    />\n                  )}\n                </Tab>\n              </TabList>\n            </Flex>\n\n            <Flex\n              w=\"200\"\n              justifyContent=\"space-betweens\"\n              color=\"grey\"\n              fontWeight=\"500\"\n              alignItems=\"center\"\n              alignSelf=\"end\"\n            >\n              {/* <Text marginRight=\"10px\" color=\"grey13\">\n                Group By\n              </Text>\n              <Select align=\"right\" width=\"110px\" h=\"35px\" placeholder=\"Make\">\n              </Select>{' '} */}\n            </Flex>\n          </HStack>\n        </Flex>\n\n        <TabPanels height=\"100%\">\n          {/* <TabPanel padding=\"0\" margin=\"0\" minHeight=\"100vh\">\n            {child1}\n          </TabPanel> */}\n\n          <TabPanel padding=\"0\" margin=\"0\" minHeight=\"100vh\">\n            {child2}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n\nexport default DeviceDisplayLayout;\n","//@ts-nocheck\nimport { Box, Button, Checkbox, Flex, Icon, Img, Text } from '@chakra-ui/react';\nimport { CardComponent as Card } from 'app/pages/TestAnalytics/components/Card';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport display from '../../../../styles/Assets/display1.png';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport deleteIcon from '../assets/Icon awesome-trash-alt.svg';\nimport DeviceCounter from './DeviceCounter';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\n\nfunction DeviceCard({\n  connection,\n  width,\n  margin,\n  hoverObject,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  isInput,\n  cardData,\n  selectArray,\n  selectedDeviceArray,\n}) {\n  // const [getCountDevice, setSelectedDevice] = useState(0);\n  const [countDevice, setCountDevice] = useState(0);\n  //   const actionBoxShow = e => {\n  //     document.getElementById(`box${e}`).style.display = 'block';\n  //   };\n  //   const actionBoxHide = e => {\n  //     document.getElementById(`box${e}`).style.display = 'none';\n  //   };\n\n  // const hoverObject = connection\n  //   ? null\n  //   : {\n  //       backgroundColor: '#B5B5C3',\n  //     };\n\n  // const renderIdPage = id => {\n  //   const cardId = id;\n  // };\n\n  const clickHandler = () => {\n    {\n      isDelete && isDelete(e.target.id);\n    }\n    {\n      isCheckBox && isLaunch(e.target.id);\n    }\n    {\n      isLaunch && isLaunch(e.target.id);\n    }\n\n    //selectedDeviceArray.push({deviceId : cardData.id, count : countDevice})\n  };\n  //console.log(\"array\"+selectArray)\n  // console.log(cardDart.id , countDevice)\n\n  return (\n    <>\n      {cardData && (\n        <Flex\n          width={width || '235px'}\n          hoverObject={hoverObject}\n          padding=\"1\"\n          marginRight=\"5px\"\n          marginBottom=\"5px\"\n          margin={margin}\n          border=\"1px solid\"\n          borderColor=\"white3\"\n          borderLeft=\"3px solid\"\n          borderLeftColor=\"red1\"\n          borderRadius=\"3px\"\n          _hover={{ background: 'grey14' }}\n          position=\"relative\"\n          background={countDevice ? 'grey14' : ''}\n          className=\"deviceCard\"\n          onCLick={clickHandler}\n        >\n          {/* // onMouseOver={() => actionBoxShow(cardData.id)}\n            // onMouseOut={() => actionBoxHide(cardData.id)}\n           // position=\"relative\"\n           // color=\"grey13\"\n          //  fontWeight=\"500\"\n           // fontSize=\"14px\"\n            // className=\"cardId\" */}\n          {/* {console.log({ id: cardData.id, count: countDevice })} */}\n\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            id={`box${cardData.id}`}\n            top=\"35px\"\n            right=\"107px\"\n            // w=\"15px\"\n            // h=\"15px\"\n            sx={{\n              '.deviceCard:hover &': {\n                display: 'block',\n              },\n            }}\n            position=\"absolute\"\n            display={countDevice ? 'block' : 'none'}\n          >\n            {isCheckBox && (\n              <DeviceCounter\n                setCountDevice={setCountDevice}\n                countDevice={countDevice}\n                isGrideView={true}\n              ></DeviceCounter>\n            )}\n            {/* {isInput && (\n              <InputComponent\n                title=\"mon(s)\"\n                padding=\"2px\"\n                height=\"25px\"\n                type=\"number\"\n                width=\"55px\"\n              ></InputComponent>\n            )} */}\n            {isDelete && (\n              <Img cursor=\"pointer\" src={deleteIcon} w=\"16px\" h=\"18px\"></Img>\n            )}\n\n            {isLaunch && (\n              <Link to=\"/interacttest/1\">\n                <Icon as={FaTelegramPlane} w=\"24px\" h=\"24px\"></Icon>\n              </Link>\n            )}\n\n            {/* {clickHandler && <Checkbox colorScheme=\"red\"></Checkbox>}\n          {clickHandler && (\n            <Link to=\"/interacttest/{cardId}\">\n              <Img src={goIcon} alt=\"go\"></Img>\n            </Link>\n          )} */}\n          </Flex>\n          <Flex align=\"center\" padding=\"0px 5px\">\n            <Img src={display} w=\"45px\" h=\"76px\" alt=\"display\"></Img>\n          </Flex>\n          <Flex paddingLeft=\"5px\" flexDirection=\"column\" width=\"100%\">\n            <Text textTransform=\"capitalize\">{cardData.model} </Text>\n            <Text>\n              {cardData.osName} {cardData.osVersion}\n            </Text>\n            <Text>{cardData.deviceLocation}</Text>\n            <Text>{cardData.networkProvider}</Text>\n          </Flex>\n\n          {/* connetion  status  */}\n          <Flex justify=\"end\" fontSize=\"14px\" paddingRight=\"5px\">\n            {connection}\n          </Flex>\n        </Flex>\n      )}\n    </>\n  );\n}\n\nexport default DeviceCard;\n","//@ts-nocheck\nimport { Flex, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport DeviceCard from './DeviceCard';\nlet selectArray = [];\nfunction GrideViewRow({\n  Make,\n  tableData,\n  hoverObject,\n  isDelete,\n  isCheckBox,\n  isLaunch,\n  isInput,\n  selectedDeviceArray,\n}) {\n  // console.log(selectArray);\n  return (\n    <Flex\n      flexDirection=\"column\"\n      marginTop=\"10px\"\n      color=\"grey13\"\n      fontWeight=\"500\"\n      overflow=\"hidden\"\n    >\n      <Text>{Make}</Text>\n      <Flex\n        alignContent=\"center\"\n        justifyContent=\"flex-start\"\n        flexWrap=\"wrap\"\n        width=\"100%\"\n      >\n        {tableData.map(card => (\n          <DeviceCard\n            isInput={isInput}\n            isLaunch={isLaunch}\n            isDelete={isDelete}\n            isCheckBox={isCheckBox}\n            cardData={card}\n            selectArray={selectArray}\n            selectedDeviceArray={selectedDeviceArray}\n            //  hoverObject={hoverObject}\n            // margin=\"0px 5px 0px 0px \"\n          ></DeviceCard>\n        ))}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default GrideViewRow;\n","//@ts-nocheck\nimport { map } from '@amcharts/amcharts4/.internal/core/utils/Iterator';\nimport React from 'react';\nimport GrideViewRow from './GrideViewRow';\nimport GridListViewLayout from './GridListViewLayout';\n\nfunction GridViewDevice({\n  tableData,\n  isLabels,\n  hoverObject,\n  isCheckBox,\n  isDelete,\n  isLaunch,\n  selectedDeviceArray,\n}) {\n  const samsung = tableData.filter(row => row.manufacturer == 'Samsung');\n  const redmi = tableData.filter(row => row.manufacturer == 'Redmi');\n  const oppo = tableData.filter(row => row.manufacturer === 'Oppo');\n  const lenovo = tableData.filter(row => row.manufacturer === 'Lenovo');\n  //console.log(samsung);\n  return (\n    <GridListViewLayout isLabels={isLabels}>\n      {samsung.length > 0 && (\n        <GrideViewRow\n          isCheckBox={isCheckBox}\n          isLaunch={isLaunch}\n          Make=\"Samsung\"\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={samsung}\n          selectedDeviceArray={selectedDeviceArray}\n        ></GrideViewRow>\n      )}\n      {redmi.length > 0 && (\n        <GrideViewRow\n          isLaunch={isLaunch}\n          isCheckBox={isCheckBox}\n          Make=\"RedMi\"\n          selectedDeviceArray={selectedDeviceArray}\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={redmi}\n        ></GrideViewRow>\n      )}\n      {oppo.length > 0 && (\n        <GrideViewRow\n          isLaunch={isLaunch}\n          isDelete={isDelete}\n          isCheckBox={isCheckBox}\n          Make=\"Oppo\"\n          selectedDeviceArray={selectedDeviceArray}\n          hoverObject={hoverObject}\n          tableData={oppo}\n        ></GrideViewRow>\n      )}\n      {lenovo.length > 0 && (\n        <GrideViewRow\n          selectedDeviceArray={selectedDeviceArray}\n          isLaunch={isLaunch}\n          isCheckBox={isCheckBox}\n          Make=\"Lenovo\"\n          isDelete={isDelete}\n          hoverObject={hoverObject}\n          tableData={lenovo}\n        ></GrideViewRow>\n      )}\n    </GridListViewLayout>\n  );\n}\n\nexport default GridViewDevice;\n"],"sourceRoot":""}