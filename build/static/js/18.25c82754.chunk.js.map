{"version":3,"sources":["app/pages/MyDevices/slice/selector.ts","app/pages/Appium/components/CustomIconButton.tsx","app/pages/UiAutomator/components/SelectTrayOption.tsx","app/pages/Xcui/Features/XcUiMozarkTesting.tsx","utils/getTrayFromList.ts","app/pages/ManageScheduleTest/slice/types.ts","app/pages/ManageScheduleTest/slice/saga.ts","app/pages/ManageScheduleTest/slice/index.ts","app/pages/ManageScheduleTest/components/ExpandedRow.tsx","app/pages/ManageScheduleTest/components/TableExpandRow.tsx","app/pages/ManageScheduleTest/slice/selector.ts","app/pages/ManageScheduleTest/components/TableComp.tsx","app/pages/ManageScheduleTest/components/ManageScheduleTable.tsx","app/pages/ManageScheduleTest/index.tsx"],"names":["selectSlice","state","myDevices","initialState","selectMyDevicesData","createSelector","myDevicesData","selectedDeviceForTray","myDevicesLoading","myDevicesError","traySelectDevice","selectedDeviceTrayName","devicesTrayName","selecteTrayList","deviceTrayList","selecteTrayListError","deviceListTrayError","selecteTrayDevices","TrayDeviceData","selectCreateTrayLoading","createTrayLoading","selectCreateTrayError","createTrayResponseError","selectDeleteTrayLoading","deleteTrayLoading","selectUpdateTrayLoading","updateTrayLoading","selectUpdateTrayError","updateTrayResponseError","selectFetchTrayListLoading","loadingTrayList","selectCreateTrayResponse","createTrayResponseLoaded","selectDeleteTrayResponse","deleteTrayResponseLoaded","selectDeleteTrayError","deleteTrayResponseError","selectUpdateTrayResponse","updateTrayResponseLoaded","selectLoadTrayDevicesError","TrayDataLoadError","CustomIconButton","props","getInputProps","getCheckboxProps","useRadio","input","checkbox","_jsxs","Box","as","children","_jsx","Center","align","justify","cursor","bg","border","borderRadius","w","width","h","height","color","_checked","Icon","title","FaApple","_Fragment","AiFillAndroid","VscClearAll","SelectTrayOption","_ref","selectValue","setSelectValue","selectOptions","type","Select","placeholder","size","borderColor","value","onChange","e","target","_focus","boxShadow","map","item","index","trayName","name","timeIntervalValue","XcUiMozarkTesting","getTabIndex","getInterval","setIntervalTime","useState","getMaxTestDuration","setMaxTestDuration","startDate","setStartDate","setHours","setMinutes","Date","getMinutes","getHours","endDate","setEndDate","getMessageFlag","setMessageFlag","activeDevicePopup","setActiveDevicePopup","projectName","setProjectName","getPackageName","setPackageName","selectProject","setSelectProject","selectAppBuild","setSelectAppBuild","selectScript","setSelectScript","selectVisualScript","setSelectVisualScript","appbuildFile","setAppbuildFile","getSelectedDeviceList","setSelectedDeviceList","getSelectedDeviceListXcui","setSelectedDeviceListXcui","systemDebugLogs","setSystemDebugLogs","automationExecutionLogs","setAutomationExecutionLogs","liveLogs","setLiveLogs","recordDeviceScreen","setRecordDeviceScreen","recordNetworkCalls","setRecordNetworkCalls","captureDataUsageMetrics","setCaptureDataUsageMetrics","dataUsageTimeInterval","setDataUsageTimeInterval","recordMemory","setRecordMemory","recordCPU","setRecordCPU","recordBattery","setRecordBattery","recordGraphics","setRecordGraphics","areDevicesBusy","setAreDevicesBusy","recordDeviceNetworkPackets","setRecordDeviceNetworkPackets","recordDeviceScreenShots","setRecordDeviceScreenShots","getMd5SumAppBuild","setMd5SumAppBuild","getMd5SumScript","setMd5SumScript","xcuiMozarkTestingPopupCard","setXcuiMozarkTestingPopupCard","isVisEnabled","setVisEnable","getAddedKey","setAddedKey","activePopupCard","setActivePopupCard","selectProjectOptionList","useSelector","selectProjectList","testExecutionActions","useTestExecutionSlice","uploadAppBuildUrl","selectUploadApplicationUrl","createdPojectResponse","selectCreatedProject","createdPojectError","selectCreateProjectError","selectAppBuildListOptions","selectAppBuildListState","selectScriptListOptions","selectScriptState","uploadApplicationUrlError","selectuploadApplicationUrlError","dispatch","useDispatch","toast","useToast","selectedDevices","selectTestExecutionSelectedDevice","getListingDevices","selectListingDevices","getScheduleTestResponse","selectScheduleTestResponse","getScheduleTestResponseError","selectScheduleTestResponseError","loadingCreateProject","selectCreateProjectLoading","loadingUploadApplicationFile","selectUploadingApplicationLoading","isMobileTesting","usePlatformtypeHook","getApplicationType","setApplicationType","getVisualUrl","setVisualUrl","loadingExecuteSchedule","selectScheduleExecuteTestLoading","loadingFileUpload","selectApplicationFileUploadLoading","fileUploadResponse","selectApplicationFileUploadResponse","fileUploadResponseError","selectApplicationFileUploadError","getUploadProgessValue","selectUploadFileProgressValue","busyDeviceSlots","selectBusyDeviceSlots","deviceListListLoading","selectDeviceListLoading","selectTrayOptionListXcui","selectVisualScriptList","selectTestExcutionState","selectTrayValue","setTraySelectValue","history","useNavigate","deviceListDataError","selectDeviceListingError","actions","useMyDevicesSlice","getIosDevicesList","filter","device","platform","selectTrayOptionList","useEffect","uploadFileProgress","BusyDeviceSlotsListLoaded","addOptionalKeyValue","resetTestDevices","trayDataLoaded","hasOwnProperty","status","paramStringAppBuild","fileCategory","testType","loadSelectAppBuildList","paramStringScript","loadSelectScriptList","loadSelectVisualScriptList","isClosable","position","appBuildApplicationFileUploaded","appBuildFileUploadError","message","setTimeout","ROUTES","MOBILE_SESSION_SUMMARY","setStatusIndex","testExecutionDataLoaded","testExecutionDataError","useDevicesLoadInterval","useSelectedDevicesStatus","loadDeviceTrayList","loadSelectTestExecutionProjectList","testExecutionProjectCreated","createTestExecutionProjectError","paramStringVisualScript","filerequestData","filename","project","md5","applicationType","loadUploadApplication","scriptUploadHandler","file","fileType","files","split","pop","getMd5SumFiles","response","loadUploadAppBuildFile","url","data","uploadUrl","uploadApplicationResponse","uploadApplicationError","parseInt","devices","valueOf","scheduleAutomationTestHandler","scheduleType","length","optionValue","getOptionalParam","newObject","Object","key","keyName","object","trim","assign","devicebusy","validateBusyDevice","dateTimeConverterWithTimeZone","getTime","description","join","config","deviceId","testConfiguration","captureHAR","captureCPUMetrics","captureMemoryMetrics","captureBatteryMetrics","captureGraphicsMetrics","captureDeviceScreenShots","captureDeviceNetworkPackets","captureAutomationLogs","captureSystemDebugLogs","captureLiveLogs","scheduleConfiguration","startTime","endTime","interval","testAction","pre","post","testParameters","maxTestDuration","testFramework","packageName","getTrayFromList","visualMonitoringEnabled","visualTestApplicationUrl","getApplicationUrlHelper","applicationUrl","testApplicationUrl","executionType","loadTestExecutionData","fileParameters","xctestrunFileUrl","getVisualScript","meta","s3Url","removeKeyValueHandler","objectId","refreshApplicationList","Flex","flexDirection","LoadingComponent","top","isOverLay","Stack","spacing","padding","LabelFieldComponent","label","SelectComponent","Text","InputComponent","setInputValue","inputValue","ButtonComp","buttonHandler","createProjectHandler","match","createTestExecutionProject","RefreshIconButton","clickHandler","UploadButton","validate","uploadButtonHandler","enableProgress","progressValue","Switch","checked","DashedButton","selectDeviceButtonHandler","addSelectedDevices","textTransform","SelectDevicePopup","deviceOs","selectedDeviceHandler","DeviceIds","id","tableData","selectedDeviceList","isLoading","errorDeviceData","marginTop","whiteSpace","flex","HStack","CheckboxComp","setCheckedValue","maxWidth","InfoComponent","labelmessage","concat","LaunchIconButton","viewCode","preventDefault","isDisabled","fontWeight","backgroundColor","marginLeft","InputDateTime","selectedDate","setSelectDate","ToggleSelectInput","isShadow","PopupCardDetail","isOpen","onClose","overflowY","css","boreder","KeyValueComponent","getValue","isMandatory","setValue","justifyContent","SelectValueComponent","isChecked","NewKeyValueComponent","objectData","fontSize","margin","async","saveOptionalParamHandler","options","ManageScheduleErrorType","BASE_URL","REACT_APP_AUTOMATION_TESTING_BASE_URL","getManageScheduleData","param","idToken","GetIdToken","idString","payload","testTypeString","requestURL","page","pageSize","method","headers","Authorization","manageScheduleData","call","request","put","managePageCount","count","manageScheduleDataLoaded","list","manageScheduleError","RESPONSE_ERROR","deleteManageScheduleData","deleteId","redirect","manageSheduleDeleteResponse","deleteManageSheduleResponse","deleteManageScheduleError","err","manageScheduleSaga","takeLatest","loadManageSchedules","loadDeleteSchedule","loading","loadingScheduleDelete","deleteScheduleError","deleteSheduleResponse","slice","createSlice","reducers","action","schedule","scheduleStatus","Math","ceil","manageScheduleActions","useManageScheduleSlice","useInjectReducer","reducer","useInjectSaga","saga","ExpandedRow","testDetails","leftIcon","row","Tr","uuid","_hover","Td","minWidth","paddingRight","testStatus","stringSaprater","dateTimeConverter","dateTimeConverterWithOffset","testScheduledTime","alignItems","alignContent","onClick","redicrectTestsessionPageHandler","LR_SESSION_SUMMARY","FaTelegramPlane","TableExpandRow","editHandler","deleteHandler","pageIndex","expandHandler","setExpandHandler","expandRowHandler","_ref2","cells","original","paddingLeft","FiPlusSquare","FiMinusSquare","cell","testExecutions","render","FaTrashAlt","Th","fontFamily","manageSchedule","selectManageScheduleData","selectLoadingManageSchedule","selectPageCount","selectManageScheduleDataError","selectManageScheduleDeleteResponse","selectManageScheduleDeleteError","selectManageScheduleDeleteLoading","TableComp","columns","fetchData","rightHoverIcon","inputRef","useRef","onOpen","useDisclosure","setDeleteId","getPageCount","manageScheduleDeleteLoading","getDeleteScheduleResponse","getDeleteScheduleError","getTableProps","getTableBodyProps","headerGroups","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPage","useTable","manualPagination","usePagination","CustomTable","variant","Thead","headerGroup","getHeaderGroupProps","column","getHeaderProps","Tbody","i","marginRight","className","display","disabled","paddingBottom","Input","textAlign","borderBottom","borderBottomColor","ref","onFocus","select","onKeyUp","Number","NoContent","PopupComponent","buttonHandler1","buttonTitle1","buttonTitle2","buttonHandler2","deleteScheduleHandler","justifyItems","ManageScheduleTable","getEditSchedule","setEditSchedule","setInterval","React","useMemo","Header","accessor","editScheduleHandler","Spacer","ManageScheduleTest"],"mappings":"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","file":"static/js/18.25c82754.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { initialState } from '.';\n\nimport { RootState } from 'types';\n\n// First select the relevant part from the state\nconst selectSlice = (state: RootState) => state.myDevices || initialState;\n\nexport const selectMyDevicesData = createSelector(\n  [selectSlice],\n  state => state.myDevicesData,\n);\n\nexport const selectLoadingMyDevices = createSelector(\n  [selectSlice],\n  state => state.myDevicesLoading,\n);\nexport const selectMyDevicesError = createSelector(\n  [selectSlice],\n  state => state.myDevicesError,\n);\n\nexport const selectDeviceCount = createSelector(\n  [selectSlice],\n  state => state.traySelectDevice,\n);\n\nexport const selectedDeviceForTray = createSelector(\n  [selectSlice],\n  state => state.traySelectDevice,\n);\nexport const selectedDeviceTrayName = createSelector(\n  [selectSlice],\n  state => state.devicesTrayName,\n);\nexport const selecteTrayList = createSelector(\n  [selectSlice],\n  state => state.deviceTrayList,\n);\nexport const selecteTrayListError = createSelector(\n  [selectSlice],\n  state => state.deviceListTrayError,\n);\nexport const selecteTrayDevices = createSelector(\n  [selectSlice],\n  state => state.TrayDeviceData,\n);\nexport const selectCreateTrayLoading = createSelector(\n  [selectSlice],\n  state => state.createTrayLoading,\n);\nexport const selectCreateTrayError = createSelector(\n  [selectSlice],\n  state => state.createTrayResponseError,\n);\nexport const selectDeleteTrayLoading = createSelector(\n  [selectSlice],\n  state => state.deleteTrayLoading,\n);\nexport const selectUpdateTrayLoading = createSelector(\n  [selectSlice],\n  state => state.updateTrayLoading,\n);\nexport const selectUpdateTrayError = createSelector(\n  [selectSlice],\n  state => state.updateTrayResponseError,\n);\nexport const selectFetchTrayListLoading = createSelector(\n  [selectSlice],\n  state => state.loadingTrayList,\n);\nexport const selectCreateTrayResponse = createSelector(\n  [selectSlice],\n  state => state.createTrayResponseLoaded,\n);\nexport const selectDeleteTrayResponse = createSelector(\n  [selectSlice],\n  state => state.deleteTrayResponseLoaded,\n);\nexport const selectDeleteTrayError = createSelector(\n  [selectSlice],\n  state => state.deleteTrayResponseError,\n);\nexport const selectUpdateTrayResponse = createSelector(\n  [selectSlice],\n  state => state.updateTrayResponseLoaded,\n);\nexport const selectLoadTrayDevicesError = createSelector(\n  [selectSlice],\n  state => state.TrayDataLoadError,\n);\n\n// export const selectDeletedUser = createSelector(\n//   [selectSlice],\n//   state => state.deleteUserDetail,\n// );\n// export const selectDeletedUserError = createSelector(\n//   [selectSlice],\n//   state => state.deletteUserError,\n// );\n\n// export const selectToastMessageUser = createSelector(\n//   [selectSlice],\n//   state => state.toastMessage,\n// );\n","// @ts-nocheck\nimport {\n  Box,\n  Center,\n  Flex,\n  IconButton,\n  useRadio,\n  Icon,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { AiFillAndroid } from 'react-icons/ai';\nimport { FaApple } from 'react-icons/fa';\nimport { RiRefreshLine } from 'react-icons/ri';\nimport { VscClearAll } from 'react-icons/vsc';\n\nfunction CustomIconButton(props) {\n  const { getInputProps, getCheckboxProps } = useRadio(props);\n\n  const input = getInputProps();\n  const checkbox = getCheckboxProps();\n\n  //console.log(checkbox);\n  // console.log(input);\n\n  return (\n    <Box as=\"label\">\n      <input {...input} />\n      {/* <IconButton\n         {...checkbox}\n        aria-label=\"androidIcon\"\n        bg=\"white\"\n        borderRadius=\"3px\"\n        w=\"39px\"\n        h=\"39px\"\n        color=\"grey5\"\n        border=\".2px solid #C8C8C8\"\n        _focus={{ boxShadow: 'none' }}\n        _checked={{ bg: 'white3', color: 'blue1' }}\n        icon={   props.children === \"ios\" ?  <FaApple /> : <AiFillAndroid />  }\n      /> */}\n      <Center\n        align=\"center\"\n        justify=\"center\"\n        {...checkbox}\n        cursor=\"pointer\"\n        bg={props.children && 'white'}\n        border={props.children && '.2px solid #C8C8C8'}\n        borderRadius=\"3px\"\n        w={props.width || '39px'}\n        h={props.height || '39px'}\n        color=\"grey5\"\n        _checked={\n          props.children && {\n            bg: 'white3',\n            color: 'blue1',\n            border: '1px solid #F3F6F9',\n          }\n        }\n      >\n        {props.children === 'ios' ? (\n          <Icon title=\"ios\" width=\"16px\" as={FaApple} height=\"18px\"></Icon>\n        ) : (\n          <>\n            {props.children === 'android' ? (\n              <Icon\n                title=\"android\"\n                width=\"16px\"\n                as={AiFillAndroid}\n                height=\"20px\"\n              ></Icon>\n            ) : (\n              <Icon\n                title=\"clear\"\n                width=\"16px\"\n                as={VscClearAll}\n                height=\"20px\"\n              ></Icon>\n            )}\n          </>\n        )}\n      </Center>\n    </Box>\n  );\n}\n\nexport default CustomIconButton;\n","// @ts-nocheck\nimport { Select } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction SelectTrayOption({\n  title,\n  selectValue,\n  setSelectValue,\n  selectOptions,\n  type,\n  width,\n}) {\n  return (\n    <Select\n      placeholder={title}\n      size=\"sm\"\n      width={width || '230px'}\n      color=\"grey13\"\n      h=\"34px\"\n      border=\"1px solid \"\n      borderColor=\"grey1\"\n      borderRadius=\"5px\"\n      data-select={title}\n      value={selectValue}\n      onChange={e => setSelectValue(e.target.value)}\n      _focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n    >\n      {selectOptions &&\n        selectOptions.map((item, index) => (\n          <option\n            data-select-project={\n              type === 'project' && item.trayName + '_' + index\n            }\n            key={index}\n            value={type === 'project' ? item.name : index}\n          >\n            {type === 'project' ? item.name : item.trayName}\n          </option>\n        ))}\n    </Select>\n  );\n}\n\nexport default SelectTrayOption;\n","//@ts-nocheck\nimport {\n  Flex,\n  HStack,\n  Icon,\n  Stack,\n  Text,\n  useToast,\n  Switch,\n} from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport DashedButton from 'app/components/DashedButton';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport LaunchIconButton from 'app/pages/Appium/components/LaunchIconButton';\nimport SelectComponent from 'app/pages/Appium/components/SelectComponent';\nimport UploadButton from 'app/pages/Appium/components/UploadButton';\nimport LabelFieldComponent from 'app/pages/AutomationTest/components/LabelFieldComponent';\nimport React, { useEffect, useState } from 'react';\nimport SelectDevicePopup from 'app/pages/Appium/components/SelectDevicePopup';\nimport CustomIconButton from 'app/pages/Appium/components/CustomIconButton';\nimport InfoComponent from 'app/pages/Appium/components/InfoComponent';\nimport InputDateTime from 'app/pages/Appium/components/InputDateTime';\nimport PopupCardDetail from 'app/pages/Appium/components/PopupCardDetail';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectAppBuildListState,\n  selectCreatedProject,\n  selectCreateProjectError,\n  selectListingDevices,\n  selectProjectList,\n  selectScriptState,\n  selectTestExecutionSelectedDevice,\n  selectUploadApplicationUrl,\n  selectuploadApplicationUrlError,\n  selectScheduleTestResponse,\n  selectScheduleTestResponseError,\n  selectCreateProjectLoading,\n  selectUploadingApplicationLoading,\n  selectScheduleExecuteTestLoading,\n  selectApplicationFileUploadLoading,\n  selectApplicationFileUploadResponse,\n  selectApplicationFileUploadError,\n  selectUploadFileProgressValue,\n  selectBusyDeviceSlots,\n  selectgetOptionalKeyValue,\n  selectDeviceListLoading,\n  selectDeviceListingError,\n  selectTestExcutionState,\n} from '../slice/selector';\nimport { useTestExecutionSlice } from '../slice';\n\nimport CheckboxComp from '../../UiAutomator/components/CheckboxComp';\nimport {\n  dateTimeConverterWithTimeZone,\n  getMd5SumFiles,\n  validateBusyDevice,\n} from 'utils/gernricfunction';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport { useNavigate } from 'react-router-dom';\nimport SelectValueComponent from 'app/pages/UiAutomator/components/SelectValueComponent';\nimport ToggleSelectInput from 'app/pages/UiAutomator/components/ToggleSelectInput';\nimport KeyValueComponent from 'app/pages/UiAutomator/components/KeyValueComponent';\nimport NewKeyValueComponent from 'app/pages/UiAutomator/components/NewKeyValueComponent';\nimport { selecteTrayList } from 'app/pages/MyDevices/slice/selector';\nimport { useMyDevicesSlice } from 'app/pages/MyDevices/slice';\nimport SelectTrayOption from 'app/pages/UiAutomator/components/SelectTrayOption';\nimport { BiRefresh } from 'react-icons/bi';\nimport { HiOutlineRefresh } from 'react-icons/hi';\nimport getApplicationUrlHelper from 'utils/getFileUrlFromList';\nimport getTrayFromList from 'utils/getTrayFromList';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\nimport ROUTES from 'app/constants/Routes';\nimport RefreshIconButton from 'app/components/RefreshIconButton';\nimport useSelectedDevicesStatus from 'app/utils/useSelectedDevicesStatus';\nimport useDevicesLoadInterval from 'app/utils/useDevicesLoadInterval';\n\nexport const timeIntervalValue = [\n  5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95,\n  100, 105, 115, 120,\n];\n\nconst XcUiMozarkTesting = ({ getTabIndex }) => {\n  const [getInterval, setIntervalTime] = useState(5);\n  const [getMaxTestDuration, setMaxTestDuration] = useState(10);\n  const [startDate, setStartDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n  const [endDate, setEndDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n  const [getMessageFlag, setMessageFlag] = useState(false);\n  const [activeDevicePopup, setActiveDevicePopup] = useState(false);\n  const [projectName, setProjectName] = useState('');\n  const [getPackageName, setPackageName] = useState('');\n  const [selectProject, setSelectProject] = useState('');\n  const [selectAppBuild, setSelectAppBuild] = useState();\n  const [selectScript, setSelectScript] = useState();\n  const [selectVisualScript, setSelectVisualScript] = useState();\n  const [appbuildFile, setAppbuildFile] = useState();\n  const [getSelectedDeviceList, setSelectedDeviceList] = useState([]);\n  const [getSelectedDeviceListXcui, setSelectedDeviceListXcui] = useState([]);\n  const [systemDebugLogs, setSystemDebugLogs] = useState(true);\n  const [automationExecutionLogs, setAutomationExecutionLogs] = useState(true);\n  const [liveLogs, setLiveLogs] = useState(true);\n  const [recordDeviceScreen, setRecordDeviceScreen] = useState(false);\n  const [recordNetworkCalls, setRecordNetworkCalls] = useState(false);\n  const [captureDataUsageMetrics, setCaptureDataUsageMetrics] = useState(false);\n  const [dataUsageTimeInterval, setDataUsageTimeInterval] = useState(false);\n  const [recordMemory, setRecordMemory] = useState(false);\n  const [recordCPU, setRecordCPU] = useState(false);\n  const [recordBattery, setRecordBattery] = useState(false);\n  const [recordGraphics, setRecordGraphics] = useState(false);\n  const [areDevicesBusy, setAreDevicesBusy] = useState(true);\n  const [recordDeviceNetworkPackets, setRecordDeviceNetworkPackets] =\n    useState(false);\n  const [recordDeviceScreenShots, setRecordDeviceScreenShots] = useState(true);\n  const [getMd5SumAppBuild, setMd5SumAppBuild] = useState('');\n  const [getMd5SumScript, setMd5SumScript] = useState('');\n  const [xcuiMozarkTestingPopupCard, setXcuiMozarkTestingPopupCard] =\n    useState(false);\n  const [isVisEnabled, setVisEnable] = useState(false);\n  const [getAddedKey, setAddedKey] = useState([]);\n  const [activePopupCard, setActivePopupCard] = useState('');\n  const selectProjectOptionList = useSelector(selectProjectList);\n  const { testExecutionActions } = useTestExecutionSlice();\n  const uploadAppBuildUrl = useSelector(selectUploadApplicationUrl);\n  const createdPojectResponse = useSelector(selectCreatedProject);\n  const createdPojectError = useSelector(selectCreateProjectError);\n  const selectAppBuildListOptions = useSelector(selectAppBuildListState);\n  const selectScriptListOptions = useSelector(selectScriptState);\n  const uploadApplicationUrlError = useSelector(\n    selectuploadApplicationUrlError,\n  );\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const selectedDevices = useSelector(selectTestExecutionSelectedDevice);\n  const getListingDevices = useSelector(selectListingDevices);\n  const getScheduleTestResponse = useSelector(selectScheduleTestResponse);\n  const getScheduleTestResponseError = useSelector(\n    selectScheduleTestResponseError,\n  );\n  const loadingCreateProject = useSelector(selectCreateProjectLoading);\n  const loadingUploadApplicationFile = useSelector(\n    selectUploadingApplicationLoading,\n  );\n  const isMobileTesting = usePlatformtypeHook();\n  const [getApplicationType, setApplicationType] = useState('');\n  const [getVisualUrl, setVisualUrl] = useState('');\n  const loadingExecuteSchedule = useSelector(selectScheduleExecuteTestLoading);\n  const loadingFileUpload = useSelector(selectApplicationFileUploadLoading);\n  const fileUploadResponse = useSelector(selectApplicationFileUploadResponse);\n  const fileUploadResponseError = useSelector(selectApplicationFileUploadError);\n  const getUploadProgessValue = useSelector(selectUploadFileProgressValue);\n  const busyDeviceSlots = useSelector(selectBusyDeviceSlots);\n  const deviceListListLoading = useSelector(selectDeviceListLoading);\n  const selectTrayOptionListXcui = useSelector(selecteTrayList);\n  const { selectVisualScriptList } = useSelector(selectTestExcutionState);\n\n  const [selectTrayValue, setTraySelectValue] = useState();\n  let history = useNavigate();\n  const deviceListDataError = useSelector(selectDeviceListingError);\n  const { actions } = useMyDevicesSlice();\n  const getIosDevicesList = getListingDevices.filter(\n    device => device.platform === 'ios',\n  );\n  const selectTrayOptionList = selectTrayOptionListXcui.filter(\n    item => item.platform === 'ios',\n  );\n  useEffect(() => {\n    setProjectName('');\n    setSelectProject('');\n    setSelectAppBuild('');\n    setSelectScript('');\n    setStartDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setEndDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setSelectedDeviceList([]);\n    setSelectedDeviceListXcui([]);\n    setAppbuildFile();\n    setRecordDeviceScreen(false);\n    setRecordNetworkCalls(false);\n    setRecordMemory(false);\n    setRecordCPU(false);\n    setRecordBattery(false);\n    setRecordGraphics(false);\n    setRecordDeviceScreenShots(true);\n    setSystemDebugLogs(true);\n    setLiveLogs(true);\n    setDataUsageTimeInterval(false);\n    setCaptureDataUsageMetrics(false);\n    setAutomationExecutionLogs(true);\n    setRecordDeviceNetworkPackets(false);\n    dispatch(testExecutionActions.uploadFileProgress(0));\n    dispatch(testExecutionActions.BusyDeviceSlotsListLoaded({}));\n    dispatch(testExecutionActions.addOptionalKeyValue([]));\n    dispatch(testExecutionActions.resetTestDevices());\n    setMaxTestDuration(10);\n    setAddedKey([]);\n    setTraySelectValue('');\n    dispatch(actions.trayDataLoaded([]));\n  }, [getTabIndex]);\n\n  useEffect(() => {\n    if (\n      fileUploadResponse.hasOwnProperty('status') &&\n      fileUploadResponse.status === 200\n    ) {\n      if (fileUploadResponse.type === 'ios-xcui') {\n        if (getApplicationType === 'ios-application') {\n          const paramStringAppBuild = {\n            fileCategory: 'ios-application',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n          dispatch(\n            testExecutionActions.loadSelectAppBuildList(paramStringAppBuild),\n          );\n        }\n\n        if (getApplicationType === 'ios-test-application') {\n          const paramStringScript = {\n            fileCategory: 'ios-test-application',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectScriptList(paramStringScript),\n          );\n        }\n        if (getApplicationType === 'visual-journey-script') {\n          const paramStringScript = {\n            fileCategory: 'visual-journey-script',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectVisualScriptList(paramStringScript),\n          );\n        }\n\n        toast({\n          title: 'Application Uploaded Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setApplicationType(' ');\n        dispatch(testExecutionActions.uploadFileProgress(0));\n        dispatch(testExecutionActions.appBuildApplicationFileUploaded({}));\n      }\n    }\n\n    if (fileUploadResponseError === 1) {\n      toast({\n        title: \"Couldn't upload file\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.appBuildFileUploadError(null));\n    }\n  }, [fileUploadResponse, fileUploadResponseError]);\n\n  useEffect(() => {\n    if (\n      getScheduleTestResponse.hasOwnProperty('message') &&\n      getScheduleTestResponseError !== 1\n    ) {\n      if (getScheduleTestResponse.message === 'Success') {\n        toast({\n          title: 'Executed/Scheduled Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setTimeout(() => {\n          history(ROUTES.MOBILE_SESSION_SUMMARY, {\n            state: { setStatusIndex: 2 },\n          });\n        }, 1000);\n\n        setSelectProject('');\n        setSelectAppBuild('');\n        setSelectScript('');\n      } else {\n        toast({\n          title: getScheduleTestResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n      dispatch(testExecutionActions.testExecutionDataLoaded({}));\n    }\n\n    if (getScheduleTestResponseError === 1) {\n      toast({\n        title: \"Couldn't Executed/Scheduled\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.testExecutionDataError(null));\n    }\n  }, [getScheduleTestResponse, getScheduleTestResponseError]);\n\n  useDevicesLoadInterval(isMobileTesting, testExecutionActions, '');\n  useSelectedDevicesStatus(\n    getSelectedDeviceList,\n    setAreDevicesBusy,\n    getIosDevicesList,\n  );\n\n  useEffect(() => {\n    dispatch(\n      actions.loadDeviceTrayList(\n        isMobileTesting ? 'app-automation' : 'lr-automation',\n      ),\n    );\n  }, []);\n\n  useEffect(() => {\n    dispatch(\n      testExecutionActions.loadSelectTestExecutionProjectList('app-automation'),\n    );\n  }, []);\n\n  useEffect(() => {\n    if (\n      createdPojectResponse.hasOwnProperty('message') &&\n      createdPojectError !== 1\n    ) {\n      if (createdPojectResponse.message === 'Success') {\n        toast({\n          title: 'Project Created Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setProjectName('');\n\n        dispatch(\n          testExecutionActions.loadSelectTestExecutionProjectList(\n            'app-automation',\n          ),\n        );\n      } else {\n        toast({\n          title: createdPojectResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n\n      dispatch(testExecutionActions.testExecutionProjectCreated({}));\n    }\n\n    if (createdPojectError === 1) {\n      toast({\n        title: \"Couldn't create the project\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.createTestExecutionProjectError(null));\n    }\n  }, [createdPojectResponse, createdPojectError]);\n\n  const createProjectHandler = () => {\n    if (projectName === '') {\n      toast({\n        title: 'Please enter project name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      return;\n    }\n    const pattern = /[^a-zA-Z0-9_-]/;\n    if (projectName.match(pattern)) {\n      toast({\n        title: 'Please enter valid name',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const config = {\n      name: projectName,\n      testType: 'app-automation',\n    };\n    dispatch(testExecutionActions.createTestExecutionProject(config));\n  };\n  const getOptionalParam = () => {\n    let newObject = new Object();\n\n    getAddedKey.map(item => {\n      let key = '';\n      let value = '';\n      key = item.keyName;\n      value = item.value;\n      if (item.keyName && item.value) {\n        const object = {\n          [key.trim()]: value.trim(),\n        };\n        Object.assign(newObject, object);\n      } else {\n      }\n    });\n\n    return newObject;\n  };\n\n  useEffect(() => {\n    if (selectProject !== '') {\n      const paramStringAppBuild = {\n        fileCategory: 'ios-application',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectAppBuildList(paramStringAppBuild),\n      );\n      const paramStringScript = {\n        fileCategory: 'ios-test-application',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(testExecutionActions.loadSelectScriptList(paramStringScript));\n      const paramStringVisualScript = {\n        fileCategory: 'visual-journey-script',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectVisualScriptList(\n          paramStringVisualScript,\n        ),\n      );\n    }\n    setSelectScript('');\n    setSelectVisualScript('');\n    setSelectAppBuild('');\n  }, [selectProject]);\n\n  const appBuildUploadHandler = file => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (file.files[0].name.split('.').pop() != 'ipa') {\n      toast({\n        title: 'Please select ipa file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    getMd5SumFiles(file, setMd5SumAppBuild);\n    setAppbuildFile(file.files[0]);\n  };\n\n  useEffect(() => {\n    if (getMd5SumAppBuild !== '') {\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: 'ios-application',\n        md5: getMd5SumAppBuild,\n        applicationType: 'appbuild',\n        testType: 'app-automation',\n      };\n      dispatch(testExecutionActions.loadUploadApplication(filerequestData));\n      setApplicationType('appbuild');\n      setMd5SumAppBuild('');\n    }\n  }, [getMd5SumAppBuild]);\n\n  const scriptUploadHandler = (file, fileType) => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      file.files[0].name.split('.').pop() != 'ipa' &&\n      (fileType === 'ios-test-application' || fileType === 'ios-application')\n    ) {\n      toast({\n        title: 'Please select ipa file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (\n      file.files[0].name.split('.').pop() != 'zip' &&\n      fileType === 'visual-journey-script'\n    ) {\n      toast({\n        title: 'Please select zip file',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    setAppbuildFile(file.files[0]);\n    getMd5SumFiles(file, setMd5SumScript);\n    setApplicationType(fileType);\n    // const filerequestData = {\n    //   filename: file.files[0].name,\n    //   project: selectProject,\n    //   fileCategory: fileType,\n    //   md5: getMd5SumScript,\n    //   applicationType: fileType,\n    // };\n    // dispatch(testExecutionActions.loadUploadApplication(filerequestData));\n  };\n\n  useEffect(() => {\n    if (getMd5SumScript !== '') {\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: getApplicationType,\n        md5: getMd5SumScript,\n        applicationType: getApplicationType,\n        testType: 'app-automation',\n      };\n      dispatch(testExecutionActions.loadUploadApplication(filerequestData));\n      setMd5SumScript('');\n    }\n  }, [getMd5SumScript]);\n\n  useEffect(() => {\n    if (\n      uploadAppBuildUrl.hasOwnProperty('response') &&\n      uploadAppBuildUrl.response.hasOwnProperty('message') &&\n      uploadApplicationUrlError !== 1\n    ) {\n      if (uploadAppBuildUrl.response.message === 'Success') {\n        dispatch(\n          testExecutionActions.loadUploadAppBuildFile({\n            url: uploadAppBuildUrl.response.data.uploadUrl,\n            file: appbuildFile,\n            type: 'ios-xcui',\n            dispatch: dispatch,\n          }),\n        );\n        setApplicationType(uploadAppBuildUrl.type);\n      } else {\n        toast({\n          title: uploadAppBuildUrl.response.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n\n      dispatch(testExecutionActions.uploadApplicationResponse({}));\n    }\n\n    if (uploadApplicationUrlError === 1) {\n      toast({\n        title: 'Something went wrong',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.uploadApplicationError(null));\n    }\n  }, [uploadAppBuildUrl, uploadApplicationUrlError]);\n\n  const appBuildsPopupHandler = e => {\n    setXcuiMozarkTestingPopupCard(true);\n    setActivePopupCard('appbuilds');\n    e.preventDefault();\n  };\n  const testSuitePopupHandler = e => {\n    setXcuiMozarkTestingPopupCard(true);\n    setActivePopupCard('testsuite');\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    if (parseInt(selectTrayValue) === 0 || parseInt(selectTrayValue) > 0) {\n      setSelectedDeviceList(selectTrayOptionList[selectTrayValue].devices);\n      setSelectedDeviceListXcui([]);\n    } else if (selectTrayValue < 0) {\n    } else {\n      setSelectedDeviceList([]);\n    }\n  }, [selectTrayValue]);\n  const selectedDeviceHandler = () => {\n    const DeviceIds = selectedDevices.map(device => device.id);\n    setSelectedDeviceList(DeviceIds);\n    setActiveDevicePopup(false);\n    setSelectedDeviceListXcui(selectedDevices);\n    setTraySelectValue(-1);\n    if (DeviceIds.length > 0) {\n    }\n  };\n\n  const selectDeviceButtonHandler = () => {\n    setActiveDevicePopup(true);\n\n    setTimeout(() => {\n      dispatch(\n        testExecutionActions.addSelectedDevices(getSelectedDeviceListXcui),\n      );\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (startDate.valueOf() + 294500 >= endDate.valueOf()) {\n      setMessageFlag(true);\n    } else {\n      setMessageFlag(false);\n    }\n  }, [startDate, endDate]);\n\n  const scheduleAutomationTestHandler = scheduleType => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (!selectAppBuild) {\n    }\n    if (!selectScript) {\n      toast({\n        title: 'Please Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (!selectVisualScript && isVisEnabled) {\n      toast({\n        title: 'Please Visual Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (getSelectedDeviceList.length <= 0) {\n      toast({\n        title: 'Please Select  Devices',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      startDate.valueOf() + 294500 >= endDate.valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start & End time have Invalid Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      parseInt(getInterval) < parseInt(getMaxTestDuration) &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid Max Test Duration > Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      (endDate.valueOf() - startDate.valueOf()) / 60000 < getInterval &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid time interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      startDate.valueOf() <= new Date().valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start and End Time Invalid',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const optionValue = getOptionalParam();\n\n    const devicebusy = validateBusyDevice(\n      busyDeviceSlots,\n      new Date(dateTimeConverterWithTimeZone(startDate)).getTime(),\n      new Date(dateTimeConverterWithTimeZone(endDate)).getTime(),\n    );\n\n    if (devicebusy.length > 0) {\n      toast({\n        title: 'Busy Devices Occured',\n        description: devicebusy.join(' , '),\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const config = {\n      deviceId: getSelectedDeviceList,\n      testConfiguration: {\n        captureHAR: recordNetworkCalls,\n        captureCPUMetrics: recordCPU,\n        captureMemoryMetrics: recordMemory,\n        captureBatteryMetrics: recordBattery,\n        captureGraphicsMetrics: recordGraphics,\n        captureDeviceScreenShots: recordDeviceScreenShots,\n        recordDeviceScreen: isVisEnabled ? isVisEnabled : recordDeviceScreen,\n        captureDeviceNetworkPackets: recordDeviceNetworkPackets,\n        captureAutomationLogs: systemDebugLogs,\n        captureSystemDebugLogs: systemDebugLogs,\n        captureLiveLogs: liveLogs,\n      },\n      scheduleConfiguration:\n        scheduleType === 'SCHEDULE'\n          ? {\n              startTime: dateTimeConverterWithTimeZone(startDate),\n              endTime: dateTimeConverterWithTimeZone(endDate),\n              interval: parseInt(getInterval),\n            }\n          : {\n              startTime: dateTimeConverterWithTimeZone(new Date()),\n            },\n      testAction: {\n        pre: {},\n        post: {},\n      },\n      testParameters: {\n        testType: 'app-automation',\n        maxTestDuration: parseInt(getMaxTestDuration),\n        testFramework: 'ios-xcuitest',\n        projectName: selectProject,\n        packageName: getPackageName,\n        trayName: getTrayFromList(selectTrayValue, selectTrayOptionList),\n        visualMonitoringEnabled: isVisEnabled,\n        visualTestApplicationUrl: getApplicationUrlHelper(\n          selectVisualScriptList,\n          selectVisualScript,\n        ),\n        ...optionValue,\n      },\n      applicationUrl: getApplicationUrlHelper(\n        selectAppBuildListOptions,\n        selectAppBuild,\n      ),\n      testApplicationUrl: getApplicationUrlHelper(\n        selectScriptListOptions,\n        selectScript,\n      ),\n      executionType: scheduleType,\n    };\n    dispatch(testExecutionActions.loadTestExecutionData(config));\n  };\n\n  useEffect(() => {\n    if (\n      (selectScript || selectScript === '0') &&\n      selectScript !== '' &&\n      selectScriptListOptions.length > 0\n    ) {\n      if (\n        selectScriptListOptions[selectScript].fileParameters.hasOwnProperty(\n          'xctestrunFileUrl',\n        )\n      ) {\n        if (\n          selectScriptListOptions[selectScript].fileParameters\n            .xctestrunFileUrl === ''\n        ) {\n          setSelectScript('');\n          toast({\n            title: 'Unable to get package name/bundle ID. Upload new file',\n            status: 'error',\n            isClosable: true,\n            position: 'bottom-right',\n          });\n        }\n      } else {\n        setSelectScript('');\n        toast({\n          title: 'Unable to get package name/bundle ID. Upload new file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n    }\n  }, [selectScript]);\n  useEffect(() => {\n    if (\n      (selectVisualScript || selectVisualScript === '0') &&\n      selectVisualScript !== '' &&\n      selectVisualScriptList.length > 0\n    ) {\n      const getVisualScript = isVisEnabled\n        ? selectVisualScriptList[selectVisualScript].meta.s3Url\n        : '';\n      setVisualUrl(getVisualScript);\n    }\n  }, [selectVisualScript]);\n\n  const addKeyHandler = async () => {\n    setAddedKey([...getAddedKey, { keyName: ' ', value: ' ' }]);\n  };\n  const saveOptionalParamHandler = () => {\n    setXcuiMozarkTestingPopupCard(false);\n  };\n\n  const removeKeyValueHandler = objectId => {};\n\n  const refreshApplicationList = fileCategory => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (selectProject !== '') {\n      if (fileCategory === 'ios-application') {\n        const paramStringAppBuild = {\n          fileCategory: 'ios-application',\n          projectName: selectProject,\n          testType: 'app-automation',\n        };\n        dispatch(\n          testExecutionActions.loadSelectAppBuildList(paramStringAppBuild),\n        );\n        setSelectAppBuild('');\n      } else if (fileCategory === 'ios-test-application') {\n        const paramStringScript = {\n          fileCategory: 'ios-test-application',\n          projectName: selectProject,\n          testType: 'app-automation',\n        };\n        dispatch(testExecutionActions.loadSelectScriptList(paramStringScript));\n        setSelectScript('');\n      } else if (fileCategory === 'visual-journey-script') {\n        const paramStringVisualScript = {\n          fileCategory: 'visual-journey-script',\n          projectName: selectProject,\n          testType: 'app-automation',\n        };\n\n        dispatch(\n          testExecutionActions.loadSelectVisualScriptList(\n            paramStringVisualScript,\n          ),\n        );\n        setSelectVisualScript('');\n      }\n    }\n  };\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" position=\"relative\">\n        {(loadingCreateProject || loadingExecuteSchedule) && (\n          <LoadingComponent\n            height=\"120vh\"\n            top=\"-65px\"\n            isOverLay={true}\n            position=\"absolute\"\n          ></LoadingComponent>\n        )}\n\n        <Stack spacing=\"10px\" padding=\"15px 25px\">\n          <LabelFieldComponent label=\"Project\">\n            <SelectComponent\n              name=\"xcui\"\n              type=\"project\"\n              selectValue={selectProject}\n              setSelectValue={setSelectProject}\n              selectOptions={selectProjectOptionList}\n              title=\"Select Project\"\n            ></SelectComponent>\n            <Text padding=\"0px 5px\">OR</Text>\n            <InputComponent\n              setInputValue={setProjectName}\n              inputValue={projectName}\n              title=\"Enter Project Name\"\n            ></InputComponent>\n            <ButtonComp buttonHandler={createProjectHandler} padding=\"7px 12px\">\n              Create\n            </ButtonComp>\n          </LabelFieldComponent>\n          <LabelFieldComponent label=\"App Build\">\n            <SelectComponent\n              name=\"xcui\"\n              selectValue={selectAppBuild}\n              setSelectValue={setSelectAppBuild}\n              type=\"applocation\"\n              selectOptions={selectAppBuildListOptions}\n              title=\"Default\"\n            ></SelectComponent>\n\n            <RefreshIconButton\n              clickHandler={() => refreshApplicationList('ios-application')}\n            ></RefreshIconButton>\n            <Text padding=\"0px 5px\">OR</Text>\n\n            <UploadButton\n              validate=\".ipa\"\n              fileType=\"ios-application\"\n              uploadButtonHandler={scriptUploadHandler}\n              enableProgress={\n                getApplicationType === 'ios-application' &&\n                (loadingUploadApplicationFile || loadingFileUpload)\n              }\n              progressValue={getUploadProgessValue}\n              placeholder=\"Upload App Build\"\n            ></UploadButton>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent label=\"Test Suite\">\n            <SelectComponent\n              name=\"xcui\"\n              type=\"application\"\n              selectOptions={selectScriptListOptions}\n              selectValue={selectScript}\n              setSelectValue={setSelectScript}\n              title=\"Select Test Suite\"\n            ></SelectComponent>\n            <RefreshIconButton\n              clickHandler={() =>\n                refreshApplicationList('ios-test-application')\n              }\n            ></RefreshIconButton>\n\n            <Text padding=\"0px 5px\">OR</Text>\n\n            <UploadButton\n              validate=\".ipa\"\n              fileType=\"ios-test-application\"\n              uploadButtonHandler={scriptUploadHandler}\n              enableProgress={\n                getApplicationType === 'ios-test-application' &&\n                (loadingUploadApplicationFile || loadingFileUpload)\n              }\n              progressValue={getUploadProgessValue}\n              placeholder=\"Upload Test Suite\"\n            ></UploadButton>\n            <Text>Enable Visual Monitoring</Text>\n            <Switch size=\"md\" onChange={e => setVisEnable(e.target.checked)} />\n          </LabelFieldComponent>\n\n          {isVisEnabled && (\n            <LabelFieldComponent label=\"Visual Journey Script\">\n              <SelectComponent\n                name=\"xcui\"\n                type=\"application\"\n                selectOptions={selectVisualScriptList}\n                selectValue={selectVisualScript}\n                setSelectValue={setSelectVisualScript}\n                title=\"Select Visual Journey\"\n              ></SelectComponent>\n              <RefreshIconButton\n                clickHandler={() =>\n                  refreshApplicationList('visual-journey-script')\n                }\n              ></RefreshIconButton>\n\n              <Text padding=\"0px 5px\">OR</Text>\n\n              <UploadButton\n                validate=\".zip\"\n                fileType=\"visual-journey-script\"\n                uploadButtonHandler={scriptUploadHandler}\n                enableProgress={\n                  getApplicationType === 'visual-journey-script' &&\n                  (loadingUploadApplicationFile || loadingFileUpload)\n                }\n                progressValue={getUploadProgessValue}\n                placeholder=\"Upload Visual Journey\"\n              ></UploadButton>\n            </LabelFieldComponent>\n          )}\n\n          <LabelFieldComponent label=\"Devices\">\n            <Flex h=\"39px\">\n              <CustomIconButton>ios</CustomIconButton>\n            </Flex>\n            <DashedButton\n              height=\"39px\"\n              width=\"250px\"\n              name=\"selectDeviceXcui\"\n              buttonHandler={selectDeviceButtonHandler}\n            >\n              Select Device(<Text textTransform=\"lowercase\">s</Text>)\n            </DashedButton>\n            <Text>OR</Text>\n            <SelectTrayOption\n              selectOptions={selectTrayOptionList}\n              title=\"Select Tray\"\n              selectValue={selectTrayValue}\n              setSelectValue={setTraySelectValue}\n            ></SelectTrayOption>\n            {getSelectedDeviceList.length && (\n              <Text>{getSelectedDeviceList.length} Device selected</Text>\n            )}\n          </LabelFieldComponent>\n          <SelectDevicePopup\n            deviceOs=\"ios\"\n            selectedDeviceHandler={selectedDeviceHandler}\n            tableData={getIosDevicesList}\n            setActiveDevicePopup={setActiveDevicePopup}\n            activeDevicePopup={activeDevicePopup}\n            selectedDeviceList={selectedDevices}\n            isLoading={deviceListListLoading}\n            errorDeviceData={deviceListDataError}\n          ></SelectDevicePopup>\n\n          <Flex marginTop=\"10px\" align=\"flex-start\">\n            <Flex\n              width=\"250px\"\n              align=\"center\"\n              height=\"35px\"\n              textTransform=\"capitalize\"\n            >\n              <Text whiteSpace=\"nowrap\">Record Test</Text>\n            </Flex>\n            <Flex flex={1} flexDirection=\"column\">\n              <HStack spacing=\"0px\">\n                <CheckboxComp\n                  title=\"Screen Recording\"\n                  value={recordDeviceScreen || isVisEnabled}\n                  setCheckedValue={setRecordDeviceScreen}\n                ></CheckboxComp>\n                <CheckboxComp\n                  value={systemDebugLogs}\n                  title=\"Automation & Debug Logs\"\n                  setCheckedValue={setSystemDebugLogs}\n                ></CheckboxComp>\n              </HStack>\n\n              <HStack spacing=\"0px\"></HStack>\n              <HStack spacing=\"0px\">\n                <CheckboxComp\n                  value={recordNetworkCalls}\n                  title=\"Network Logs\"\n                  setCheckedValue={setRecordNetworkCalls}\n                ></CheckboxComp>\n              </HStack>\n              <HStack spacing=\"0px\"></HStack>\n            </Flex>\n          </Flex>\n          <LabelFieldComponent>\n            <Text maxWidth=\"45%\">\n              Test Parameters\n              <InfoComponent\n                labelmessage={`Max Test Duration ${getMaxTestDuration} min`}\n              ></InfoComponent>{' '}\n            </Text>\n            <LaunchIconButton\n              viewCode={testSuitePopupHandler}\n            ></LaunchIconButton>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent label=\"Execute Test\">\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length || !areDevicesBusy}\n              name=\"executeNowXcui\"\n              fontWeight=\"500\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              buttonHandler={() => scheduleAutomationTestHandler('NOW')}\n            >\n              Now\n            </ButtonComp>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <Text padding=\"5px\">OR</Text>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length}\n              name=\"scheduleTestXcui\"\n              fontWeight=\"500\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              marginLeft=\"0px\"\n              buttonHandler={() => scheduleAutomationTestHandler('SCHEDULE')}\n            >\n              Schedule\n            </ButtonComp>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              Start date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <InputDateTime\n              name=\"startDateXcui\"\n              selectedDate={startDate}\n              setSelectDate={setStartDate}\n            ></InputDateTime>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              End date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <InputDateTime\n              selectedDate={endDate}\n              name=\"endDateXcui\"\n              setSelectDate={setEndDate}\n            ></InputDateTime>\n            {getMessageFlag && (\n              <Text color=\"red1\" textTransform=\"none\">\n                {' '}\n                *End time &gt; Start time{' '}\n              </Text>\n            )}\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" width=\"200px\">\n              Interval\n              <InfoComponent labelmessage=\"Interval between two test execution a single device(in minutes)\"></InfoComponent>\n            </Text>\n            <ToggleSelectInput\n              isShadow={true}\n              selectOptions={timeIntervalValue}\n              selectValue={getInterval}\n              setSelectValue={setIntervalTime}\n            ></ToggleSelectInput>\n          </LabelFieldComponent>\n\n          <PopupCardDetail\n            isOpen={xcuiMozarkTestingPopupCard}\n            onClose={setXcuiMozarkTestingPopupCard}\n          >\n            <Stack\n              width=\"100%\"\n              padding=\"10px 5px\"\n              spacing=\"15px\"\n              overflowY=\"auto\"\n              css={{\n                '&::-webkit-scrollbar': {\n                  width: '8px',\n                  border: '5px solid #F3F6F9',\n                },\n                '&::-webkit-scrollbar-track': {\n                  boxShadow: 'inset 0 0 6px white',\n                },\n                '&::-webkit-scrollbar-thumb': {\n                  backgroundColor: '#C1C1C1',\n                  borderRadius: '5px',\n                  boreder: '2px solid',\n                },\n              }}\n            >\n              <KeyValueComponent\n                label=\"Project Name\"\n                getValue={selectProject}\n                isDisabled={true}\n              ></KeyValueComponent>\n              <KeyValueComponent\n                label=\"Test Framework\"\n                getValue=\"ios-xcuitest\"\n                isDisabled={true}\n              ></KeyValueComponent>\n              {selectAppBuild === '' && (\n                <KeyValueComponent\n                  isMandatory={false}\n                  label=\"Bundle ID\"\n                  getValue={getPackageName}\n                  setValue={setPackageName}\n                  isDisabled={false}\n                ></KeyValueComponent>\n              )}\n\n              <Flex justifyContent=\"space-between\">\n                <Text>Maximum Test Duration</Text>\n\n                <SelectValueComponent\n                  isShadow={false}\n                  width=\"150px\"\n                  selectOptions={timeIntervalValue}\n                  selectValue={getMaxTestDuration}\n                  setSelectValue={setMaxTestDuration}\n                ></SelectValueComponent>\n              </Flex>\n              {isVisEnabled && (\n                <Flex justifyContent=\"space-between\">\n                  <Text>Visual Synthetic Monitoring</Text>\n                  <Switch isChecked={isVisEnabled} />\n                </Flex>\n              )}\n              {isVisEnabled && (\n                <KeyValueComponent\n                  isMandatory={false}\n                  isDisabled={true}\n                  label=\"Visual Journey Script\"\n                  getValue={isVisEnabled ? getVisualUrl : ''}\n                ></KeyValueComponent>\n              )}\n\n              {getAddedKey.length > 0 &&\n                getAddedKey.map((item, index) => (\n                  <NewKeyValueComponent\n                    removeKeyValueHandler={removeKeyValueHandler}\n                    objectData={item}\n                    key={index}\n                    id={index}\n                  ></NewKeyValueComponent>\n                ))}\n\n              <Flex justifyContent=\"flex-end\">\n                <ButtonComp\n                  fontSize=\"18px\"\n                  padding=\"5px 10px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  fontWeight=\"600\"\n                  buttonHandler={addKeyHandler}\n                  name=\"addNewParamXcui\"\n                >\n                  +\n                </ButtonComp>\n              </Flex>\n\n              <Flex justify=\"center\">\n                <ButtonComp\n                  name=\"saveOptionParamXcui\"\n                  fontWeight=\"500\"\n                  padding=\"7px 25px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  buttonHandler={saveOptionalParamHandler}\n                >\n                  Save\n                </ButtonComp>\n              </Flex>\n            </Stack>\n          </PopupCardDetail>\n        </Stack>\n      </Flex>\n    </>\n  );\n};\n\nexport default XcUiMozarkTesting;\n","const getTrayFromList  = (selectTrayValue , selectTrayOptionList)=>{\n  if(!selectTrayValue || selectTrayValue < 0 || selectTrayOptionList.length <= 0){\n   return '';\n  }\n const options = selectTrayOptionList[selectTrayValue];\n if(options.hasOwnProperty('trayName')){\n   return options.trayName\n }\n  return '';\n }\n\nexport default getTrayFromList;\n","import { ManageScheduleData } from 'types/ManageSchedule';\n\nexport interface manageScheduleState {\n  loading: boolean;\n  manageScheduleData: ManageScheduleData[];\n  manageScheduleError: null | ManageScheduleErrorType;\n  loadingScheduleDelete: boolean;\n  deleteScheduleError: null | ManageScheduleErrorType;\n  deleteSheduleResponse: DeleteScheduleResponse;\n  managePageCount: number;\n}\n\nexport interface DeleteScheduleResponse {}\n\nexport enum ManageScheduleErrorType {\n  RESPONSE_ERROR = 1,\n  TEST_NOT_FOUND = 2,\n}\n","// @ts-nocheck\nimport GetIdToken from 'Authentication/configuration/GetIdToken';\nimport { call, put, takeLatest, delay, takeEvery } from 'redux-saga/effects';\nimport { request } from 'utils/request';\nimport { manageScheduleActions as actions } from './';\nimport { ManageScheduleErrorType } from './types';\nimport { REACT_APP_AUTOMATION_TESTING_BASE_URL } from 'utils/enviroment';\nconst BASE_URL = REACT_APP_AUTOMATION_TESTING_BASE_URL;\n\n\nfunction* getManageScheduleData(param) {\n  const idToken = GetIdToken();\n  const idString = param.payload.id ? `&scheduleId=${param.payload.id}` : ''\n  const testTypeString = param.payload.testType\n    ? `&testType=${param.payload.testType}`\n    : '';\n  const requestURL = `${BASE_URL}/schedules?pageNo=${param.payload.page}&pageSize=${param.payload.pageSize}&testStatus=SCHEDULED${idString}${testTypeString}`;\n\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n  };\n  try {\n    const manageScheduleData = yield call(request, requestURL, config);\n    //  console.log(manageScheduleData);\n    if (manageScheduleData.hasOwnProperty('data')) {\n      yield put(actions.managePageCount(manageScheduleData.data.count));\n      yield put(actions.manageScheduleDataLoaded(manageScheduleData.data.list));\n    } else {\n      yield put(\n        actions.manageScheduleError(ManageScheduleErrorType.RESPONSE_ERROR),\n      );\n    }\n  } catch (e) {\n    //console.log(e)\n    yield put(\n      actions.manageScheduleError(ManageScheduleErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nfunction* deleteManageScheduleData(deleteId) {\n  const idToken = GetIdToken();\n  const config = {\n    method: 'DELETE',\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${idToken}`,\n    },\n\n    redirect: 'follow',\n  };\n\n  const requestURL = `${BASE_URL}/schedules?scheduleId=${deleteId.payload}`;\n  try {\n    const manageSheduleDeleteResponse = yield call(request, requestURL, config);\n    //console.log(manageSheduleDeleteResponse);\n    if (manageSheduleDeleteResponse.hasOwnProperty('status')) {\n      yield put(\n        actions.deleteManageSheduleResponse(manageSheduleDeleteResponse),\n      );\n    } else {\n      yield put(\n        actions.deleteManageScheduleError(\n          ManageScheduleErrorType.RESPONSE_ERROR,\n        ),\n      );\n    }\n  } catch (err) {\n    yield put(\n      actions.deleteManageScheduleError(ManageScheduleErrorType.RESPONSE_ERROR),\n    );\n  }\n}\n\nexport function* manageScheduleSaga() {\n  yield takeLatest(actions.loadManageSchedules.type, getManageScheduleData);\n  yield takeLatest(actions.loadDeleteSchedule.type, deleteManageScheduleData);\n}\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { manageScheduleSaga } from './saga';\nimport { manageScheduleState } from './types';\n\nexport const initialState: manageScheduleState = {\n  loading: false,\n  manageScheduleData: [],\n  manageScheduleError: null,\n  loadingScheduleDelete: false,\n  deleteScheduleError: null,\n  deleteSheduleResponse: {},\n  managePageCount: 1,\n};\n\nconst getPageNumber = (data: number) => {\n  return Math.ceil(data / 10);\n};\n\nconst slice = createSlice({\n  name: 'manageSchedule',\n  initialState,\n  reducers: {\n    loadManageSchedules: state => {\n      state.loading = true;\n    },\n    manageScheduleDataLoaded: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n\n      //console.log(action.payload);\n      state.manageScheduleData = action.payload.filter(\n        schedule => schedule.scheduleStatus === 'SCHEDULED',\n      );\n      state.manageScheduleError = null;\n    },\n    managePageCount: (state, action: PayloadAction<any>) => {\n      state.managePageCount = getPageNumber(action.payload);\n    },\n    manageScheduleError: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.manageScheduleError = action.payload;\n    },\n    loadDeleteSchedule: state => {\n      state.loadingScheduleDelete = true;\n    },\n    deleteManageSheduleResponse: (state, action: PayloadAction<any>) => {\n      state.loadingScheduleDelete = false;\n      state.deleteSheduleResponse = action.payload;\n      state.deleteScheduleError = null;\n    },\n    deleteManageScheduleError: (state, action: PayloadAction<any>) => {\n      state.loadingScheduleDelete = false;\n      state.deleteScheduleError = action.payload;\n    },\n  },\n});\n\nexport const { actions: manageScheduleActions } = slice;\n\nexport const useManageScheduleSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: slice.name, saga: manageScheduleSaga });\n  return { actions: slice.actions };\n};\n","import { Flex, Icon, Td, Tr } from '@chakra-ui/react';\nimport InfoComponent from 'app/pages/Appium/components/InfoComponent';\nimport CopyToClipBoardComp from 'app/pages/HarAnalysis/Components/CopyToClipBoardComp';\nimport ROUTES from 'app/constants/Routes';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\nimport React from 'react';\nimport { FaTelegramPlane } from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  dateTimeConverter,\n  dateTimeConverterWithOffset,\n  stringSaprater,\n} from 'utils/gernricfunction';\n\nfunction ExpandedRow({ testDetails, leftIcon, row }) {\n  const isMobileTesting = usePlatformtypeHook()\n  //console.log(testDetails);\n  const history = useNavigate();\n  const redicrectTestsessionPageHandler = id => {\n    if(isMobileTesting){\n      history(`${ROUTES.MOBILE_SESSION_SUMMARY}/${id}`);\n    }else{\n      history(`${ROUTES.LR_SESSION_SUMMARY}/${id}`); \n    }\n  };\n  return (\n    <>\n      <Tr\n        //bg=\"#F3F3F3\"\n        data-scheduletest-id={testDetails.uuid}\n        bg=\"#fbd6e5\"\n        cursor=\"pointer\"\n        _hover={{ bg: 'grey14' }}\n      >\n        {leftIcon && (\n          <Td\n            minWidth=\"10px\"\n            padding=\"2px\"\n            paddingRight=\"6px\"\n            color=\"grey2\"\n            cursor=\"pointer\"\n          ></Td>\n        )}\n        {/* {row.cells.map((cell, index) => {\n               console.log(index)\n            return <Td padding=\"2px 7px\">{cell.render('Cell')}</Td>;\n          })} */}\n\n        <Td padding=\"6px 4px\">{testDetails.testStatus}</Td>\n        {/* <Td padding=\"2px\">{testDetails.uuid}</Td> */}\n        <Td padding=\"6px 4px\">{testDetails.testParameters.projectName}</Td>\n\n        <Td padding=\"6px 4px\">\n          {' '}\n          {stringSaprater(testDetails.testApplicationUrl)}\n        </Td>\n        <Td padding=\"6px 4px\"> {stringSaprater(testDetails.applicationUrl)}</Td>\n        <Td padding=\"6px 4px \">\n          {dateTimeConverter(\n            dateTimeConverterWithOffset(testDetails.testScheduledTime),\n          )}\n        </Td>\n        <Td padding=\"6px 4px\">{testDetails.devices[0]}</Td>\n        <Td padding=\"6px 4px\">{testDetails.testParameters.maxTestDuration}</Td>\n        <Td padding=\"0px\">\n          <Flex width=\"40px\" alignItems=\"center\" alignContent=\"center\">\n            {/* <CopyToClipBoardComp\n              text={testDetails.uuid}\n              isNotHover={true}\n              borderBottom={false}\n              tooltipMessage=\"Copy Test ID\"\n            >\n   \n            </CopyToClipBoardComp> */}\n            {testDetails.testStatus === 'Completed' && (\n              <Icon\n                color=\"grey1\"\n                onClick={() =>\n                  redicrectTestsessionPageHandler(testDetails.uuid)\n                }\n                as={FaTelegramPlane}\n              ></Icon>\n            )}\n          </Flex>\n        </Td>\n      </Tr>\n    </>\n  );\n}\n\nexport default ExpandedRow;\n","// @ts-nocheck\nimport { Icon } from '@chakra-ui/icons';\nimport { Tr, Td, Flex, HStack, Th } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { TiDelete, TiDeleteOutline, TiEdit } from 'react-icons/ti';\n\nimport { RiEditBoxLine } from 'react-icons/ri';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { MdEdit } from 'react-icons/md';\nimport ExpandedRow from './ExpandedRow';\nimport { AiOutlineMinusSquare } from 'react-icons/ai';\nimport { FiMinusSquare, FiPlusSquare } from 'react-icons/fi';\nimport {\n  dateTimeConverter,\n  dateTimeConverterWithOffset,\n  stringSaprater,\n} from 'utils/gernricfunction';\nimport { useDispatch } from 'react-redux';\nimport { useManageScheduleSlice } from '../slice';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction TableExpandRow({ leftIcon, row, editHandler, deleteHandler, pageIndex, pageSize ,expandHandler, setExpandHandler}) {\n  const isMobileTesting = usePlatformtypeHook()\n  const dispatch = useDispatch()\n  const { actions } = useManageScheduleSlice();\n  \n  const  expandRowHandler = ({id , state})=>{\n    if (state) {\n      dispatch(\n        actions.loadManageSchedules({ page: 0, pageSize: 0, id ,\n          testType : isMobileTesting ? 'app-automation,mobile-interact' : 'lr-automation,lr-interact'\n        }),\n      );\n      setExpandHandler(state)\n    } if(!state) {\n      dispatch(\n        actions.loadManageSchedules({ page: pageIndex + 1, pageSize: pageSize ,\n          testType : isMobileTesting ? 'app-automation,mobile-interact' : 'lr-automation,lr-interact'\n        }),\n      );\n       setExpandHandler(state)\n    }\n   \n  }\n\n\n  return (\n    <>\n      <>\n        <Tr data-manageschedule-id={row.cells[0].row.original.uuid}>\n          {/* {console.log( row.cells[0].row.original.uuid)} */}\n          {leftIcon && (\n            <Td\n              minWidth=\"10px\"\n              padding=\"2px\"\n              paddingLeft=\"5px\"\n              color=\"grey2\"\n              cursor=\"pointer\"\n              paddingRight=\"6px\"\n             // onClick={() => expandRowHandler({ id : row.cells[0].row.original.uuid , state : expandHandler})}\n            >\n              {!expandHandler && <Icon color=\"grey1\" \n              onClick={() => expandRowHandler({ id : row.cells[0].row.original.uuid , state : true})} // +\n              as={FiPlusSquare}></Icon>}\n              {expandHandler && <Icon color=\"grey1\" \n              onClick={() => expandRowHandler({ id : row.cells[0].row.original.uuid , state : false})} // -\n              as={FiMinusSquare}></Icon>}\n            </Td>\n          )}\n\n          {row.cells.map((cell, index) => {\n            return (\n              <Td\n                //padding=\"4px 2px\"\n                whiteSpace={index === '0' && 'nowrap'}\n                minWidth={index === 0 && '100px'}\n                padding=\"2px 3px\"\n              >\n                {/* {console.log(\n                row.cells[0].row.original.testExecutions[0].testApplicationUrl,\n              )} */}\n                {(index === 2 &&\n                  stringSaprater(\n                    row.cells[0].row.original.testExecutions[0]\n                      .testApplicationUrl,\n                  )) ||\n                  (index === 3 &&\n                    stringSaprater(\n                      row.cells[0].row.original.testExecutions[0]\n                        .applicationUrl,\n                    )) ||\n                  (index === 4 &&\n                    dateTimeConverter(\n                      dateTimeConverterWithOffset(\n                        row.cells[0].row.original.scheduleConfiguration\n                          .startTime,\n                      ),\n                    )) ||\n                  (index === 5 &&\n                    dateTimeConverter(\n                      dateTimeConverterWithOffset(\n                        row.cells[0].row.original.scheduleConfiguration.endTime,\n                      ),\n                    )) ||\n                  // (index === 7 && (row.cells[0].row.original.scheduleConfiguration.interval)/60 ) ||\n                  cell.render('Cell')}\n              </Td>\n            );\n          })}\n          <Td padding=\"2px 2px\">\n            <HStack align=\"center\" h=\"30px\">\n              <Flex\n                w=\"27px\"\n                h=\"27px\"\n                bg=\"whiet\"\n                align=\"center\"\n                justify=\"center\"\n                borderRadius=\"5px\"\n                cursor=\"pointer\"\n                border=\"1px solid grey\"\n                onClick={\n                  e => deleteHandler(row.cells[0].row.original.uuid)\n                  //row.cells[0].row.original.user_name,\n                }\n              >\n                <Icon color=\"grey1\" as={FaTrashAlt}></Icon>\n              </Flex>\n              {/* <Flex\n              w=\"27px\"\n              h=\"27px\"\n              bg=\"white\"\n              border=\"1px solid gray\"\n              align=\"center\"\n              justify=\"center\"\n              cursor=\"pointer\"\n              borderRadius=\"5px\"\n              onClick={e => editHandler(row.cells[0].row.original.uuid)}\n            >\n              <Icon color=\"grey1\" as={MdEdit}></Icon>\n            </Flex> */}\n            </HStack>\n          </Td>\n        </Tr>\n      </>\n      {expandHandler  && (\n        <>\n          <Tr bg=\"#c5d4e2\" color=\"grey1\">\n            <Th\n              fontFamily=\"Montserrat\"\n              minWidth=\"10px\"\n              padding=\"2px\"\n              paddingRight=\"6px\"\n            ></Th>\n\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Status\n            </Th>\n            {/* <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Test ID\n            </Th> */}\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Project\n            </Th>\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Script\n            </Th>\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Build\n            </Th>\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Test ScheduleTime\n            </Th>\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Device Serial\n            </Th>\n\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"2px\"\n              color=\"grey1\"\n              whiteSpace=\"nowrap\"\n            >\n              Max TestDuration\n            </Th>\n            <Th\n              fontFamily=\"Montserrat\"\n              textTransform=\"capitalize\"\n              padding=\"0px\"\n              minWidth=\"2px\"\n              color=\"grey1\"\n            ></Th>\n          </Tr>\n          {/* {console.log(row.cells[0].row.original.testExecutions)} */}\n          {row.cells[0].row.original.testExecutions.map((item, index) => (\n            <ExpandedRow\n              leftIcon={leftIcon}\n              row={row}\n              key={index}\n              testDetails={item}\n            ></ExpandedRow>\n          ))}\n\n          {/* <Tr>\n          {leftIcon && <Td minWidth=\"10px\" padding=\"2px 7px\"></Td>}\n          {row.cells.map((cell, index) => {\n            return <Td padding=\"2px 7px\">{cell.render('Cell')}</Td>;\n          })}\n          <Td padding=\"2px 7px\"></Td>\n        </Tr> */}\n        </>\n      )}\n    </>\n  );\n}\n\nexport default TableExpandRow;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'types';\nimport { initialState } from '.';\n\nconst selectSlice = (state: RootState) => state.manageSchedule || initialState;\n\nexport const selectManageScheduleData = createSelector(\n  [selectSlice],\n  state => state.manageScheduleData,\n);\nexport const selectLoadingManageSchedule = createSelector(\n  [selectSlice],\n  state => state.loading,\n);\nexport const selectPageCount = createSelector(\n  [selectSlice],\n  state => state.managePageCount,\n);\nexport const selectManageScheduleDataError = createSelector(\n  [selectSlice],\n  state => state.manageScheduleError,\n);\nexport const selectManageScheduleDeleteResponse = createSelector(\n  [selectSlice],\n  state => state.deleteSheduleResponse,\n);\nexport const selectManageScheduleDeleteError = createSelector(\n  [selectSlice],\n  state => state.deleteScheduleError,\n);\nexport const selectManageScheduleDeleteLoading = createSelector(\n  [selectSlice],\n  state => state.loadingScheduleDelete,\n);\n","// @ts-nocheck\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table as CustomTable,\n  Thead,\n  Tr,\n  Img,\n  Text,\n  Box,\n  // Container,\n  Td,\n  Th,\n  Tbody,\n  Input,\n  Flex,\n  //  IconButton,\n  Icon,\n  Center,\n  HStack,\n  Badge,\n  Accordion,\n  AccordionItem,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { useTable, usePagination } from 'react-table';\n\nimport TableExpandRow from './TableExpandRow';\nimport PopupComponent from 'app/components/PopupComponent';\nimport { useManageScheduleSlice } from '../slice';\nimport {\n  selectLoadingManageSchedule,\n  selectManageScheduleData,\n  selectManageScheduleDataError,\n  selectManageScheduleDeleteError,\n  selectManageScheduleDeleteLoading,\n  selectManageScheduleDeleteResponse,\n  selectPageCount,\n} from '../slice/selector';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\n\nfunction TableComp({\n  columns,\n  fetchData,\n  //data,\n  leftIcon,\n  rightHoverIcon,\n  type,\n  editHandler,\n}) {\n  const inputRef = useRef();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [deleteId, setDeleteId] = useState();\n  const { actions } = useManageScheduleSlice();\n  const toast = useToast();\n  const [expandHandler, setExpandHandler] = useState(false);\n  const dispatch = useDispatch();\n\n  const manageScheduleData = useSelector(selectManageScheduleData);\n  const getPageCount = useSelector(selectPageCount);\n  const isLoading = useSelector(selectLoadingManageSchedule);\n  const manageScheduleError = useSelector(selectManageScheduleDataError);\n  const manageScheduleDeleteLoading = useSelector(\n    selectManageScheduleDeleteLoading,\n  );\n  const getDeleteScheduleResponse = useSelector(\n    selectManageScheduleDeleteResponse,\n  );\n  const getDeleteScheduleError = useSelector(selectManageScheduleDeleteError);\n\n  const deleteHandler = id => {\n    onOpen();\n    setDeleteId(id);\n  };\n\n  const deleteScheduleHandler = () => {\n    //console.log('deleted', deleteId);\n    dispatch(actions.loadDeleteSchedule(deleteId));\n    onClose();\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPage,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data: manageScheduleData,\n      initialState: { pageIndex: 0, pageSize: 10 },\n      manualPagination: true,\n      pageCount: getPageCount,\n    },\n    usePagination,\n  );\n\n  useEffect(() => {\n    if (\n      getDeleteScheduleResponse.hasOwnProperty('message') &&\n      getDeleteScheduleError == null\n    ) {\n      if (getDeleteScheduleResponse.message === 'Success') {\n        toast({\n          title: 'Deleted Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        //dispatch(actions.loadManageSchedules({ page: 1, pageSize: 10 }));\n        fetchData(pageIndex, pageSize);\n      } else {\n        toast({\n          title: getDeleteScheduleResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n      dispatch(actions.deleteManageSheduleResponse({}));\n    }\n    if (getDeleteScheduleError === 1) {\n      toast({\n        title: 'Something went wrong',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(actions.deleteManageScheduleError(null));\n    }\n  }, [getDeleteScheduleResponse, getDeleteScheduleError]);\n\n  useEffect(() => {\n    fetchData(pageIndex, pageSize);\n  }, [pageIndex]);\nuseEffect(() => {\n  if(manageScheduleData.length === 0){\n    setExpandHandler(false);\n  }\n},[manageScheduleData])\n  return (\n    <>\n      {isLoading || manageScheduleDeleteLoading ? (\n        <LoadingComponent height=\"80vh\"></LoadingComponent>\n      ) : (\n        <>\n          <>\n            {manageScheduleError === null ? (\n              <>\n                {manageScheduleData.length > 0 ? (\n                  <Flex\n                    flexDirection=\"column\"\n                    width=\"100%\"\n                    backgroundColor=\"white\"\n                  >\n                    <CustomTable\n                      fontFamily=\"Montserrat\"\n                      fontWeight=\"500\"\n                      variant=\"simple\"\n                      {...getTableProps()}\n                    >\n                      <Thead fontWeight=\"500\" color=\"grey1\">\n                        {headerGroups.map(headerGroup => (\n                          <Tr {...headerGroup.getHeaderGroupProps()}>\n                            {leftIcon && (\n                              <Th\n                                fontFamily=\"Montserrat\"\n                                minWidth=\"0px\"\n                                padding=\"2px\"\n                                paddingRight=\"6px\"\n                              ></Th>\n                            )}\n                            {headerGroup.headers.map(column => (\n                              <Th\n                                fontFamily=\"Montserrat\"\n                                textTransform=\"capitalize\"\n                                padding=\"2px\"\n                                whiteSpace=\"nowrap\"\n                                color=\"grey1\"\n                                {...column.getHeaderProps()}\n                              >\n                                {column.render('Header')}\n                              </Th>\n                            ))}\n                            {rightHoverIcon && <Th></Th>}\n                            <Th padding=\"0px\" margin=\"0px\"></Th>\n                          </Tr>\n                        ))}\n                      </Thead>\n\n                      <Tbody\n                        fontWeight=\"500\"\n                        color=\"grey13\"\n                        {...getTableBodyProps()}\n                      >\n                        {page.map((row, i) => {\n                          prepareRow(row);\n\n                          return (\n                            <TableExpandRow\n                              editHandler={editHandler}\n                              deleteHandler={deleteHandler}\n                              row={row}\n                              key={i}\n                              expandHandler = {expandHandler} \n                              setExpandHandler = {setExpandHandler}\n                              pageIndex={pageIndex}\n                              pageSize={pageSize}\n                              leftIcon={leftIcon}\n                            ></TableExpandRow>\n                          );\n                        })}\n                      </Tbody>\n                    </CustomTable>\n                    <Flex\n                      justifyContent=\"flex-end\"\n                      padding=\"10px 0px\"\n                      marginRight=\"10px\"\n                      color=\"grey13\"\n                    >\n                      <Flex\n                        fontFamily=\"Montserrat\"\n                        fontWeight=\"500\"\n                        className=\"pagination\"\n                        boxShadow=\"0px 3px 6px #00000029\"\n                        borderRadius=\"13\"\n                        marginTop=\"10px\"\n                        marginRight=\"5px \"\n                        color=\"grey2\"\n                        padding=\"5px 10px\"\n                        display=\"inline-block\"\n                      >\n                        <button\n                          onClick={() => previousPage()}\n                          disabled={!canPreviousPage}\n                        >\n                          <Box as=\"b\" fontWeight=\"500\" borderRadius=\"50%\">\n                            {' '}\n                            &lt;{' '}\n                          </Box>{' '}\n                          &nbsp;\n                        </button>{' '}\n                        <Box\n                          as=\"span\"\n                          color=\"black\"\n                          paddingRight=\"2px\"\n                          paddingBottom=\"3px\"\n                        >\n                          <Input\n                            variant=\"flushed\"\n                            size=\"18px\"\n                            width=\"25px\"\n                            _focus={{ color: 'none' }}\n                            textAlign=\"right\"\n                            fontSize=\"14px\"\n                            borderBottom=\"1.5px solid\"\n                            borderBottomColor=\"grey2\"\n                            ref={inputRef}\n                            type=\"number\"\n                            value={pageIndex + 1}\n                            onFocus={e => e.target.select()}\n                            onKeyUp={e => {\n                              if (e.key === 'Backspace') {\n                                e.target.select();\n                              }\n                            }}\n                            onChange={e => {\n                              const page = e.target.value\n                                ? Number(e.target.value) - 1\n                                : 0;\n                              gotoPage(page);\n                            }}\n                          />\n                        </Box>{' '}\n                        <Box textTransform=\"lowercase\" as=\"span\" color=\"black\">\n                          <span>of {pageOptions.length}</span>{' '}\n                        </Box>\n                        <button\n                          onClick={() => nextPage()}\n                          disabled={!canNextPage}\n                        >\n                          &nbsp;\n                          <Box as=\"b\" fontWeight=\"500\" borderRadius=\"50%\">\n                            {' '}\n                            {'  >'}\n                          </Box>\n                        </button>{' '}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                ) : (\n                  <NoContent height=\"80vh\" message=\"No Data Found\"></NoContent>\n                )}\n              </>\n            ) : (\n              <NoContent\n                height=\"80vh\"\n                message=\"Something Went Wrong\"\n              ></NoContent>\n            )}\n          </>\n        </>\n      )}\n      <PopupComponent\n        title=\"Delete Schedule\"\n        buttonHandler1={onClose}\n        width=\"450px\"\n        //footer={true}\n        isOpen={isOpen}\n        onClose={onClose}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2=\"Delete\"\n        buttonHandler1={onClose}\n        buttonHandler2={deleteScheduleHandler}\n      >\n        <Flex\n          justify=\"center\"\n          width=\"100%\"\n          align=\"center\"\n          justifyItems=\"center\"\n        >\n          <Text textAlign=\"center\">Are you sure delete this schedule ? </Text>\n        </Flex>\n      </PopupComponent>\n    </>\n  );\n}\n\nexport default TableComp;\n","// @ts-nocheck\nimport {\n  Flex,\n  HStack,\n  Icon,\n  Input,\n  Spacer,\n  Stack,\n  Table,\n  Text,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport PopupComponent from 'app/components/PopupComponent';\nimport InfoComponent from 'app/pages/Appium/components/InfoComponent';\nimport InputDateTime from 'app/pages/Appium/components/InputDateTime';\nimport { PaginatedTable } from 'app/pages/TestAnalytics/components/Table';\nimport { selecttestAnalyticsData } from 'app/pages/TestAnalytics/testAnalyticsSlice/selectors';\nimport SelectValueComponent from 'app/pages/UiAutomator/components/SelectValueComponent';\nimport { timeIntervalValue } from 'app/pages/Xcui/Features/XcUiMozarkTesting';\nimport React, { useEffect, useState } from 'react';\nimport { FiPlusSquare } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { stringSaprater } from 'utils/gernricfunction';\nimport { useManageScheduleSlice } from '../slice';\nimport {\n  selectManageScheduleDeleteError,\n  selectManageScheduleDeleteResponse,\n} from '../slice/selector';\nimport TableComp from './TableComp';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction ManageScheduleTable() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [getEditSchedule, setEditSchedule] = useState();\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n  const [getInterval, setInterval] = useState();\n  const { actions } = useManageScheduleSlice();\n  const isMobileTesting = usePlatformtypeHook()\n  const dispatch = useDispatch();\n\n  const editHandler = id => {\n    setEditSchedule(id);\n    onOpen();\n  };\n\n  const editScheduleHandler = () => {\n    //    console.log('getEdit', getEditSchedule);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'scheduleStatus',\n      },\n\n      // {\n      //   Header: 'Schedule ID',\n      //   accessor: 'uuid' || 'uuid.sessionId',\n      // },\n      {\n        Header: 'Project',\n        accessor: 'testExecutions[0].testParameters.projectName',\n      },\n      {\n        Header: 'Script',\n        accessor: 'testExecutions.applicationUrl',\n      },\n      {\n        Header: 'Build',\n        accessor: 'appVersion',\n      },\n      {\n        Header: 'StartTime',\n        accessor: 'scheduleConfiguration.startTime.dateTime.date.month',\n      },\n      {\n        Header: 'EndTime',\n        accessor: 'scheduleConfiguration.startTime.dateTime.date.year',\n      },\n      {\n        Header: 'Interval',\n        accessor: 'scheduleConfiguration.interval',\n      },\n\n      // {\n      //   Header: 'Device',\n      //   accessor: 'testExecutions[0].devices[0]',\n      // },\n      // {\n      //   Header: 'User',\n      //   accessor: 'testExecutions[0].testParameters.createdBy',\n      // },\n    ],\n    [],\n  );\n  const fetchData = (pageIndex, pageSize) => {\n    dispatch(\n      actions.loadManageSchedules({ page: pageIndex + 1, pageSize: pageSize ,\n      testType : isMobileTesting ? 'app-automation,mobile-interact' : 'lr-automation,lr-interact'\n      }),\n    );\n  };\n\n  //   if (\n  //     getDeleteScheduleResponse.hasOwnProperty('message') &&\n  //     getDeleteScheduleError == null\n  //   ) {\n\n  //     if (getDeleteScheduleResponse.message === 'Success') {\n\n  //       toast({\n  //         title: 'Deleted Successfully',\n  //         status: 'success',\n  //         isClosable: true,\n  //         position: 'bottom-right',\n  //       });\n  //      // dispatch(actions.loadManageSchedules({ page: 1, pageSize: 10 }));\n\n  //     } else {\n  //       toast({\n  //         title: getDeleteScheduleResponse.message,\n  //         status: 'error',\n  //         isClosable: true,\n  //         position: 'bottom-right',\n  //       });\n  //     }\n  //     dispatch(actions.deleteManageSheduleResponse({}));\n  //   }\n  //   if (getDeleteScheduleError === 1) {\n  //     toast({\n  //       title: 'Something went wrong',\n  //       status: 'error',\n  //       isClosable: true,\n  //       position: 'bottom-right',\n  //     });\n  //     dispatch(actions.deleteManageScheduleError(null));\n  //   }\n  // }, [getDeleteScheduleResponse, getDeleteScheduleError]);\n\n  return (\n    <>\n      <TableComp\n        leftIcon={<Icon color=\"grey1\" as={FiPlusSquare}></Icon>}\n        columns={columns}\n        fetchData={fetchData}\n        //data={manageScheduleData}\n        type=\"manageSchedule\"\n        editHandler={editHandler}\n      ></TableComp>\n      <PopupComponent\n        title=\"Edit Schedule\"\n        buttonHandler1={onClose}\n        width=\"600px\"\n        // footer={true}\n        isOpen={isOpen}\n        onClose={onClose}\n        buttonTitle1=\"Cancel\"\n        buttonTitle2=\"Update\"\n        buttonHandler2={editScheduleHandler}\n      >\n        <Stack\n          flexDirection=\"column\"\n          padding=\"10px 15px\"\n          alignContent=\"center\"\n          alignItems=\"center\"\n          width=\"100%\"\n        >\n          <Text paddingBottom=\"10px\">Scheduled Time</Text>\n          <HStack width=\"100%\">\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              Start date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <Spacer></Spacer>\n            <InputDateTime\n              selectedDate={startDate}\n              setSelectDate={setStartDate}\n            ></InputDateTime>\n          </HStack>\n          <HStack width=\"100%\">\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              End date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <Spacer></Spacer>\n            <InputDateTime\n              selectedDate={endDate}\n              setSelectDate={setEndDate}\n            ></InputDateTime>\n          </HStack>\n          <HStack width=\"100%\">\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              Interval\n              <InfoComponent labelmessage=\"Interval between two test execution a single device(in minutes)\"></InfoComponent>\n            </Text>\n            <Spacer></Spacer>\n            <SelectValueComponent\n              isShadow={true}\n              selectOptions={timeIntervalValue}\n              selectValue={getInterval}\n              setSelectValue={setInterval}\n            ></SelectValueComponent>\n          </HStack>\n        </Stack>\n      </PopupComponent>\n    </>\n  );\n}\n\nexport default ManageScheduleTable;\n","// @ts-nocheck\nimport { Flex, HStack, Stack, Text } from '@chakra-ui/react';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport SubContainer from 'app/components/SubContainer';\nimport Subheader from 'app/components/Subheader';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FilterTab from './components/FilterTab';\nimport ManageScheduleTable from './components/ManageScheduleTable';\nimport { useManageScheduleSlice } from './slice';\nimport {\n  selectLoadingManageSchedule,\n  selectManageScheduleData,\n  selectManageScheduleDataError,\n  selectManageScheduleDeleteLoading,\n} from './slice/selector';\n\nconst tabroute = ['Manage Schedules'];\n\nexport function ManageScheduleTest() {\n  const { actions } = useManageScheduleSlice();\n  const dispatch = useDispatch();\n  const manageScheduleData = []; //useSelector(selectManageScheduleData);\n  const isLoading = false; // useSelector(selectLoadingManageSchedule);\n  const manageScheduleError = null; //useSelector(selectManageScheduleDataError);\n\n\n  return (\n    <Flex flexDirection=\"column\" width=\"100%\" align=\"center\">\n\n          <Flex width=\"100%\" flexDirection=\"column\">\n            {/* {false ? (\n              <LoadingComponent height=\"500px\"></LoadingComponent>\n            ) : ( */}\n            <>\n              {manageScheduleError === null || true ? (\n                <>\n                  {manageScheduleData.length > 0 || true ? (\n                    <ManageScheduleTable\n                    // fetchData={fetchData}\n                    //   manageScheduleData={manageScheduleData}\n                    ></ManageScheduleTable>\n                  ) : (\n                    <NoContent\n                      height=\"80vh\"\n                      message=\"No Data Found\"\n                    ></NoContent>\n                  )}\n                </>\n              ) : (\n                <NoContent\n                  height=\"350px\"\n                  message=\"Could not Load\"\n                ></NoContent>\n              )}\n            </>\n            {/* )} */}\n          </Flex>\n        {/* </Stack> */}\n      {/* </SubContainer> */}\n    </Flex>\n  );\n}\n\nexport default ManageScheduleTest;\n"],"sourceRoot":""}