{"version":3,"sources":["app/pages/TestAnalytics/testAnalyticsSlice/selectors.ts","app/pages/TestAnalytics/components/AutomationIcon.tsx","app/pages/TestAnalytics/components/PaginationTableServerSide.tsx","app/components/FilterCard.tsx","app/pages/TestAnalytics/components/CustomDateRangeComp.tsx","app/pages/TestAnalytics/components/TestAnlyticsFilterComponent.tsx","app/pages/TestAnalytics/components/CompleteStatus.tsx","app/pages/TestAnalytics/components/OnGoingStatus.tsx","app/pages/TestAnalytics/components/ScheduleStatus.tsx","app/pages/TestAnalytics/Features/StatusTable.tsx","app/pages/TestAnalytics/index.tsx","styles/Assets/Automation.svg","app/pages/DebugReportGenerate/components/SelectOption.tsx","app/pages/Appium/components/CustomTabButton.tsx","app/pages/TestAnalytics/components/TestAnalyticsTableWrapper.tsx"],"names":["selectSlice","state","testAnalytics","initialState","selecttestAnalyticsData","createSelector","testAnalyticsData","selecttestAnalyticsLoading","sessionIdDetail","loading","selecttestAnalyticsError","error","selectPageCount","sessionId","pageIndexValue","testAnalyticPageCount","selectSeacrhKey","getSearchKey","selectPageIndexTest","pageIndexValueTest","selectPageIndexSchedule","getFilterKeySchedule","pageIndexValueSchedule","selectPageIndexOngoing","getFilterKeyOngoing","pageIndexValueOngoing","getFilterKey","resetKeyFlag","AutomationIcon","_jsxs","Flex","as","padding","children","_jsx","Img","width","marginLeft","height","src","automationIcon","alt","PaginationTableServerSide","_ref","columns","leftIcon","rightHoverIcon","type","editUserClickHandler","deleteUserClickHandler","fetchData","getPageIndex","testType","getTestTypeTab","history","useNavigate","username","GetLastAuthUser","last_auth","concat","UserPool","getClientId","reg","RegExp","document","cookie","match","inputRef","useRef","homePageActions","useHomePageSlice","getPageInput","setPageInput","useSelector","selectPageIndexInisialValue","useDispatch","useState","getInputFlag","setInputFlag","timer","setTimer","loadingTestAnalytics","getPageCount","testAnalyticserror","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","pageIndex","pageSize","useTable","data","manualPagination","autoResetPageIndex","usePagination","useEffect","_Fragment","LoadingComponent","length","flexDirection","paddingTop","backgroundColor","CustomTable","fontFamily","fontWeight","variant","Thead","color","map","headerGroup","Tr","getHeaderGroupProps","Th","minWidth","paddingLeft","paddingRight","headers","column","textTransform","whiteSpace","getHeaderProps","render","minW","Tbody","row","i","textDecoration","cursor","className","cells","original","uuid","onClick","id","_id","console","log","ROUTES","LR_SESSION_SUMMARY","MOBILE_SESSION_SUMMARY","_hover","background","getRowProps","Td","Icon","title","w","h","AiOutlineSetting","RiDeviceLine","testId","MdOutlineTouchApp","cell","index","testStatus","getCellProps","dateTimeConverter","testStartTime","Date","createdDate","toGMTString","slice","user_role","Text","bg","align","borderRadius","status","email","Badge","sx","display","justify","alignItems","MdOutlineAnalytics","user_name","HStack","e","FaTrashAlt","MdEdit","justifyContent","marginRight","boxShadow","marginTop","disabled","Box","paddingBottom","Input","size","_focus","textAlign","fontSize","borderBottom","borderBottomColor","ref","value","onFocus","target","select","onKeyUp","key","onChange","Number","clearTimeout","setTimeout","pageInputHandler","NoContent","message","FilterCard","isOpenFilter","setEnabledFilter","setOpenFilter","setDateRangeType","setTestStatus","isDateRangeType","isTestStatus","testStatusFilter","setTestStatusFilter","dateRangeFilter","setDateRangeFilter","zIndex","Stack","Checkbox","isChecked","colorScheme","checked","Spacer","ButtonComp","name","buttonHandler","clearFilterOptionHandler","isDateRange","addFilterOptionHandler","CustomDateRangeComp","setFromDate","fromDate","setToDate","toDate","dateRangeOptionList","TestAnlyticsFilterComponent","testStatusOptionList","tabType","selectedTestStatus","getSelectedFromDate","setSelectedFromDate","getSelectedToDate","setSelectedToDate","setSearchValue","getEnabledFilter","selectedDateRange","toLocaleDateString","dispatch","testAnalyticsactions","useTestAnalyticsSlice","getFullYear","getMonth","getDate","getDay","getDateRageValue","alignContent","flexWrap","PopoverComponent","top","button","logo","RiFilter3Line","SelectOption","selectValue","setSelectValue","optionList","placeholder","applyDateRangeHandler","loadtestAnalyticsData","searchKey","resetPageIndex","RiRefreshLine","applyResetDateRangeHandler","triggerSerachKey","CompleteStatus","tabStatus","getSearchValue","React","useMemo","Header","accessor","props","OnGoingStatus","ScheduleStatus","StatusTable","setSearchItemValue","setTabStatus","setTestTypeTab","getPageIndexOngoing","getPageIndexSchedule","useLocation","getTabIndexStatus","setStatusIndex","Tabs","defaultIndex","isLazy","TabList","borderBottomWidth","CustomTabButton","flex","TestTpyeTabComp","setTabIndex","TabPanels","minH","TabPanel","TestAnalyticsTableWrapper","TestNotification","searchItemValue","tabroute","infoStatusData","running","queued","sheduled","Subheader","isTestType","path","SubContainer","Select","border","borderColor","margin","item","style","Tab","_selected"],"mappings":"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","file":"static/js/19.f79b5f30.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'types';\nimport { initialState } from '.';\n\nconst selectSlice = (state: RootState) => state.testAnalytics || initialState;\n\nexport const selecttestAnalyticsData = createSelector(\n  [selectSlice], //\n  state => state.testAnalyticsData,\n);\n\nexport const selecttestSessionIdDetails = createSelector(\n  [selectSlice], //\n  state => state.sessionIdDetail,\n);\n\nexport const selecttestAnalyticsLoading = createSelector(\n  [selectSlice], //\n  state => state.loading,\n);\n\nexport const selecttestAnalyticsError = createSelector(\n  [selectSlice],\n  state => state.error,\n);\n\nexport const selectSessionId = createSelector(\n  [selectSlice],\n  state => state.sessionId,\n);\n\nexport const selectPageIndexInisialValue = createSelector(\n  [selectSlice],\n  state => state.pageIndexValue,\n);\n\nexport const selectPageCount = createSelector(\n  [selectSlice],\n  state => state.testAnalyticPageCount,\n);\n\nexport const selectSeacrhKey = createSelector(\n  [selectSlice],\n  state => state.getSearchKey,\n);\n\nexport const selectPageIndexTest = createSelector(\n  [selectSlice],\n  state => state.pageIndexValueTest,\n);\n\nexport const selectFilterKeySchedule = createSelector(\n  [selectSlice],\n  state => state.getFilterKeySchedule,\n);\n\nexport const selectPageIndexSchedule = createSelector(\n  [selectSlice],\n  state => state.pageIndexValueSchedule,\n);\nexport const selectFilterKeyOngoing = createSelector(\n  [selectSlice],\n  state => state.getFilterKeyOngoing,\n);\n\nexport const selectPageIndexOngoing = createSelector(\n  [selectSlice],\n  state => state.pageIndexValueOngoing,\n);\n\nexport const selectFilterKey = createSelector(\n  [selectSlice],\n  state => state.getFilterKey,\n);\n\nexport const selectResetFlag = createSelector(\n  [selectSlice],\n  state => state.resetKeyFlag,\n);\n","import { Flex, Img } from '@chakra-ui/react';\nimport React from 'react';\nimport automationIcon from '../../../../styles/Assets/Automation.svg';\nfunction AutomationIcon() {\n  return (\n    <Flex as=\"span\" padding=\"0px\">\n      {' '}\n      <Img\n        width=\"22px\"\n        marginLeft=\"5px\"\n        height=\"22px\"\n        src={automationIcon}\n        alt=\"debug\"\n      ></Img>\n    </Flex>\n  );\n}\n\nexport default AutomationIcon;\n","// @ts-nocheck\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table as CustomTable,\n  Thead,\n  Tr,\n  Img,\n  Text,\n  Box,\n  // Container,\n  Td,\n  Th,\n  Tbody,\n  Input,\n  Flex,\n  Icon,\n  Center,\n  HStack,\n  Badge,\n} from '@chakra-ui/react';\n\nimport { useTable, usePagination } from 'react-table';\n\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ImStop } from 'react-icons/im';\n\nimport { FaTrashAlt } from 'react-icons/fa';\nimport {\n  MdEdit,\n  MdOutlineAnalytics,\n  MdOutlineMonitor,\n  MdOutlineTouchApp,\n} from 'react-icons/md';\n\nimport { AiOutlineSetting } from 'react-icons/ai';\nimport { dateTimeConverter } from 'utils/gernricfunction';\nimport UserPool from 'Authentication/configuration/UserPool';\nimport { FiTv } from 'react-icons/fi';\nimport { RiDeviceLine } from 'react-icons/ri';\n\nimport { HomePageActions, useHomePageSlice } from 'app/pages/HomePage/slice';\nimport { selectPageIndexInisialValue } from 'app/pages/HomePage/slice/selectors';\nimport {\n  selectPageCount,\n  selecttestAnalyticsData,\n  selecttestAnalyticsError,\n  selecttestAnalyticsLoading,\n} from '../testAnalyticsSlice/selectors';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport ROUTES from 'app/constants/Routes';\nfunction PaginationTableServerSide({\n  columns,\n  leftIcon,\n  rightHoverIcon,\n  type,\n  // getTabIndex,\n  editUserClickHandler,\n  deleteUserClickHandler,\n  //tabType,\n  fetchData,\n  getPageIndex,\n  // getSearchKey,\n  // getFilterKey,\n  testType,\n  getTestTypeTab\n}) {\n  let history = useNavigate();\n  const getRowId = id => {\n    console.log(testType , id)\n    if (testType === 'lr-interact' || testType === 'lr-automation') {\n      \n      history(`${ROUTES.LR_SESSION_SUMMARY}/${id}`);\n    } else {\n      history(`${ROUTES.MOBILE_SESSION_SUMMARY}/${id}`);\n    }\n\n    //  console.log(id)\n  };\n\n  const GetLastAuthUser = () => {\n    const last_auth = `CognitoIdentityServiceProvider.${UserPool.getClientId()}.LastAuthUser`;\n    const reg = new RegExp(`(?<=${last_auth}=)[^;]*`);\n    try {\n      return document.cookie.match(reg)[0];\n    } catch {\n      return null;\n    }\n  };\n\n  const username = GetLastAuthUser();\n  const inputRef = useRef();\n  //const { actions } = useManageUserSlice();\n  const { homePageActions } = useHomePageSlice();\n  const getPageIndexinit = useSelector(selectPageIndexInisialValue);\n  const dispatch = useDispatch();\n  const [getPageInput, setPageInput] = useState(1);\n  const [getInputFlag, setInputFlag] = useState(false);\n  const [timer, setTimer] = useState(null);\n  const loadingTestAnalytics = useSelector(selecttestAnalyticsLoading);\n  const getPageCount = useSelector(selectPageCount);\n  const testAnalyticserror = useSelector(selecttestAnalyticsError);\n  const testAnalyticsData = useSelector(selecttestAnalyticsData);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    //setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data: testAnalyticsData,\n      initialState: { pageIndex: getPageIndex, pageSize: 20 },\n      manualPagination: true,\n      pageCount: getPageCount,\n      //autoResetPage: true,\n      // manualPagination: falses,\n      autoResetPageIndex: true,\n    },\n    usePagination,\n  );\n\n  useEffect(() => {\n    if (pageIndex !== 0 || getPageIndex !== 0) {\n      fetchData(pageIndex, pageSize);\n    }\n  }, [pageIndex]);\n\n  useEffect(() => {\n    gotoPage(getPageIndex);\n\n    if (getPageIndex === -1) {\n      gotoPage(0);\n      fetchData(0, pageSize);\n    }\n    setInputFlag(false);\n  }, [getPageIndex]);\n\n  function pageInputHandler(page) {\n    clearTimeout(timer);\n    setTimer(setTimeout(() => gotoPage(page), 1500));\n  }\n\n  // Render the UI for your table\n  return (\n    <>\n      {loadingTestAnalytics ? (\n        <LoadingComponent height=\"80vh\"></LoadingComponent>\n      ) : (\n        <>\n          {testAnalyticserror === null ? (\n            <>\n              {testAnalyticsData.length > 0 ? (\n                <Flex\n                  flexDirection=\"column\"\n                  paddingTop=\"5px\"\n                  width=\"100%\"\n                  backgroundColor=\"white\"\n                >\n                  <CustomTable\n                    fontFamily=\"Montserrat\"\n                    fontWeight=\"500\"\n                    variant=\"simple\"\n                    {...getTableProps()}\n                  >\n                    <Thead fontWeight=\"500\" color=\"grey1\">\n                      {headerGroups.map(headerGroup => (\n                        <Tr {...headerGroup.getHeaderGroupProps()}>\n                          {leftIcon && (\n                            <Th\n                              fontFamily=\"Montserrat\"\n                              minWidth=\"0px\"\n                              paddingLeft=\"0px\"\n                              paddingRight=\"0px\"\n                            ></Th>\n                          )}\n                          {headerGroup.headers.map(column => (\n                            <Th\n                              fontFamily=\"Montserrat\"\n                              textTransform=\"capitalize\"\n                              padding=\"2px 5px\"\n                              color=\"grey1\"\n                              whiteSpace=\"nowrap\"\n                              {...column.getHeaderProps()}\n                            >\n                              {column.render('Header')}\n                            </Th>\n                          ))}\n                          {rightHoverIcon && <Th minW=\"5px\" padding=\"0px\"></Th>}\n                        </Tr>\n                      ))}\n                    </Thead>\n                    <Tbody\n                      fontWeight=\"500\"\n                      color=\"grey13\"\n                      {...getTableBodyProps()}\n                    >\n                      {page.map((row, i) => {\n                        prepareRow(row);\n\n                        return (\n                          <Tr\n                            textDecoration=\"none\"\n                            //bg=\"yellow\"\n                            // onMouseOver={() => actionBoxShow(i)}\n                            // onMouseOut={() => actionBoxHide(i)}\n                            //  id = { row.cells[i] ? row.cells[i].row.original.id  : ''}\n                            cursor={type === 'testAnalyticsTable' && 'pointer'}\n                  \n                            className=\"testTr\"\n                            // data-testAnalytics-id={\n                            //   type === 'testAnalyticsTable' &&\n                            //   row.cells[0].row.original.uuid._id\n                            // }\n\n                            // data-manageUser-id={\n                            //   type === 'manageUserTable' &&\n                            //   row.cells[0].row.original.email\n                            // }\n                            data-scriptappbuild-id={\n                              (type === 'deleteappbuilds' ||\n                                type === 'deletetestsuite') &&\n                              row.cells[0].row.original.uuid\n                            }\n                            data-manageproject-id={\n                              type === 'manangeProjectTable' &&\n                              row.cells[0].row.original.uuid\n                            }\n                            onClick={() => {\n                              if (type === 'testAnalyticsTable') {\n                                getRowId(row.cells[0].row.original.uuid._id);\n                                // localStorage.setItem(\n                                //   'testStatus',\n                                //   row.cells[0].row.original.testStatus,\n                                // );\n                              }\n                            }}\n                            _hover={\n                              rightHoverIcon ? { background: 'grey14' } : ''\n                            }\n                            {...row.getRowProps()}\n                          >\n                            {/* {console.log(row.cells[0].row.original.testStatus)} */}\n                            {/* get the row render */}\n                            {/* {console.log(row.cells[0].row.original)} */}\n\n                            {leftIcon && (\n                              <Td\n                                minWidth=\"10px\"\n                                paddingLeft=\"10px\"\n                                paddingRight=\"5px\"\n                              >\n                                {type === 'testAnalyticsTable' ? (\n                                  row.cells[0].row.original.testType ===\n                                  'lr-automation' ? (\n                                    <Icon\n                                      title=\"LR Automation\"\n                                      w=\"22px\"\n                                      h=\"22px\"\n                                      color=\"grey1\"\n                                      as={AiOutlineSetting}\n                                    ></Icon>\n                                  ) : (row.cells[0].row.original.testType ===\n                                    'lr-interact' || row.cells[0].row.original.testType ===\n                                    'mobile-interact' ) ? (\n                                    <Icon\n                                      w=\"22px\"\n                                      title=\"LR Interact\"\n                                      h=\"22px\"\n                                      color=\"grey1\"\n                                      as={RiDeviceLine}\n                                    ></Icon>\n                                  ) : row.cells[0].row.original.uuid.testId !==\n                                    '' ? (\n                                    <Icon\n                                      w=\"22px\"\n                                      h=\"22px\"\n                                      title=\"App Automation\"\n                                      color=\"grey1\"\n                                      as={AiOutlineSetting}\n                                    ></Icon>\n                                  ) : (\n                                    <Icon\n                                      color=\"grey1\"\n                                      w=\"22px\"\n                                      h=\"22px\"\n                                      title=\"Manual\"\n                                      as={MdOutlineTouchApp}\n                                    ></Icon>\n                                  )\n                                ) : (\n                                  leftIcon\n                                )}\n                              </Td>\n                            )}\n\n                            {row.cells.map((cell, index) => {\n                              // {console.log(cell.render('Cell').props.data[i].id)}\n                              return (\n                                <Td\n                                  color={\n                                    type === 'testAnalyticsTable'\n                                      ? row.cells[0].row.original.testStatus ===\n                                        'Started'\n                                        ? '#0d5bb5'\n                                        : row.cells[0].row.original\n                                            .testStatus === 'Failed'\n                                        ? '#EF4E90'\n                                        : ''\n                                      : ''\n                                  }\n                                  minWidth=\"75px\"\n                                  minWidth={\n                                    type === 'testAnalyticsTable' &&\n                                    index === 0 &&\n                                    '90px'\n                                  }\n                                  // color={\n                                  //   type === 'testAnalyticsTable' &&\n                                  //   row.cells[0].row.original.testStatus === 'Completed'\n                                  //     ? ' '\n                                  //     : '#0d5bb5'\n                                  // }\n                                  textTransform=\"none\"\n                                  padding=\"2px 3px\"\n                                  {...cell.getCellProps()}\n                                >\n                                  {/* get the data of particular cell */}\n                                  {/* {console.log(row.cells[0].row.original.user_role)} */}\n\n                                  {(index === 0 &&\n                                    type === 'testAnalyticsTable' &&\n                                    ((row.cells[0].row.original.testStatus ===\n                                      'Completed' &&\n                                      'Success') ||\n                                      (row.cells[0].row.original.testStatus ===\n                                        'Aborted' &&\n                                        'User Aborted'))) ||\n                                    (index === 1 &&\n                                      type === 'testAnalyticsTable' &&\n                                      dateTimeConverter(\n                                        row.cells[0].row.original.testStartTime,\n                                      )) ||\n                                    (index === 2 &&\n                                      type === 'testAnalyticsTable' &&\n                                      row.cells[0].row.original.uuid\n                                        .sessionId &&\n                                      row.cells[0].row.original.uuid\n                                        .sessionId) ||\n                                    (index == 1 &&\n                                      type === 'appBuilds' &&\n                                      new Date(\n                                        //cell.render('Cell').props.data[i].createdDate,\n                                        row.cells[0].row.original.createdDate,\n                                      )\n                                        .toGMTString()\n                                        .slice(5, 16)) ||\n                                    (index === 1 &&\n                                      type === 'manageUserTable' &&\n                                      row.cells[0].row.original.user_role ===\n                                        'SystemAdmin' && (\n                                        <Text\n                                          bg=\"blue1\"\n                                          color=\"white\"\n                                          align=\"center\"\n                                          borderRadius=\"20px\"\n                                          width=\"120px\"\n                                        >\n                                          {/* {cell.render('Cell').props.data[i].role} */}\n                                          {row.cells[0].row.original.user_role}\n                                        </Text>\n                                      )) ||\n                                    (index === 1 &&\n                                      type === 'manageUserTable' &&\n                                      row.cells[0].row.original.user_role ===\n                                        'TenantAdmin' && (\n                                        <Text\n                                          bg=\"blue1\"\n                                          color=\"white\"\n                                          align=\"center\"\n                                          borderRadius=\"20px\"\n                                          width=\"120px\"\n                                        >\n                                          {/* {cell.render('Cell').props.data[i].role} */}\n                                          {row.cells[0].row.original.user_role}\n                                        </Text>\n                                      )) ||\n                                    (index === 3 &&\n                                      type === 'manageUserTable' &&\n                                      '*********') ||\n                                    (type === 'manageUserTable' &&\n                                      index === 2 &&\n                                      row.cells[0].row.original.status ===\n                                        'FORCE_CHANGE_PASSWORD' && (\n                                        <Text>\n                                          {row.cells[0].row.original.email}{' '}\n                                          <Badge\n                                            borderRadius=\"20px\"\n                                            padding=\"0px 10px\"\n                                            variant=\"outline\"\n                                          >\n                                            {' '}\n                                            not verified{' '}\n                                          </Badge>\n                                        </Text>\n                                      )) ||\n                                    cell.render('Cell')}\n                                </Td>\n                              );\n                            })}\n                            {rightHoverIcon && (\n                              <Td\n                                // minWidth=\"10px\"\n                                minWidth=\"40px\"\n                                padding=\"0px 0px\"\n                                paddingLeft=\"4px\"\n                                // paddingRight=\"0px\"\n                                // minWidth={\n                                //   type === 'testAnalyticsTable'\n                                //     ? '50px'\n                                //     : '95px'\n                                // }\n                              >\n                                <Flex\n                                  sx={{\n                                    '.testTr:hover &': {\n                                      display: 'block',\n                                    },\n                                  }}\n                                  id={`box${i}`}\n                                  display=\"none\"\n                                  justify=\"center\"\n                                  alignItems=\"center\"\n                                >\n                                  {type === 'testAnalyticsTable' && (\n                                    <Icon\n                                      as={MdOutlineAnalytics}\n                                      w=\"25px\"\n                                      color=\"grey1\"\n                                      h=\"25px\"\n                                    ></Icon>\n                                  )}\n\n                                  {type === 'appbuildstable' && rightHoverIcon}\n                                  {type === 'manageUserTable' &&\n                                    (row.cells[0].row.original.user_role ===\n                                      'TenantUser' ||\n                                      row.cells[0].row.original.user_name ===\n                                        username) && (\n                                      <HStack align=\"center\" h=\"30px\">\n                                        <Flex\n                                          w=\"30px\"\n                                          data-icon-id={`delete-user-icon-button-${row.cells[0].row.original.user_name}`}\n                                          h=\"30px\"\n                                          bg=\"white\"\n                                          align=\"center\"\n                                          justify=\"center\"\n                                          borderRadius=\"5px\"\n                                          cursor=\"pointer\"\n                                          onClick={e =>\n                                            deleteUserClickHandler(\n                                              row.cells[0].row.original\n                                                .user_name,\n                                            )\n                                          }\n                                          //   onClick={e => dispatch(actions.deleteUserDetail(row.cells[0].row.original.id)) }\n                                        >\n                                          <Icon\n                                            color=\"grey1\"\n                                            as={FaTrashAlt}\n                                          ></Icon>\n                                        </Flex>\n                                        <Flex\n                                          //id = {row.cells[0].row.original.id}\n                                          data-icon-id={`edit-user-icon-button-${row.cells[0].row.original.user_name}`}\n                                          w=\"30px\"\n                                          h=\"30px\"\n                                          bg=\"white\"\n                                          align=\"center\"\n                                          justify=\"center\"\n                                          cursor=\"pointer\"\n                                          borderRadius=\"5px\"\n                                          onClick={e =>\n                                            editUserClickHandler(\n                                              row.cells[0].row.original,\n                                            )\n                                          }\n                                        >\n                                          <Icon\n                                            color=\"grey1\"\n                                            as={MdEdit}\n                                          ></Icon>\n                                        </Flex>\n                                      </HStack>\n                                    )}\n                                  {type === 'manangeProjectTable' && (\n                                    <HStack align=\"center\" h=\"30px\">\n                                      <Flex\n                                        w=\"30px\"\n                                        h=\"30px\"\n                                        data-icon-id={`delete-project-icon-button-${row.cells[0].row.original.uuid}`}\n                                        bg=\"white\"\n                                        align=\"center\"\n                                        justify=\"center\"\n                                        borderRadius=\"5px\"\n                                        cursor=\"pointer\"\n                                        onClick={e =>\n                                          deleteUserClickHandler(\n                                            row.cells[0].row.original.uuid,\n                                          )\n                                        }\n                                        // data-delete-project-button-id={\n                                        //   row.cells[0].row.original.uuid\n                                        // }\n                                        //   onClick={e => dispatch(actions.deleteUserDetail(row.cells[0].row.original.id)) }\n                                      >\n                                        <Icon\n                                          color=\"grey1\"\n                                          as={FaTrashAlt}\n                                        ></Icon>\n                                      </Flex>\n                                      <Flex\n                                        //id = {row.cells[0].row.original.id}\n                                        data-icon-id={`edit-project-icon-button-${row.cells[0].row.original.uuid}`}\n                                        w=\"30px\"\n                                        h=\"30px\"\n                                        bg=\"white\"\n                                        align=\"center\"\n                                        justify=\"center\"\n                                        cursor=\"pointer\"\n                                        borderRadius=\"5px\"\n                                        onClick={e =>\n                                          editUserClickHandler(\n                                            row.cells[0].row.original,\n                                          )\n                                        }\n                                      >\n                                        <Icon color=\"grey1\" as={MdEdit}></Icon>\n                                      </Flex>\n                                    </HStack>\n                                  )}\n                                  {(type === 'deleteappbuilds' ||\n                                    type === 'deletetestsuite') && (\n                                    <HStack align=\"center\" h=\"30px\">\n                                      <Flex\n                                        w=\"30px\"\n                                        h=\"30px\"\n                                        bg=\"white\"\n                                        align=\"center\"\n                                        justify=\"center\"\n                                        borderRadius=\"5px\"\n                                        cursor=\"pointer\"\n                                        data-delete-button-id={\n                                          row.cells[0].row.original.uuid\n                                        }\n                                        onClick={e =>\n                                          deleteUserClickHandler(\n                                            row.cells[0].row.original.uuid,\n                                          )\n                                        }\n                                        //   onClick={e => dispatch(actions.deleteUserDetail(row.cells[0].row.original.id)) }\n                                      >\n                                        <Icon\n                                          color=\"grey1\"\n                                          as={FaTrashAlt}\n                                        ></Icon>\n                                      </Flex>{' '}\n                                    </HStack>\n                                  )}\n                                </Flex>\n                              </Td>\n                            )}\n                          </Tr>\n                        );\n                      })}\n                    </Tbody>\n                  </CustomTable>\n                  {/* \n        Pagination can be built however you'd like. \n        This is just a very basic UI implementation:\n      */}\n                  <Flex\n                    justifyContent=\"flex-end\"\n                    padding=\"10px 0px\"\n                    marginRight=\"10px\"\n                    color=\"grey13\"\n                  >\n                    <Flex\n                      fontFamily=\"Montserrat\"\n                      fontWeight=\"500\"\n                      className=\"pagination\"\n                      boxShadow=\"0px 3px 6px #00000029\"\n                      borderRadius=\"13\"\n                      marginTop=\"10px\"\n                      marginRight=\"5px \"\n                      color=\"grey2\"\n                      padding=\"5px 10px\"\n                      display=\"inline-block\"\n                    >\n                      <button\n                        onClick={() => {\n                          previousPage();\n                          setInputFlag(false);\n                        }}\n                        disabled={!canPreviousPage}\n                      >\n                        <Box as=\"b\" fontWeight=\"500\" borderRadius=\"50%\">\n                          {' '}\n                          &lt;{' '}\n                        </Box>{' '}\n                        &nbsp;\n                      </button>{' '}\n                      <Box\n                        as=\"span\"\n                        color=\"black\"\n                        paddingRight=\"2px\"\n                        paddingBottom=\"3px\"\n                      >\n                        <Input\n                          variant=\"flushed\"\n                          size=\"18px\"\n                          width=\"25px\"\n                          onClick={() => setInputFlag(true)}\n                          _focus={{ color: 'none' }}\n                          textAlign=\"right\"\n                          fontSize=\"14px\"\n                          borderBottom=\"1.5px solid\"\n                          borderBottomColor=\"grey2\"\n                          ref={inputRef}\n                          type=\"number\"\n                          value={getInputFlag ? getPageInput : pageIndex + 1}\n                          onFocus={e => e.target.select()}\n                          onKeyUp={e => {\n                            if (e.key === 'Backspace') {\n                              e.target.select();\n                            }\n                          }}\n                          onChange={e => {\n                            const page = e.target.value\n                              ? Number(e.target.value) - 1\n                              : 0;\n                            setPageInput(page + 1);\n                            pageInputHandler(page);\n                            //gotoPage(page);\n                          }}\n                        />\n                      </Box>{' '}\n                      <Box textTransform=\"lowercase\" as=\"span\" color=\"black\">\n                        <span>of {pageOptions.length}</span>{' '}\n                      </Box>\n                      <button\n                        onClick={() => {\n                          nextPage();\n                          setInputFlag(false);\n                        }}\n                        disabled={!canNextPage}\n                      >\n                        &nbsp;\n                        <Box as=\"b\" fontWeight=\"500\" borderRadius=\"50%\">\n                          {' '}\n                          {'  >'}\n                        </Box>\n                      </button>{' '}\n                    </Flex>\n                  </Flex>\n                </Flex>\n              ) : (\n                <NoContent message=\"No Data Found\"></NoContent>\n              )}\n            </>\n          ) : (\n            <NoContent message=\"Something went wrong\"></NoContent>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n\nexport default PaginationTableServerSide;\n","import { Checkbox, Flex, HStack, Spacer, Stack, Text } from '@chakra-ui/react';\nimport CheckBoxComp from 'app/pages/AppProfiling/components/CheckBoxComp';\nimport React, { useState } from 'react';\nimport ButtonComp from './ButtonComp';\n\nfunction FilterCard({\n  isOpenFilter,\n  setEnabledFilter,\n  setOpenFilter,\n  setDateRangeType,\n  setTestStatus,\n  isDateRangeType,\n  isTestStatus,\n}) {\n  const [testStatusFilter, setTestStatusFilter] = useState(false);\n  const [dateRangeFilter, setDateRangeFilter] = useState(false);\n\n  // console.log(testStatusFilter)\n  // console.log(dateRangeFilter)\n  const addFilterOptionHandler = () => {\n    setEnabledFilter({\n      isTestStatus: testStatusFilter,\n      isDateRange: dateRangeFilter,\n    });\n\n    if (!dateRangeFilter) {\n      setDateRangeType('');\n    }\n    if (!testStatusFilter) {\n      setTestStatus('');\n    }\n\n    setOpenFilter(false);\n  };\n  const clearFilterOptionHandler = () => {\n    setEnabledFilter({ isTestStatus: false, isDateRange: false });\n    setTestStatusFilter(false);\n    setDateRangeFilter(false);\n    setOpenFilter(false);\n    setDateRangeType('');\n  };\n\n  return (\n    <Flex\n      zIndex={2}\n      //w=\"180px\"\n      h=\"200px\"\n      bg=\"white\"\n      //   display={isOpenFilter ? 'block' : 'none'}\n      marginTop=\"5px\"\n      borderRadius=\"5px\"\n      //padding=\"10px\"\n      // boxShadow=\"0px 3px 6px #00000029\"\n      marginLeft=\"1px\"\n      //position=\"absolute\"\n    >\n      <Stack height=\"100%\" width=\"100%\">\n        {isTestStatus && (\n          <HStack>\n            <Checkbox\n              data-cheexbox-id=\"filter-check-test-status\"\n              isChecked={testStatusFilter}\n              colorScheme=\"red\"\n              onChange={e => setTestStatusFilter(e.target.checked)}\n            ></Checkbox>\n\n            <Text>Test Status</Text>\n          </HStack>\n        )}\n        {isDateRangeType && (\n          <HStack>\n            <Checkbox\n              data-cheexbox-id=\"filter-check-date-range\"\n              colorScheme=\"red\"\n              isChecked={dateRangeFilter}\n              onChange={e => setDateRangeFilter(e.target.checked)}\n            ></Checkbox>\n\n            <Text>Date Range</Text>\n          </HStack>\n        )}\n\n        <Spacer />\n        <HStack>\n          <ButtonComp\n            name=\"clear-filter-button\"\n            marginLeft=\"0px\"\n            color=\"#7E8299\"\n            padding=\"4px\"\n            backgroundColor=\"white\"\n            fontWeight={500}\n            fontSize=\"12px\"\n            buttonHandler={clearFilterOptionHandler}\n          >\n            clear\n          </ButtonComp>\n          <Spacer />\n          <ButtonComp\n            buttonHandler={addFilterOptionHandler}\n            padding=\"4px\"\n            name=\"apply-filter-button\"\n            fontWeight={500}\n            fontSize=\"12px\"\n            marginLeft=\"0px\"\n            backgroundColor=\"white\"\n          >\n            Add\n          </ButtonComp>\n        </HStack>\n      </Stack>\n    </Flex>\n  );\n}\n\nexport default FilterCard;\n","import { HStack, Input, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction CustomDateRangeComp({ setFromDate, fromDate, setToDate, toDate }) {\n  return (\n    <HStack\n      // bg={dateRange === 'custom' ? 'white3' : 'none'}\n      paddingLeft=\"10px\"\n      borderRadius=\"5px\"\n      // onClick={() => setDateRange('custom')}\n    >\n      <Text whiteSpace=\"nowrap\">From</Text>\n      <Input\n        h=\"27px\"\n        type=\"Date\"\n        onChange={e => setFromDate(e.target.value)}\n        value={fromDate}\n        //max={new Date().toLocaleDateString('en-ca')}\n      ></Input>\n      <Text whiteSpace=\"nowrap\">To</Text>\n      <Input\n        h=\"27px\"\n        type=\"Date\"\n        onChange={e => setToDate(e.target.value)}\n        value={toDate}\n        // max={new Date().toLocaleDateString('en-ca')}\n      ></Input>\n    </HStack>\n  );\n}\n\nexport default CustomDateRangeComp;\n","// @ts-nocheck\nimport { Flex, Icon } from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport FilterCard from 'app/components/FilterCard';\nimport PopoverComponent from 'app/components/PopoverComponent';\nimport SelectOption from 'app/pages/DebugReportGenerate/components/SelectOption';\nimport React, { useEffect, useState } from 'react';\nimport { RiFilter3Line, RiRefreshLine } from 'react-icons/ri';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport { selectSeacrhKey } from '../testAnalyticsSlice/selectors';\nimport CustomDateRangeComp from './CustomDateRangeComp';\n\nconst dateRangeOptionList = ['custom', 'last 1D', 'last 1W', 'last 1M'];\n\nconst getDateRageValue = selectedDateRange => {\n  if (selectedDateRange !== '') {\n    if (selectedDateRange === 'last 1D') {\n      const fromDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate() - 1,\n      ).toLocaleDateString('en-ca');\n      const toDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate() - 1,\n      ).toLocaleDateString('en-ca');\n\n      return { fromDate, toDate };\n    }\n    if (selectedDateRange === 'last 1M') {\n      const toDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        0,\n      ).toLocaleDateString('en-ca');\n      const fromDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth() - 1,\n        1,\n      ).toLocaleDateString('en-ca');\n      return { fromDate, toDate };\n    }\n    if (selectedDateRange === 'last 1W') {\n      const toDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate() - new Date().getDay(),\n      ).toLocaleDateString('en-ca'); //new Date().toLocaleDateString('en-ca')\n      const fromDate = new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate() - (new Date().getDay() + 6),\n      ).toLocaleDateString('en-ca');\n      return { fromDate, toDate };\n    }\n  }\n  return { fromDate: '', toDate: '' };\n};\n\nfunction TestAnlyticsFilterComponent({\n  testStatusOptionList,\n  tabType,\n  selectedTestStatus,\n  setTestStatus,\n  getSelectedFromDate,\n  setSelectedFromDate,\n  getSelectedToDate,\n  setSelectedToDate,\n  setSearchValue,\n  testType,\n}) {\n  const [isOpenFilter, setOpenFilter] = useState(false);\n  const [getEnabledFilter, setEnabledFilter] = useState({\n    isTestStatus: false,\n    isDateRange: false,\n  });\n  const [selectedDateRange, setDateRangeType] = useState('');\n  const [fromDate, setFromDate] = useState(\n    new Date().toLocaleDateString('en-ca'),\n  );\n  const [toDate, setToDate] = useState(new Date().toLocaleDateString('en-ca'));\n  const dispatch = useDispatch();\n  const { testAnalyticsactions } = useTestAnalyticsSlice();\n  // const getSearchKey = useSelector(selectSeacrhKey);\n\n  const applyResetDateRangeHandler = () => {\n    // setEnabledFilter({ isTestStatus: false, isDateRange: false });\n    // dispatch(homePageActions.restePaginationIndex());\n    //  setDateRangeType('');\n    setTestStatus('');\n    setSelectedToDate('');\n    setSelectedFromDate('');\n    setSearchValue('');\n    setDateRangeType('');\n    dispatch(\n      testAnalyticsactions.resetPageIndex({ value: -1, tabType: tabType }),\n    );\n    dispatch(testAnalyticsactions.triggerSerachKey(''));\n  };\n\n  useEffect(() => {\n    if (selectedDateRange === 'custom') {\n      setSelectedFromDate(fromDate);\n      setSelectedToDate(toDate);\n    } else if (selectedDateRange !== '') {\n      const { fromDate, toDate } = getDateRageValue(selectedDateRange);\n      setSelectedFromDate(fromDate);\n      setSelectedToDate(toDate);\n    } else {\n      setSelectedFromDate('');\n      setSelectedToDate('');\n    }\n  }, [selectedDateRange, fromDate, toDate]);\n\n  const applyDateRangeHandler = () => {\n    if (\n      selectedTestStatus !== '' ||\n      (getSelectedFromDate !== '' && getSelectedToDate !== '')\n    ) {\n  \n\n      dispatch(\n        testAnalyticsactions.loadtestAnalyticsData({\n          // filterType : 'filter', fromDate : getSelectedFromDate, toDate : getSelectedToDate , testStatus :  selectedTestStatus ,  page:  1, pageSize: 20 , searchKey : getSearchKey\n          testStatus: tabType === 'completed' ? selectedTestStatus : tabType,\n          page: 1,\n          pageSize: 20,\n          fromDate: getSelectedFromDate,\n          toDate: getSelectedToDate,\n          searchKey: '',\n          tabType: tabType,\n          testType: testType,\n        }),\n      );\n      // console.log(selectedTestStatus);\n      dispatch(\n        testAnalyticsactions.resetPageIndex({ value: 0, tabType: tabType }),\n      );\n    }\n  };\n\n  return (\n    <Flex width=\"100%\" justifyContent=\"space-between\">\n      <Flex alignContent=\"center\" alignItems=\"center\" flexWrap=\"wrap\">\n        <PopoverComponent\n          height=\"210px\"\n          width=\"200px\"\n          top=\"-10px\"\n          title=\"Filter\"\n          button={\n            <ButtonComp\n              name=\"filter-card-analytics-button\"\n              //focus={true}\n              padding=\"4px 8px\"\n              logo={<Icon w=\"15px\" h=\"15px\" as={RiFilter3Line}></Icon>}\n            >\n              Filter\n            </ButtonComp>\n          }\n        >\n          <FilterCard\n            setOpenFilter={setOpenFilter}\n            isOpenFilter={isOpenFilter}\n            setEnabledFilter={setEnabledFilter}\n            setDateRangeType={setDateRangeType}\n            isDateRangeType={true}\n            isTestStatus={tabType === 'completed' ? true : false}\n            setTestStatus={setTestStatus}\n          ></FilterCard>\n        </PopoverComponent>\n\n        {getEnabledFilter.isDateRange && (\n          <SelectOption\n            width=\"130px\"\n            selectValue={selectedDateRange}\n            setSelectValue={setDateRangeType}\n            height=\"27px\"\n            optionList={dateRangeOptionList}\n            placeholder=\"Date\"\n          ></SelectOption>\n        )}\n        {getEnabledFilter.isTestStatus && (\n          <SelectOption\n            width=\"130px\"\n            selectValue={selectedTestStatus}\n            setSelectValue={setTestStatus}\n            height=\"27px\"\n            optionList={testStatusOptionList}\n            placeholder=\"Test Status\"\n          ></SelectOption>\n        )}\n\n        {getEnabledFilter.isDateRange && selectedDateRange === 'custom' && (\n          <CustomDateRangeComp\n            setFromDate={setFromDate}\n            fromDate={fromDate}\n            toDate={toDate}\n            setToDate={setToDate}\n          ></CustomDateRangeComp>\n        )}\n        {(getEnabledFilter.isTestStatus || getEnabledFilter.isDateRange) && (\n          <>\n            <ButtonComp padding=\"4px 8px\" buttonHandler={applyDateRangeHandler}>\n              Apply\n            </ButtonComp>\n          </>\n        )}\n        <ButtonComp\n          padding=\"4px 8px\"\n          backgroundColor=\"white\"\n          color=\"#3F4254\"\n          logo={<Icon as={RiRefreshLine} fontWeight=\"600\"></Icon>}\n          buttonHandler={applyResetDateRangeHandler}\n        >\n          Reset\n        </ButtonComp>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default TestAnlyticsFilterComponent;\n","// @ts-nocheck\nimport { Flex } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport {\n  selectFilterKey,\n  selectPageIndexTest,\n  selectSeacrhKey,\n} from '../testAnalyticsSlice/selectors';\nimport AutomationIcon from './AutomationIcon';\nimport PaginationTableServerSide from './PaginationTableServerSide';\nimport TestAnlyticsFilterComponent from './TestAnlyticsFilterComponent';\n\nfunction CompleteStatus({ tabStatus, testType,   getTestTypeTab }) {\n  const { testAnalyticsactions } = useTestAnalyticsSlice();\n  const dispatch = useDispatch();\n  const getPageIndex = useSelector(selectPageIndexTest);\n  const getSearchKey = useSelector(selectSeacrhKey);\n  const [selectedTestStatus, setTestStatus] = useState('');\n  const [getSelectedFromDate, setSelectedFromDate] = useState('');\n  const [getSelectedToDate, setSelectedToDate] = useState('');\n  const [getSearchValue, setSearchValue] = useState('');\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'testStatus',\n      },\n      {\n        Header: 'Started On',\n        accessor: 'testStartTime',\n      },\n\n      // {\n      //   Header: 'ID',\n      //   accessor: 'uuid.testId' || 'uuid.sessionId',\n      // },\n\n      {\n        Header: 'Project',\n        accessor: 'projectName',\n      },\n      {\n        Header: 'Build',\n        accessor: 'appVersion',\n      },\n      {\n        Header: 'Script',\n        accessor: 'scriptName',\n      },\n      {\n        Header: 'Device',\n        accessor: 'deviceName',\n      },\n      {\n        Header: 'Location',\n        accessor: 'deviceLocation',\n      },\n      {\n        Header: 'User',\n        accessor: 'uuid.username',\n      },\n    ],\n    [],\n  );\n  const columnsLr = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'testStatus',\n      },\n      {\n        Header: 'Started On',\n        accessor: 'testStartTime',\n      },\n\n      // {\n      //   Header: 'ID',\n      //   accessor: 'uuid.testId' || 'uuid.sessionId',\n      // },\n\n      // {\n      //   Header: 'Project',\n      //   accessor: 'projectName',\n      // },\n      // {\n      //   Header: 'Build',\n      //   accessor: 'appVersion',\n      // },\n      // {\n      //   Header: 'Script',\n      //   accessor: 'scriptName',\n      // },\n      {\n        Header: 'Device',\n        accessor: 'deviceName',\n      },\n      {\n        Header: 'Location',\n        accessor: 'deviceLocation',\n      },\n      {\n        Header: 'User',\n        accessor: 'uuid.username',\n      },\n    ],\n    [],\n  );\n\n  const testStatusOptionList = [\n    'completed',\n    //'scheduled',\n    'aborted',\n    //'deleted',\n    'failed',\n    //'started',\n    'device unavailable',\n    'did_not_run',\n  ];\n\n  useEffect(() => {\n    if (getSearchKey !== '' && tabStatus === 0) {\n      setSearchValue(getSearchKey);\n    }else{\n      setSearchValue('');\n    }\n    //console.log(typeof tabStatus);\n  }, [getSearchKey ,getTestTypeTab ]);\n\n  useEffect(() => {\n    if (getPageIndex === 0) {\n      fetchData(0, 20);\n    }else{\n      fetchData(0, 20);\n     \n    }  \n  //  console.log({getTestTypeTab})\n  }, [getTestTypeTab]);\n\n  const fetchData = (pageIndex, pageSize) => {\n    dispatch(\n      testAnalyticsactions.loadtestAnalyticsData({\n        testStatus: selectedTestStatus,\n        page: pageIndex + 1,\n        pageSize: pageSize,\n        fromDate: getSelectedFromDate,\n        toDate: getSelectedToDate,\n        searchKey: getSearchValue,\n        tabType: 'completed',\n        testType: testType,\n        getTestTypeTab: getTestTypeTab\n      }),\n    );\n  };\n\n  const props = {\n    selectedTestStatus,\n    setTestStatus,\n    getSelectedFromDate,\n    setSelectedFromDate,\n    getSelectedToDate,\n    setSelectedToDate,\n    setSearchValue,\n    testType,\n  };\n\n  return (\n    <Flex width=\"100%\" flexDirection=\"column\">\n      <TestAnlyticsFilterComponent\n        testStatusOptionList={testStatusOptionList}\n        tabType=\"completed\"\n        {...props}\n      />\n      <PaginationTableServerSide\n        getPageIndex={getPageIndex}\n        tabType=\"complted\"\n        getTestTypeTab={getTestTypeTab}\n        testType={testType}\n        leftIcon={<AutomationIcon></AutomationIcon>}\n        rightHoverIcon={true}\n        fetchData={fetchData}\n        type=\"testAnalyticsTable\"\n        columns={columns}\n      ></PaginationTableServerSide>\n    </Flex>\n  );\n}\n\nexport default CompleteStatus;\n","// @ts-nocheck\nimport { Flex } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport {\n  selectFilterKeySchedule,\n  selectPageIndexOngoing,\n  selectSeacrhKey,\n} from '../testAnalyticsSlice/selectors';\nimport AutomationIcon from './AutomationIcon';\nimport PaginationTableServerSide from './PaginationTableServerSide';\nimport TestAnlyticsFilterComponent from './TestAnlyticsFilterComponent';\n\nfunction OnGoingStatus({ tabStatus, testType ,   getTestTypeTab }) {\n  const { testAnalyticsactions } = useTestAnalyticsSlice();\n  const dispatch = useDispatch();\n  const getPageIndex = useSelector(selectPageIndexOngoing);\n  const getSearchKey = useSelector(selectSeacrhKey);\n  const [selectedTestStatus, setTestStatus] = useState('started');\n  const [getSelectedFromDate, setSelectedFromDate] = useState('');\n  const [getSelectedToDate, setSelectedToDate] = useState('');\n  const [getSearchValue, setSearchValue] = useState('');\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'testStatus',\n      },\n      {\n        Header: 'Started On',\n        accessor: 'testStartTime',\n      },\n\n      // {\n      //   Header: 'ID',\n      //   accessor: 'uuid.testId' || 'uuid.sessionId',\n      // },\n\n      {\n        Header: 'Project',\n        accessor: 'projectName',\n      },\n      {\n        Header: 'Build',\n        accessor: 'appVersion',\n      },\n      {\n        Header: 'Script',\n        accessor: 'scriptName',\n      },\n      {\n        Header: 'Device',\n        accessor: 'deviceName',\n      },\n      {\n        Header: 'Location',\n        accessor: 'deviceLocation',\n      },\n      {\n        Header: 'User',\n        accessor: 'uuid.username',\n      },\n    ],\n    [],\n  );\n  const columnsLr = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'testStatus',\n      },\n      {\n        Header: 'Started On',\n        accessor: 'testStartTime',\n      },\n\n      // {\n      //   Header: 'ID',\n      //   accessor: 'uuid.testId' || 'uuid.sessionId',\n      // },\n\n      // {\n      //   Header: 'Project',\n      //   accessor: 'projectName',\n      // },\n      // {\n      //   Header: 'Build',\n      //   accessor: 'appVersion',\n      // },\n      // {\n      //   Header: 'Script',\n      //   accessor: 'scriptName',\n      // },\n      {\n        Header: 'Device',\n        accessor: 'deviceName',\n      },\n      {\n        Header: 'Location',\n        accessor: 'deviceLocation',\n      },\n      {\n        Header: 'User',\n        accessor: 'uuid.username',\n      },\n    ],\n    [],\n  );\n  const testStatusOptionList = [];\n\n  useEffect(() => {\n    if (getSearchKey !== '' && tabStatus === 1) {\n      setSearchValue(getSearchKey);\n    }else{\n      setSearchValue('');\n    }\n  }, [getSearchKey]);\n\n  useEffect(() => {\n    if (getPageIndex === 0) {\n      fetchData(0, 20);\n    }else{\n      fetchData(0, 20);\n    } \n  }, [getTestTypeTab]);\n\n  const fetchData = (pageIndex, pageSize) => {\n    dispatch(\n      testAnalyticsactions.loadtestAnalyticsData({\n        testStatus: 'started',\n        page: pageIndex + 1,\n        pageSize: pageSize,\n        fromDate: getSelectedFromDate,\n        toDate: getSelectedToDate,\n        searchKey: getSearchValue,\n        tabType: 'started',\n        testType: testType,\n        getTestTypeTab: getTestTypeTab\n      }),\n    );\n  };\n\n  const props = {\n    selectedTestStatus,\n    setTestStatus,\n    getSelectedFromDate,\n    setSelectedFromDate,\n    getSelectedToDate,\n    setSelectedToDate,\n    setSearchValue,\n    testType,\n  };\n\n  return (\n    <>\n      <Flex width=\"100%\" flexDirection=\"column\">\n        <TestAnlyticsFilterComponent\n          tabType=\"started\"\n          testStatusOptionList={testStatusOptionList}\n          {...props}\n        />\n        <PaginationTableServerSide\n          getPageIndex={getPageIndex}\n          testType={testType}\n          tabType=\"started\"\n          leftIcon={<AutomationIcon></AutomationIcon>}\n          rightHoverIcon={true}\n          fetchData={fetchData}\n          type=\"testAnalyticsTable\"\n          columns={columns}\n        ></PaginationTableServerSide>\n      </Flex>\n    </>\n  );\n}\n\nexport default OnGoingStatus;\n","// @ts-nocheck\nimport { Flex } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport {\n  selectFilterKeySchedule,\n  selectPageIndexSchedule,\n  selectSeacrhKey,\n} from '../testAnalyticsSlice/selectors';\nimport AutomationIcon from './AutomationIcon';\nimport PaginationTableServerSide from './PaginationTableServerSide';\nimport TestAnlyticsFilterComponent from './TestAnlyticsFilterComponent';\n\nfunction ScheduleStatus({ tabStatus, testType,  getTestTypeTab }) {\n  const { testAnalyticsactions } = useTestAnalyticsSlice();\n  const dispatch = useDispatch();\n  const getPageIndex = useSelector(selectPageIndexSchedule);\n  const getSearchKey = useSelector(selectSeacrhKey);\n  const [selectedTestStatus, setTestStatus] = useState('scheduled');\n  const [getSelectedFromDate, setSelectedFromDate] = useState('');\n  const [getSelectedToDate, setSelectedToDate] = useState('');\n  const [getSearchValue, setSearchValue] = useState('');\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Status',\n        accessor: 'testStatus',\n      },\n      {\n        Header: 'Scheduled On',\n        accessor: 'testStartTime',\n      },\n\n      // {\n      //   Header: 'ID',\n      //   accessor: 'uuid.testId' || 'uuid.sessionId',\n      // },\n\n      {\n        Header: 'Project',\n        accessor: 'projectName',\n      },\n      {\n        Header: 'Build',\n        accessor: 'appVersion',\n      },\n      {\n        Header: 'Script',\n        accessor: 'scriptName',\n      },\n      {\n        Header: 'Device',\n        accessor: 'deviceName',\n      },\n      {\n        Header: 'Location',\n        accessor: 'deviceLocation',\n      },\n      {\n        Header: 'User',\n        accessor: 'uuid.username',\n      },\n    ],\n    [],\n  );\n  const testStatusOptionList = [];\n\n  useEffect(() => {\n    if (getSearchKey !== '' && tabStatus === 2) {\n      setSearchValue(getSearchKey);\n    } else {\n      setSearchValue('');\n    }\n  }, [getSearchKey]);\n\n  useEffect(() => {\n    if (getPageIndex === 0) {\n      fetchData(0, 20);\n    }else{\n      fetchData(0, 20);\n    } \n\n  }, [getTestTypeTab]);\n\n  const fetchData = (pageIndex, pageSize) => {\n    dispatch(\n      testAnalyticsactions.loadtestAnalyticsData({\n        testStatus: 'scheduled',\n        page: pageIndex + 1,\n        pageSize: pageSize,\n        fromDate: getSelectedFromDate,\n        toDate: getSelectedToDate,\n        searchKey: getSearchValue,\n        tabType: 'scheduled',\n        testType: testType,\n        getTestTypeTab: getTestTypeTab\n      }),\n    );\n  };\n\n  const props = {\n    selectedTestStatus,\n    setTestStatus,\n    getSelectedFromDate,\n    setSelectedFromDate,\n    getSelectedToDate,\n    setSelectedToDate,\n    setSearchValue,\n  };\n\n  return (\n    <Flex width=\"100%\" flexDirection=\"column\">\n      <TestAnlyticsFilterComponent\n        tabType=\"scheduled\"\n        {...props}\n        testStatusOptionList={testStatusOptionList}\n      />\n      <PaginationTableServerSide\n        getPageIndex={getPageIndex}\n        leftIcon={<AutomationIcon></AutomationIcon>}\n        tabType=\"scheduled\"\n        rightHoverIcon={true}\n        fetchData={fetchData}\n        type=\"testAnalyticsTable\"\n        testType={testType}\n        columns={columns}\n      ></PaginationTableServerSide>\n    </Flex>\n  );\n}\n\nexport default ScheduleStatus;\n","import { Flex, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react';\nimport CustomTabButton from 'app/pages/Appium/components/CustomTabButton';\nimport { ManageScheduleTest } from 'app/pages/ManageScheduleTest/Loadable';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CompleteStatus from '../components/CompleteStatus';\nimport ManageScheduleLink from '../components/ManageScheduleLink';\nimport OnGoingStatus from '../components/OnGoingStatus';\nimport ScheduleStatus from '../components/ScheduleStatus';\nimport TestAnalyticsTableWrapper from '../components/TestAnalyticsTableWrapper';\nimport { useTestAnalyticsSlice } from '../testAnalyticsSlice';\nimport {\n  selectPageIndexOngoing,\n  selectPageIndexSchedule,\n  selectPageIndexTest,\n  selectSeacrhKey,\n} from '../testAnalyticsSlice/selectors';\nimport TestTpyeTabComp from '../components/TestTpyeTabComp';\nimport { useLocation } from 'react-router-dom';\n\nfunction StatusTable({ setSearchItemValue, testType }) {\n  const [tabStatus, setTabStatus] = useState(0);\n  const [getTestTypeTab, setTestTypeTab] = useState(0);\n  const { testAnalyticsactions } = useTestAnalyticsSlice();\n  const getPageIndex = useSelector(selectPageIndexTest);\n  const getPageIndexOngoing = useSelector(selectPageIndexOngoing);\n  const getPageIndexSchedule = useSelector(selectPageIndexSchedule);\n  const getSearchKey = useSelector(selectSeacrhKey);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const state = location.state;\n  const getTabIndexStatus = state?.setStatusIndex;\n  useEffect(() => {\n    setSearchItemValue('');\n  }, [tabStatus, getTestTypeTab]);\n\n  useEffect(() => {\n    if (\n      getPageIndex === -1 ||\n      getPageIndexOngoing === -1 ||\n      getPageIndexSchedule === -1\n    ) {\n      setSearchItemValue('');\n    }\n  }, [getPageIndex, getPageIndexOngoing, getPageIndexSchedule]);\n  useEffect(() => {\n    if (getSearchKey !== '') {\n      let tabType = '';\n      if (tabStatus == 1) {\n        tabType = 'started';\n      } else if (tabStatus == 2) {\n        tabType = 'scheduled';\n      } else {\n        tabType = '';\n      }\n      // console.log(tabType);\n      dispatch(\n        testAnalyticsactions.loadtestAnalyticsData({\n          testStatus: tabType,\n          page: 1,\n          pageSize: 20,\n          fromDate: '',\n          toDate: '',\n          searchKey: getSearchKey,\n          tabType: tabType,\n          getTestTypeTab: getTestTypeTab,\n          testType: testType,\n        }),\n      );\n      dispatch(testAnalyticsactions.triggerSerachKey(''));\n    }\n    dispatch(testAnalyticsactions.resetPageIndex({ tabType: '', value: 0 }));\n  }, [getSearchKey, getTestTypeTab]);\n\n  return (\n    <Flex\n      fontFamily=\"Montserrat\"\n      padding=\".8em\"\n      fontWeight=\"500\"\n      background=\"white\"\n      borderRadius=\"2\"\n      width=\"100%\"\n      flexDirection=\"column\"\n    >\n      {' '}\n      <Tabs\n        defaultIndex={getTabIndexStatus}\n        isLazy\n        onChange={e => setTabStatus(e)}\n      >\n        <TabList borderBottomWidth=\"0px\">\n          <Flex>\n            {' '}\n            <CustomTabButton>Completed</CustomTabButton>\n            <CustomTabButton>Ongoing </CustomTabButton>\n            <CustomTabButton>Scheduled</CustomTabButton>\n            {/* )} */}\n          </Flex>\n\n          <Flex justifyContent=\"flex-end\" flex={1}>\n            <TestTpyeTabComp setTabIndex={setTestTypeTab}></TestTpyeTabComp>\n          </Flex>\n        </TabList>\n\n        <TabPanels minH=\"100vh\">\n          <TabPanel padding=\"0px\" bg=\"white\" color=\"black\">\n            <TestAnalyticsTableWrapper>\n              <CompleteStatus\n                getTestTypeTab={getTestTypeTab}\n                testType={testType}\n                tabStatus={tabStatus}\n              ></CompleteStatus>\n            </TestAnalyticsTableWrapper>\n          </TabPanel>\n          <TabPanel padding=\"0px\" bg=\"white\" color=\"black\">\n            <TestAnalyticsTableWrapper>\n              <OnGoingStatus\n                getTestTypeTab={getTestTypeTab}\n                testType={testType}\n                tabStatus={tabStatus}\n              ></OnGoingStatus>\n            </TestAnalyticsTableWrapper>\n          </TabPanel>\n          {/* {testType !== 'lr-interact' && ( */}\n          <TabPanel padding=\"0px\" bg=\"white\" color=\"black\">\n            <TestAnalyticsTableWrapper>\n              <ScheduleStatus\n                getTestTypeTab={getTestTypeTab}\n                testType={testType}\n                tabStatus={tabStatus}\n              ></ScheduleStatus>\n            </TestAnalyticsTableWrapper>\n          </TabPanel>\n          {/* )} */}\n        </TabPanels>\n      </Tabs>\n    </Flex>\n  );\n}\n\nexport default StatusTable;\n","//@ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Subheader from 'app/components/Subheader';\nimport SubContainer from 'app/components/SubContainer';\nimport { selecttestAnalyticsError } from './testAnalyticsSlice/selectors';\nimport StatusTable from './Features/StatusTable';\nimport ROUTES from '../../constants/Routes';\n\nexport function TestNotification({ testType }) {\n  const testAnalyticserror = useSelector(selecttestAnalyticsError);\n  const [searchItemValue, setSearchItemValue] = useState('');\n\n  useEffect(() => {}, [testAnalyticserror]);\n\n  const tabroute =\n    testType !== 'lr-interact' ? ['Session Summary'] : ['Session Summary'];\n  let running: number = 0;\n  let sheduled: number = 0;\n  let queued: number = 0;\n  const infoStatusData = {\n    running,\n    queued,\n    sheduled,\n  };\n\n  return (\n    <>\n      <Subheader\n        searchItemValue={searchItemValue}\n        setSearchItemValue={setSearchItemValue}\n        isTestType={false}\n        tabroute={tabroute}\n        infoStatusData={infoStatusData}\n        path={\n          testType === 'lr-interact' || testType === 'lr-automation'\n            ? `${ROUTES.LR_SESSION_SUMMARY}`\n            : `${ROUTES.MOBILE_SESSION_SUMMARY}`\n        }\n      ></Subheader>\n      <SubContainer>\n        <StatusTable\n          testType={testType}\n          setSearchItemValue={setSearchItemValue}\n        ></StatusTable>\n      </SubContainer>\n    </>\n  );\n}\nexport default TestNotification;\n","export default __webpack_public_path__ + \"static/media/Automation.a7979bd9.svg\";","import { Select } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface propsType {\n  placeholder?: string;\n  width?: any;\n  optionList?: Array<any>;\n  selectValue?: string | number;\n  setSelectValue?: any;\n  height?: string | number;\n}\n\nfunction SelectOption({\n  placeholder,\n  width,\n  selectValue,\n  setSelectValue,\n  optionList,\n  height,\n}: propsType) {\n  return (\n    <Select\n      bg=\"white\"\n      placeholder={placeholder}\n      size=\"sm\"\n      width={width || '100%'}\n      color=\"grey15\"\n      h={height || ' 34px'}\n      border=\"1px solid \"\n      borderColor=\"grey1\"\n      borderRadius=\"5px\"\n      margin=\"0px 2px\"\n      textTransform=\"capitalize\"\n      value={selectValue}\n      onChange={e => setSelectValue(e.target.value)}\n      _focus={{ boxShadow: ' 0 0 0 white', borderColor: 'grey1' }}\n    >\n      {optionList &&\n        optionList.map((item, index) => (\n          <option\n            data-option={`select-${item}-${index}`}\n            style={{ textTransform: 'capitalize' }}\n            key={index}\n            value={item}\n          >\n            {item === 'completed' ? 'success' : item}\n          </option>\n        ))}\n    </Select>\n  );\n}\n\nexport default SelectOption;\n","import { Tab, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction CustomTabButton({ children }) {\n  return (\n    <Tab\n      fontFamily=\"Montserrat\"\n      borderRadius=\"5px\"\n      fontSize=\"14px\"\n      fontWeight=\"500\"\n      justifyContent=\"flex-start\"\n      display=\"flex\"\n      marginLeft=\"5px\"\n      padding=\"0px 10px\"\n      border=\"1px solid #C8C8C8\"\n      data-button-id={`${children}-tab-button`}\n      bg=\"white\"\n      color=\"grey13\"\n      _focus={{ boxShadow: ' 0 0 0 white' }}\n      w=\"145px\"\n      h=\"33px\"\n      _selected={{\n        border: '1px solid white',\n        boxShadow: ' 0px 0px 6px #008FE0',\n        color: '#008FE0',\n        background: '#F3F6F9',\n        fontWeight: '500',\n      }}\n    >\n      <Text marginLeft=\"5px\" textTransform=\"capitalize\">\n        {children}\n      </Text>\n    </Tab>\n  );\n}\n\nexport default CustomTabButton;\n","import { Flex } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction TestAnalyticsTableWrapper({ children }) {\n  return (\n    <Flex width=\"100%\" bg=\"white\" minH=\"100vh\" marginTop=\"10px\">\n      {children}\n    </Flex>\n  );\n}\n\nexport default TestAnalyticsTableWrapper;\n"],"sourceRoot":""}