{"version":3,"sources":["app/pages/UiAutomator/components/AppBuildMwebButton.tsx","app/pages/UiAutomator/Features/UiAutomatorMozarkTesting.tsx","app/pages/UiAutomator/index.tsx"],"names":["AppBuildMwebButton","_ref","appbuild","mweb","setActiveTab","_jsxs","Tabs","isLazy","padding","margin","onChange","index","children","Flex","align","HStack","spacing","_jsx","Tab","h","w","bg","border","fontFamily","fontSize","fontWeight","_focus","boxShadow","color","borderRadius","_selected","borderBottom","width","TabPanels","marginTop","TabPanel","UiAutomatorMozarkTesting","language","getTabIndex","framework","getInterval","setInterval","useState","getActiveTab","getMaxTestDuration","setMaxTestDuration","startDate","setStartDate","setHours","setMinutes","Date","getMinutes","getHours","endDate","setEndDate","getMessageFlag","setMessageFlag","activeTrayPopup","setActiveTrayPopup","getSelectedDeviceList","setSelectedDeviceList","getSelectedDeviceListUiautomator","setSelectedDeviceListUiautomator","recordDeviceScreen","setRecordDeviceScreen","recordNetworkCalls","setRecordNetworkCalls","systemDebugLogs","setSystemDebugLogs","automationExecutionLogs","setAutomationExecutionLogs","recordMemory","setRecordMemory","recordCPU","setRecordCPU","recordBattery","setRecordBattery","recordGraphics","setRecordGraphics","captureDataUsageMetrics","setCaptureDataUsageMetrics","dataUsageTimeInterval","setDataUsageTimeInterval","recordDeviceNetworkPackets","setRecordDeviceNetworkPackets","recordDeviceScreenShots","setRecordDeviceScreenShots","liveLogs","setLiveLogs","selectProjectOptionList","useSelector","selectProjectList","projectName","setProjectName","activeDevicePopup","setActiveDevicePopup","selectTrayOptionListUiautomator","selecteTrayList","selectTrayValue","setTraySelectValue","history","useNavigate","uiAutomatorMozarkTestingPopupCard","setUiAutomatorMozarkTestingPopupCard","getAddedKey","setAddedKey","selectProject","setSelectProject","getPackageName","setPackageName","selectAppBuild","setSelectAppBuild","selectBrowser","setSelectBrowser","selectVersion","setSelectVersion","getFilterDeviceType","setFilterDevicesType","getFilterTrayType","setFilterTrayType","selectScript","setSelectScript","appbuildFile","setAppbuildFile","activePopupCard","setActivePopupCard","getMd5Sum","setMd5Sum","getMd5SumScript","setMd5SumScript","getApplicationType","setApplicationType","getSelectedTray","setSelectedTray","isVisEnabled","setVisEnable","getVisualUrl","setVisualUrl","selectVisualScript","setSelectVisualScript","uploadAppBuildUrlAndroid","selectUploadApplicationUrlAndroid","areDevicesBusy","setAreDevicesBusy","uploadApplicationAndroidError","selectuploadApplicationUrlAndroidError","testExecutionActions","useTestExecutionSlice","selectAppBuildListOptions","selectAppBuildAndroidListState","selectScriptListOptions","selectScriptAndroidState","dispatch","useDispatch","toast","useToast","getListingDevices","selectListingDevices","selectedDevices","selectTestExecutionSelectedDevice","getScheduleTestResponse","selectScheduleTestResponse","getScheduleTestResponseError","selectScheduleTestResponseError","loadingCreateProject","selectCreateProjectLoading","loadingFileUpload","selectApplicationFileUploadLoading","loadingapplicationUrl","selectUploadingApplicationAndroidLoading","isMobileTesting","usePlatformtypeHook","loadingExecuteSchedule","selectScheduleExecuteTestLoading","getUploadProgessValue","selectUploadFileProgressValue","fileUploadResponse","selectApplicationFileUploadResponse","createdPojectResponse","selectCreatedProject","createdPojectError","selectCreateProjectError","busyDeviceSlots","selectBusyDeviceSlots","deviceListListLoading","selectDeviceListLoading","deviceListDataError","selectDeviceListingError","selectVisualScriptList","selectTestExcutionState","actions","useMyDevicesSlice","getFilterDevice","key","length","filter","device","platform","getAndroidDevicesList","selectTrayOptionList","tray","useDevicesLoadInterval","useSelectedDevicesStatus","useEffect","uploadFileProgress","BusyDeviceSlotsListLoaded","trayDataLoaded","hasOwnProperty","status","type","paramStringAppBuild","fileCategory","testType","loadSelectAppBuildAndroidList","concat","paramStringScript","loadSelectScriptAndroidList","loadSelectVisualScriptList","title","isClosable","position","appBuildApplicationFileUploaded","message","loadSelectTestExecutionProjectList","testExecutionProjectCreated","createTestExecutionProjectError","setTimeout","ROUTES","MOBILE_SESSION_SUMMARY","state","setStatusIndex","testExecutionDataLoaded","testExecutionDataError","visualUrl","getApplicationUrlHelper","appBuildUploadHandler","file","files","name","split","pop","getMd5SumFiles","fileType","filerequestData","filename","project","md5","applicationType","loadUploadApplicationAndroid","scriptUploadHandler","paramStringVisualScript","response","loadUploadAppBuildFile","url","data","uploadUrl","uploadApplicationAndroidResponse","uploadApplicationError","parseInt","devices","valueOf","fileParameters","testCodePackageName","getAndroidIosDevice","getAndroidIosTray","getAndroidDevice","getAndroidTray","getIosDevice","getIosTray","scheduleAutomationTestHandler","scheduleType","optionValue","getOptionalParam","newObject","Object","map","item","value","keyName","object","trim","assign","devicebusy","validateBusyDevice","dateTimeConverterWithTimeZone","getTime","description","join","config","deviceId","testConfiguration","captureHAR","captureCPUMetrics","captureMemoryMetrics","captureBatteryMetrics","captureGraphicsMetrics","captureDeviceScreenShots","captureDeviceNetworkPackets","captureAutomationLogs","captureSystemDebugLogs","captureLiveLogs","scheduleConfiguration","startTime","endTime","interval","testAction","pre","post","testParameters","maxTestDuration","testFramework","packageName","browserName","browserVersion","trayName","getTrayFromList","visualMonitoringEnabled","visualTestApplicationUrl","applicationUrl","testApplicationUrl","executionType","loadTestExecutionData","refreshApplicationList","console","log","_Fragment","flexDirection","LoadingComponent","height","top","isOverLay","Stack","LabelFieldComponent","label","SelectComponent","selectValue","setSelectValue","selectOptions","Text","InputComponent","setInputValue","inputValue","ButtonComp","buttonHandler","createProjectHandler","createTestExecutionProject","RefreshIconButton","clickHandler","UploadButton","validate","placeholder","uploadButtonHandler","enableProgress","progressValue","Switch","size","e","target","checked","CustomIconButton","DashedButton","selectDeviceButtonHandler","addSelectedDevices","textTransform","SelectTrayOption","SelectDevicePopup","selectedDeviceHandler","DeviceIds","id","selectedDeviceList","tableData","isLoading","errorDeviceData","whiteSpace","flex","CheckboxComp","setCheckedValue","maxWidth","InfoComponent","labelmessage","LaunchIconButton","viewCode","preventDefault","isDisabled","backgroundColor","marginLeft","InputDateTime","selectedDate","setSelectDate","ToggleSelectInput","isShadow","timeIntervalValue","PopupCardDetail","isOpen","onClose","overflowY","css","boreder","KeyValueComponent","getValue","isMandatory","setValue","justifyContent","SelectValueComponent","isChecked","NewKeyValueComponent","objectData","addKeyHandler","justify","UiAutomator","setLanguage","getRootProps","getRadioProps","useRadioGroup","defaultValue","val","SubLayout"],"mappings":"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","file":"static/js/24.94e3fbcd.chunk.js","sourcesContent":["import { Box, Flex, HStack, Tab, TabPanel, TabPanels, Tabs } from '@chakra-ui/react'\nimport React from 'react'\n\nfunction AppBuildMwebButton({appbuild , mweb , setActiveTab}) {\n  return (\n    <Tabs isLazy={true}  padding=\"0\" margin=\"0\" onChange={(index)=> setActiveTab(index)} >\n      <Flex align=\"center\">\n        <HStack spacing=\"0px\">\n          <Tab\n            h=\"39px\"\n            w=\"125px\"\n            margin=\"0\"\n            bg=\"white3\"\n            border=\"0px solid #F3F6F9\"\n            fontFamily=\"Montserrat\"\n            fontSize=\"14px\"\n            fontWeight=\"500\"\n            _focus={{ boxShadow: ' 0 0 0 white' }}\n            color=\"grey1\"\n            borderRadius=\"5px 0px 0px 5px\"\n            _selected={{\n              bg: 'blue1',\n              border: '0px solid #008FE0',\n              color: 'white',\n            }}\n          >\n            App Build\n          </Tab>\n          <Tab\n            h=\"39px\"\n            w=\"125px\"\n            margin=\"0\"\n            bg=\"white3\"\n            border=\"0px solid #F3F6F9\"\n            fontFamily=\"Montserrat\"\n            fontSize=\"14px\"\n            fontWeight=\"500\"\n            _focus={{ boxShadow: ' 0 0 0 white' }}\n            color=\"grey1\"\n            borderRadius=\"0px 5px 5px 0px\"\n            _selected={{\n              bg: 'blue1',\n              border: '0px solid #008FE0',\n              color: 'white',\n            }}\n          >\n            Mobile Web\n          </Tab>\n        </HStack>\n        <Flex\n          margin=\"0px 20px\"\n          borderBottom=\"1px solid #B5B5C3\"\n          width=\"100%\"\n        ></Flex>\n      </Flex>\n      <TabPanels marginTop=\"15px\">\n        <TabPanel padding=\"0px\">\n        {appbuild}\n        </TabPanel>\n        <TabPanel padding=\"0px\">\n        {mweb} \n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  )\n}\n\nexport default AppBuildMwebButton","// @ts-nocheck\nimport {\n  Checkbox,\n  Flex,\n  HStack,\n  Icon,\n  Input,\n  Stack,\n  Switch,\n  Text,\n  useDisclosure,\n  useToast,\n} from '@chakra-ui/react';\nimport ButtonComp from 'app/components/ButtonComp';\nimport DashedButton from 'app/components/DashedButton';\nimport InputComponent from 'app/pages/Appium/components/InputComponent';\nimport LaunchIconButton from 'app/pages/Appium/components/LaunchIconButton';\nimport SelectComponent from 'app/pages/Appium/components/SelectComponent';\nimport UploadButton from 'app/pages/Appium/components/UploadButton';\nimport LabelFieldComponent from 'app/pages/AutomationTest/components/LabelFieldComponent';\nimport React, { useEffect, useState } from 'react';\nimport { tableData } from 'app/pages/MozarkDevices';\nimport CustomIconButton from 'app/pages/Appium/components/CustomIconButton';\nimport SelectDevicePopup from 'app/pages/Appium/components/SelectDevicePopup';\nimport InfoComponent from 'app/pages/Appium/components/InfoComponent';\nimport InputDateTime from 'app/pages/Appium/components/InputDateTime';\nimport PopupCardDetail from 'app/pages/Appium/components/PopupCardDetail';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectAppBuildAndroidListState,\n  selectAppBuildListState,\n  selectCreateProjectLoading,\n  selectListingDevices,\n  selectProjectList,\n  selectScheduleExecuteTestLoading,\n  selectScheduleTestResponse,\n  selectScriptAndroidState,\n  selectScriptState,\n  selectTestExecutionSelectedDevice,\n  selectUploadApplicationUrlAndroid,\n  selectuploadApplicationUrlAndroidError,\n  selectUploadingApplicationLoading,\n  selectApplicationFileUploadLoading,\n  selectUploadingApplicationAndroidLoading,\n  selectUploadFileProgressValue,\n  selectApplicationFileUploadResponse,\n  selectCreatedProject,\n  selectBusyDeviceSlots,\n  selectDeviceListLoading,\n  selectDeviceListingError,\n  selectCreateProjectError,\n  selectScheduleTestResponseError,\n  selectTestExcutionState,\n} from 'app/pages/Xcui/slice/selector';\nimport { useTestExecutionSlice } from 'app/pages/Xcui/slice';\nimport md5 from 'md5';\nimport CheckboxComp from 'app/pages/UiAutomator/components/CheckboxComp';\nimport setHours from 'date-fns/setHours';\nimport setMinutes from 'date-fns/setMinutes';\nimport {\n  dateTimeConverterWithTimeZone,\n  getMd5SumFiles,\n  validateBusyDevice,\n} from 'utils/gernricfunction';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport SelectValueComponent from '../components/SelectValueComponent';\nimport { timeIntervalValue } from 'app/pages/Xcui/Features/XcUiMozarkTesting';\nimport KeyValueComponent from '../components/KeyValueComponent';\nimport NewKeyValueComponent from '../components/NewKeyValueComponent';\nimport SelectTrayPopup from '../components/SelectTrayPopup';\nimport { selecteTrayList } from 'app/pages/MyDevices/slice/selector';\nimport { useMyDevicesSlice } from 'app/pages/MyDevices/slice';\nimport SelectTrayOption from '../components/SelectTrayOption';\nimport ToggleSelectInput from '../components/ToggleSelectInput';\nimport { useNavigate } from 'react-router-dom';\nimport { HiOutlineRefresh } from 'react-icons/hi';\nimport AppBuildMwebButton from '../components/AppBuildMwebButton';\nimport getApplicationUrlHelper from 'utils/getFileUrlFromList';\nimport getTrayFromList from 'utils/getTrayFromList';\nimport ROUTES from 'app/constants/Routes';\nimport RefreshIconButton from 'app/components/RefreshIconButton';\nimport useSelectedDevicesStatus from 'app/utils/useSelectedDevicesStatus';\nimport useDevicesLoadInterval from 'app/utils/useDevicesLoadInterval';\nimport usePlatformtypeHook from 'app/pages/HomePage/usePlatformtypeHook';\n\nfunction UiAutomatorMozarkTesting({ language, getTabIndex, framework }) {\n  const [getInterval, setInterval] = useState(5);\n  const [getActiveTab, setActiveTab] = useState(0);\n  const [getMaxTestDuration, setMaxTestDuration] = useState(10);\n  const [startDate, setStartDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n  const [endDate, setEndDate] = useState(\n    setHours(\n      setMinutes(new Date(), new Date().getMinutes()),\n      new Date().getHours(),\n    ),\n  );\n  const [getMessageFlag, setMessageFlag] = useState(false);\n  const [activeTrayPopup, setActiveTrayPopup] = useState(false);\n  const [getSelectedDeviceList, setSelectedDeviceList] = useState([]);\n  const [getSelectedDeviceListUiautomator, setSelectedDeviceListUiautomator] =\n    useState([]);\n  const [recordDeviceScreen, setRecordDeviceScreen] = useState(false);\n  const [recordNetworkCalls, setRecordNetworkCalls] = useState(false);\n  const [systemDebugLogs, setSystemDebugLogs] = useState(true);\n  const [automationExecutionLogs, setAutomationExecutionLogs] = useState(true);\n  const [recordMemory, setRecordMemory] = useState(false);\n  const [recordCPU, setRecordCPU] = useState(false);\n  const [recordBattery, setRecordBattery] = useState(false);\n  const [recordGraphics, setRecordGraphics] = useState(false);\n  const [captureDataUsageMetrics, setCaptureDataUsageMetrics] = useState(false);\n  const [dataUsageTimeInterval, setDataUsageTimeInterval] = useState(false);\n  const [recordDeviceNetworkPackets, setRecordDeviceNetworkPackets] =\n    useState(false);\n  const [recordDeviceScreenShots, setRecordDeviceScreenShots] = useState(true);\n  const [liveLogs, setLiveLogs] = useState(true);\n  const selectProjectOptionList = useSelector(selectProjectList);\n  const [projectName, setProjectName] = useState('');\n  const [activeDevicePopup, setActiveDevicePopup] = useState(false);\n  const selectTrayOptionListUiautomator = useSelector(selecteTrayList);\n  const [selectTrayValue, setTraySelectValue] = useState();\n  let history = useNavigate();\n  const [\n    uiAutomatorMozarkTestingPopupCard,\n    setUiAutomatorMozarkTestingPopupCard,\n  ] = useState(false);\n  const [getAddedKey, setAddedKey] = useState([]);\n  const [selectProject, setSelectProject] = useState('');\n  const [getPackageName, setPackageName] = useState('');\n  const [selectAppBuild, setSelectAppBuild] = useState('');\n  const [selectBrowser, setSelectBrowser] = useState('');\n  const [selectVersion, setSelectVersion] = useState('');\n  const [getFilterDeviceType, setFilterDevicesType] = useState([]);\n  const [getFilterTrayType, setFilterTrayType] = useState([]);\n  const [selectScript, setSelectScript] = useState('');\n  const [appbuildFile, setAppbuildFile] = useState();\n  const [activePopupCard, setActivePopupCard] = useState('');\n  const [getMd5Sum, setMd5Sum] = useState('');\n  const [getMd5SumScript, setMd5SumScript] = useState('');\n  const [getApplicationType, setApplicationType] = useState('');\n  const [getSelectedTray, setSelectedTray] = useState();\n  const [isVisEnabled, setVisEnable] = useState(false);\n  const [getVisualUrl, setVisualUrl] = useState('');\n  const [selectVisualScript, setSelectVisualScript] = useState();\n  const uploadAppBuildUrlAndroid = useSelector(\n    selectUploadApplicationUrlAndroid,\n  );\n  const [areDevicesBusy, setAreDevicesBusy] = useState(true);\n  const uploadApplicationAndroidError = useSelector(\n    selectuploadApplicationUrlAndroidError,\n  );\n  const { testExecutionActions } = useTestExecutionSlice();\n  const selectAppBuildListOptions = useSelector(selectAppBuildAndroidListState);\n  const selectScriptListOptions = useSelector(selectScriptAndroidState);\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const getListingDevices = useSelector(selectListingDevices);\n  const selectedDevices = useSelector(selectTestExecutionSelectedDevice);\n  const getScheduleTestResponse = useSelector(selectScheduleTestResponse);\n  const getScheduleTestResponseError = useSelector(\n    selectScheduleTestResponseError,\n  );\n  const loadingCreateProject = useSelector(selectCreateProjectLoading);\n  const loadingFileUpload = useSelector(selectApplicationFileUploadLoading);\n  const loadingapplicationUrl = useSelector(\n    selectUploadingApplicationAndroidLoading,\n  );\n  const isMobileTesting = usePlatformtypeHook();\n  const loadingExecuteSchedule = useSelector(selectScheduleExecuteTestLoading);\n  const getUploadProgessValue = useSelector(selectUploadFileProgressValue);\n  const fileUploadResponse = useSelector(selectApplicationFileUploadResponse);\n  const createdPojectResponse = useSelector(selectCreatedProject);\n  const createdPojectError = useSelector(selectCreateProjectError);\n  const busyDeviceSlots = useSelector(selectBusyDeviceSlots);\n  const deviceListListLoading = useSelector(selectDeviceListLoading);\n  const deviceListDataError = useSelector(selectDeviceListingError);\n  const { selectVisualScriptList } = useSelector(selectTestExcutionState);\n\n  const { actions } = useMyDevicesSlice();\n\n  const getFilterDevice = (getListingDevices, key) => {\n    if (getListingDevices.length === 0) {\n      return getListingDevices;\n    }\n    if (key === 'android') {\n      const getAndroidDevicesList = getListingDevices.filter(\n        device => device.platform === 'android',\n      );\n      return getAndroidDevicesList;\n    } else if (key === 'ios') {\n      const getIosDevicesList = getListingDevices.filter(\n        device => device.platform === 'ios',\n      );\n      return getIosDevicesList;\n    } else {\n      const getAndroidIosDevicesList = getListingDevices.filter(\n        device => device.platform === 'android' || device.platform === 'ios',\n      );\n      return getAndroidIosDevicesList;\n    }\n  };\n\n  const getAndroidDevicesList = getListingDevices.filter(\n    device =>\n      device.platform === 'android' ||\n      (framework === 'appium' && device.platform === 'ios'),\n  );\n  const selectTrayOptionList = selectTrayOptionListUiautomator.filter(\n    tray =>\n      tray.platform === 'android' ||\n      (framework === 'appium' && tray.platform === 'ios'),\n  );\n\n  const getDevices = () => {\n    if (framework === 'appium') {\n      return getFilterDeviceType;\n    }\n    return getAndroidDevicesList;\n  };\n  useDevicesLoadInterval(isMobileTesting, testExecutionActions, '');\n  useSelectedDevicesStatus(\n    getSelectedDeviceList,\n    setAreDevicesBusy,\n    getDevices(),\n  );\n\n  useEffect(() => {\n    setProjectName('');\n    setSelectProject('');\n    setSelectAppBuild('');\n    setSelectScript('');\n    setStartDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setEndDate(\n      setHours(\n        setMinutes(new Date(), new Date().getMinutes()),\n        new Date().getHours(),\n      ),\n    );\n    setSelectedDeviceList([]);\n    setSelectedDeviceListUiautomator([]);\n    setAppbuildFile();\n    setRecordDeviceScreen(false);\n    setRecordNetworkCalls(false);\n    setRecordMemory(false);\n    setRecordCPU(false);\n    setRecordBattery(false);\n    setRecordGraphics(false);\n    setRecordDeviceScreenShots(true);\n    setAutomationExecutionLogs(true);\n    setLiveLogs(true);\n    setDataUsageTimeInterval(false);\n    setCaptureDataUsageMetrics(false);\n    setRecordDeviceNetworkPackets(false);\n    setSystemDebugLogs(true);\n    dispatch(testExecutionActions.uploadFileProgress(0));\n    dispatch(testExecutionActions.BusyDeviceSlotsListLoaded({}));\n    setMaxTestDuration(10);\n    setAddedKey([]);\n    dispatch(actions.trayDataLoaded([]));\n    setTraySelectValue('');\n  }, [getTabIndex]);\n\n  useEffect(() => {\n    if (\n      fileUploadResponse.hasOwnProperty('status') &&\n      fileUploadResponse.status === 200\n    ) {\n      if (fileUploadResponse.type === 'android-uiautomator') {\n        if (getApplicationType === 'appbuild') {\n          const paramStringAppBuild = {\n            fileCategory:\n              framework === 'appium'\n                ? 'android-application,ios-application'\n                : 'android-application',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectAppBuildAndroidList(\n              paramStringAppBuild,\n            ),\n          );\n        }\n\n        if (\n          getApplicationType === 'android-test-application' ||\n          getApplicationType === `appium-${language}-test-application`\n        ) {\n          const paramStringScript = {\n            fileCategory:\n              framework === 'appium'\n                ? `appium-${language}-test-application`\n                : 'android-test-application',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectScriptAndroidList(paramStringScript),\n          );\n        }\n\n        if (getApplicationType === 'visual-journey-script') {\n          const paramStringScript = {\n            fileCategory: 'visual-journey-script', //framework === 'appium' ? `appium-${language}-test-application` : 'android-test-application',\n            projectName: selectProject,\n            testType: 'app-automation',\n          };\n\n          dispatch(\n            testExecutionActions.loadSelectVisualScriptList(paramStringScript),\n          );\n        }\n\n        toast({\n          title: 'Application Uploaded Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setApplicationType('');\n        dispatch(testExecutionActions.uploadFileProgress(0));\n        dispatch(testExecutionActions.appBuildApplicationFileUploaded({}));\n      }\n    }\n  }, [fileUploadResponse]);\n\n  useEffect(() => {\n    if (\n      createdPojectResponse.hasOwnProperty('message') &&\n      createdPojectError !== 1\n    ) {\n      if (createdPojectResponse.message === 'Success') {\n        toast({\n          title: 'Project Created Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setProjectName('');\n        dispatch(\n          testExecutionActions.loadSelectTestExecutionProjectList(\n            'app-automation',\n          ),\n        );\n      } else {\n        toast({\n          title: createdPojectResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n\n      dispatch(testExecutionActions.testExecutionProjectCreated({}));\n    }\n\n    if (createdPojectError === 1) {\n      toast({\n        title: \"Couldn't create the project\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.createTestExecutionProjectError(null));\n    }\n  }, [createdPojectResponse, createdPojectError]);\n  useEffect(() => {\n    if (\n      getScheduleTestResponse.hasOwnProperty('message') &&\n      getScheduleTestResponseError !== 1\n    ) {\n      if (getScheduleTestResponse.message === 'Success') {\n        toast({\n          title: 'Executed/Scheduled Successfully',\n          status: 'success',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        setTimeout(() => {\n          history(ROUTES.MOBILE_SESSION_SUMMARY, {\n            state: { setStatusIndex: 2 },\n          });\n        }, 1000);\n\n        setSelectProject('');\n        setSelectAppBuild('');\n        setSelectScript('');\n      } else {\n        toast({\n          title: getScheduleTestResponse.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n      dispatch(testExecutionActions.testExecutionDataLoaded({}));\n    }\n\n    if (getScheduleTestResponseError === 1) {\n      toast({\n        title: \"Couldn't Executed/Scheduled\",\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.testExecutionDataError(null));\n    }\n  }, [getScheduleTestResponse, getScheduleTestResponseError]);\n\n  useEffect(() => {\n    if (getScheduleTestResponse.message === 'Success') {\n      setSelectProject('');\n      setSelectAppBuild('');\n      setSelectScript('');\n    }\n  }, [getScheduleTestResponse]);\n  useEffect(() => {\n    if (selectVisualScript || selectVisualScript === '0') {\n      const visualUrl = getApplicationUrlHelper(\n        selectVisualScriptList,\n        selectVisualScript,\n      );\n      setVisualUrl(visualUrl);\n    }\n  }, [selectVisualScript]);\n\n  const appBuildUploadHandler = file => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (framework === 'appium') {\n      if (\n        file.files[0].name.split('.').pop() === 'apk' ||\n        file.files[0].name.split('.').pop() === 'ipa'\n      ) {\n      } else {\n        toast({\n          title: 'Please select apk or ipa file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        return;\n      }\n    } else {\n      if (file.files[0].name.split('.').pop() != 'apk') {\n        toast({\n          title: 'Please select apk file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        return;\n      }\n    }\n    getMd5SumFiles(file, setMd5Sum);\n    setAppbuildFile(file.files[0]);\n  };\n\n  useEffect(() => {\n    if (getMd5Sum !== '') {\n      const fileType =\n        appbuildFile.name.split('.').pop() === 'ipa'\n          ? 'ios-application'\n          : 'android-application';\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: framework === 'appium' ? fileType : 'android-application',\n        md5: getMd5Sum,\n        applicationType: 'appbuild',\n        testType: 'app-automation',\n      };\n      dispatch(\n        testExecutionActions.loadUploadApplicationAndroid(filerequestData),\n      );\n      setApplicationType('appbuild');\n      setMd5Sum('');\n    }\n  }, [getMd5Sum]);\n\n  const scriptUploadHandler = (file, fileType) => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (framework === 'appium') {\n      if (\n        file.files[0].name.split('.').pop() != 'zip' &&\n        (fileType === `appium-${language}-test-application` ||\n          fileType === 'visual-journey-script')\n      ) {\n        toast({\n          title: 'Please select zip file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        return;\n      }\n    } else {\n      if (\n        file.files[0].name.split('.').pop() != 'apk' &&\n        fileType === 'android-test-application'\n      ) {\n        toast({\n          title: 'Please select apk file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        return;\n      }\n      if (\n        file.files[0].name.split('.').pop() != 'zip' &&\n        fileType === 'visual-journey-script'\n      ) {\n        toast({\n          title: 'Please select zip file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n        return;\n      }\n    }\n    getMd5SumFiles(file, setMd5SumScript);\n    setAppbuildFile(file.files[0]);\n    setApplicationType(fileType);\n  };\n  useEffect(() => {\n    if (getMd5SumScript !== '') {\n      const filerequestData = {\n        filename: appbuildFile.name,\n        project: selectProject,\n        fileCategory: getApplicationType, //framework === 'appium' ? `appium-${language}-test-application` : 'android-test-application',\n        md5: getMd5SumScript,\n        applicationType: getApplicationType,\n        testType: 'app-automation',\n      };\n      dispatch(\n        testExecutionActions.loadUploadApplicationAndroid(filerequestData),\n      );\n      // setApplicationType('script');\n      setMd5SumScript('');\n    }\n  }, [getMd5SumScript]);\n\n  useEffect(() => {\n    if (selectProject !== '') {\n      const paramStringAppBuild = {\n        fileCategory:\n          framework === 'appium'\n            ? 'android-application,ios-application'\n            : 'android-application',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectAppBuildAndroidList(paramStringAppBuild),\n      );\n      const paramStringScript = {\n        fileCategory:\n          framework === 'appium'\n            ? `appium-${language}-test-application`\n            : 'android-test-application',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectScriptAndroidList(paramStringScript),\n      );\n      const paramStringVisualScript = {\n        fileCategory: 'visual-journey-script',\n        projectName: selectProject,\n        testType: 'app-automation',\n      };\n\n      dispatch(\n        testExecutionActions.loadSelectVisualScriptList(\n          paramStringVisualScript,\n        ),\n      );\n    }\n    setSelectScript('');\n    setSelectVisualScript('');\n    setSelectAppBuild('');\n  }, [selectProject, language]);\n\n  useEffect(() => {\n    if (\n      uploadAppBuildUrlAndroid.hasOwnProperty('response') &&\n      uploadAppBuildUrlAndroid.response.hasOwnProperty('message') &&\n      uploadApplicationAndroidError !== 1\n    ) {\n      if (uploadAppBuildUrlAndroid.response.message === 'Success') {\n        dispatch(\n          testExecutionActions.loadUploadAppBuildFile({\n            url: uploadAppBuildUrlAndroid.response.data.uploadUrl,\n            file: appbuildFile,\n            type: 'android-uiautomator',\n            dispatch: dispatch,\n          }),\n          setApplicationType(uploadAppBuildUrlAndroid.type),\n        );\n      } else {\n        toast({\n          title: uploadAppBuildUrlAndroid.response.message,\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n\n      dispatch(testExecutionActions.uploadApplicationAndroidResponse({}));\n    }\n\n    if (uploadApplicationAndroidError === 1) {\n      toast({\n        title: 'Something went wrong',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      dispatch(testExecutionActions.uploadApplicationError(null));\n    }\n  }, [uploadAppBuildUrlAndroid, uploadApplicationAndroidError]);\n\n  const createProjectHandler = () => {\n    if (projectName !== '') {\n      const config = {\n        name: projectName,\n        testType: 'app-automation',\n      };\n      dispatch(testExecutionActions.createTestExecutionProject(config));\n    } else {\n      toast({\n        title: 'Please Select or Create Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      return;\n    }\n  };\n\n  const appBuildsPopupHandler = e => {\n    setUiAutomatorMozarkTestingPopupCard(true);\n    setActivePopupCard('appbuilds');\n    e.preventDefault();\n  };\n  const testSuitePopupHandler = e => {\n    setUiAutomatorMozarkTestingPopupCard(true);\n    setActivePopupCard('testsuite');\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    if (parseInt(selectTrayValue) === 0 || parseInt(selectTrayValue) > 0) {\n      setSelectedDeviceList(selectTrayOptionList[selectTrayValue].devices);\n      setSelectedDeviceListUiautomator([]);\n    } else if (selectTrayValue < 0) {\n    } else {\n      setSelectedDeviceList([]);\n    }\n  }, [selectTrayValue]);\n\n  const selectedDeviceHandler = () => {\n    const DeviceIds = selectedDevices.map(device => device.id);\n    setSelectedDeviceList(DeviceIds);\n    setActiveDevicePopup(false);\n    setSelectedDeviceListUiautomator(selectedDevices);\n    setTraySelectValue(-1);\n    if (DeviceIds.length > 0) {\n    }\n  };\n  const selectDeviceButtonHandler = () => {\n    setActiveDevicePopup(true);\n\n    setTimeout(() => {\n      dispatch(\n        testExecutionActions.addSelectedDevices(\n          getSelectedDeviceListUiautomator,\n        ),\n      );\n    }, 1000);\n  };\n  useEffect(() => {\n    if (startDate.valueOf() + 294500 >= endDate.valueOf()) {\n      setMessageFlag(true);\n    } else {\n      setMessageFlag(false);\n    }\n  }, [startDate, endDate]);\n\n  const getOptionalParam = () => {\n    let newObject = new Object();\n\n    getAddedKey.map(item => {\n      let key = '';\n      let value = '';\n      key = item.keyName;\n      value = item.value;\n      if (item.keyName && item.value) {\n        const object = {\n          [key.trim()]: value.trim(),\n        };\n        Object.assign(newObject, object);\n      } else {\n      }\n    });\n\n    return newObject;\n  };\n\n  useEffect(() => {\n    if (\n      (selectScript || selectScript === '0') &&\n      selectScript !== '' &&\n      selectScriptListOptions.length > 0 &&\n      framework !== 'appium'\n    ) {\n      if (\n        selectScriptListOptions[selectScript].fileParameters.hasOwnProperty(\n          'testCodePackageName',\n        )\n      ) {\n        if (\n          selectScriptListOptions[selectScript].fileParameters\n            .testCodePackageName === ''\n        ) {\n          setSelectScript('');\n          toast({\n            title: 'Unable to get package name/bundle ID. Upload new file',\n            status: 'error',\n            isClosable: true,\n            position: 'bottom-right',\n          });\n        }\n      } else {\n        setSelectScript('');\n        toast({\n          title: 'Unable to get package name/bundle ID. Upload new file',\n          status: 'error',\n          isClosable: true,\n          position: 'bottom-right',\n        });\n      }\n    }\n  }, [selectScript]);\n  useEffect(() => {\n    if (framework === 'appium') {\n      if (selectAppBuild === '') {\n        setSelectedDeviceList([]);\n        setSelectedDeviceListUiautomator([]);\n        setTraySelectValue(-1);\n        const getAndroidIosDevice = getFilterDevice(\n          getListingDevices,\n          'default',\n        );\n        const getAndroidIosTray = getFilterDevice(\n          selectTrayOptionListUiautomator,\n          'default',\n        );\n        setFilterDevicesType(getAndroidIosDevice);\n        setFilterTrayType(getAndroidIosTray);\n      } else {\n        setSelectedDeviceList([]);\n        setSelectedDeviceListUiautomator([]);\n        setTraySelectValue(-1);\n        const fileCategory =\n          selectAppBuildListOptions[selectAppBuild].fileCategory;\n        if (fileCategory === 'android-application') {\n          const getAndroidDevice = getFilterDevice(\n            getListingDevices,\n            'android',\n          );\n          const getAndroidTray = getFilterDevice(\n            selectTrayOptionListUiautomator,\n            'android',\n          );\n          setFilterDevicesType(getAndroidDevice);\n          setFilterTrayType(getAndroidTray);\n        } else {\n          const getIosDevice = getFilterDevice(getListingDevices, 'ios');\n          const getIosTray = getFilterDevice(\n            selectTrayOptionListUiautomator,\n            'ios',\n          );\n          setFilterDevicesType(getIosDevice);\n          setFilterTrayType(getIosTray);\n        }\n      }\n    }\n  }, [selectAppBuild]);\n\n  const scheduleAutomationTestHandler = scheduleType => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (selectAppBuild === '') {\n    }\n    if (selectScript === '') {\n      toast({\n        title: 'Please Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (!selectVisualScript && isVisEnabled) {\n      toast({\n        title: 'Please Visual Select Script ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (getSelectedDeviceList.length <= 0) {\n      toast({\n        title: 'Please Select  Devices',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (\n      startDate.valueOf() + 294500 >= endDate.valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start & End time have Invalid Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (\n      parseInt(getInterval) < parseInt(getMaxTestDuration) &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid Max Test Duration > Interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      (endDate.valueOf() - startDate.valueOf()) / 60000 < getInterval &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Invalid time interval',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    if (\n      startDate.valueOf() <= new Date().valueOf() &&\n      scheduleType === 'SCHEDULE'\n    ) {\n      toast({\n        title: 'Start and End Time Invalid',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    const optionValue = getOptionalParam();\n\n    const devicebusy = validateBusyDevice(\n      busyDeviceSlots,\n      new Date(dateTimeConverterWithTimeZone(startDate)).getTime(),\n      new Date(dateTimeConverterWithTimeZone(endDate)).getTime(),\n    );\n\n    if (devicebusy.length > 0) {\n      toast({\n        title: 'Busy Device Occured',\n        description: devicebusy.join(' , '),\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n\n    const config = {\n      deviceId: getSelectedDeviceList,\n      testConfiguration: {\n        captureHAR: recordNetworkCalls,\n        captureCPUMetrics: recordCPU,\n        captureMemoryMetrics: recordMemory,\n        captureBatteryMetrics: recordBattery,\n        captureGraphicsMetrics: recordGraphics,\n        captureDeviceScreenShots: recordDeviceScreenShots,\n        recordDeviceScreen: isVisEnabled ? isVisEnabled : recordDeviceScreen,\n        captureDeviceNetworkPackets: recordDeviceNetworkPackets,\n        captureAutomationLogs: systemDebugLogs,\n        captureSystemDebugLogs: systemDebugLogs,\n        captureLiveLogs: liveLogs,\n      },\n      scheduleConfiguration:\n        scheduleType === 'SCHEDULE'\n          ? {\n              startTime: dateTimeConverterWithTimeZone(startDate),\n              endTime: dateTimeConverterWithTimeZone(endDate),\n              interval: parseInt(getInterval),\n            }\n          : {\n              startTime: dateTimeConverterWithTimeZone(new Date()),\n            },\n      testAction: {\n        pre: {},\n        post: {},\n      },\n      testParameters: {\n        testType: 'app-automation',\n        maxTestDuration: parseInt(getMaxTestDuration),\n        testFramework:\n          framework === 'appium' ? `appium-${language}` : 'android-uiautomator',\n        projectName: selectProject,\n        packageName: getPackageName,\n        browserName:\n          framework === 'appium' && getActiveTab === 1 ? selectBrowser : '',\n        browserVersion:\n          framework === 'appium' && getActiveTab === 1 ? selectVersion : '',\n        trayName: getTrayFromList(selectTrayValue, selectTrayOptionList),\n        visualMonitoringEnabled: isVisEnabled,\n        visualTestApplicationUrl: isVisEnabled\n          ? getApplicationUrlHelper(selectVisualScriptList, selectVisualScript)\n          : '',\n        ...optionValue,\n      },\n      applicationUrl:\n        getActiveTab === 0\n          ? getApplicationUrlHelper(selectAppBuildListOptions, selectAppBuild)\n          : '',\n      testApplicationUrl: getApplicationUrlHelper(\n        selectScriptListOptions,\n        selectScript,\n      ),\n      executionType: scheduleType,\n    };\n    // console.log({config})\n    dispatch(testExecutionActions.loadTestExecutionData(config));\n  };\n  const addKeyHandler = () => {\n    setAddedKey([...getAddedKey, { keyName: ' ', value: ' ' }]);\n  };\n\n  const refreshApplicationList = fileCategory => {\n    if (selectProject === '') {\n      toast({\n        title: 'Please Select Project ',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n      return;\n    }\n    if (selectProject !== '') {\n      if (\n        fileCategory === 'android-application' ||\n        fileCategory === 'android-application,ios-application'\n      ) {\n        const paramStringAppBuild = {\n          fileCategory:\n            framework === 'appium'\n              ? 'android-application,ios-application'\n              : 'android-application',\n          projectName: selectProject,\n          testType: 'app-automation',\n        };\n\n        dispatch(\n          testExecutionActions.loadSelectAppBuildAndroidList(\n            paramStringAppBuild,\n          ),\n        );\n        setSelectAppBuild('');\n      } else if (\n        fileCategory === 'android-test-application' ||\n        fileCategory === `appium-${language}-test-application`\n      ) {\n        const paramStringScript = {\n          fileCategory:\n            framework === 'appium'\n              ? `appium-${language}-test-application`\n              : 'android-test-application',\n          projectName: selectProject,\n        };\n\n        dispatch(\n          testExecutionActions.loadSelectScriptAndroidList(paramStringScript),\n        );\n        setSelectScript('');\n      } else if (fileCategory === 'visual-journey-script') {\n        const paramStringVisualScript = {\n          fileCategory: 'visual-journey-script',\n          projectName: selectProject,\n          testType: 'app-automation',\n        };\n\n        dispatch(\n          testExecutionActions.loadSelectVisualScriptList(\n            paramStringVisualScript,\n          ),\n        );\n        setSelectVisualScript('');\n      }\n    }\n  };\n  console.log({ selectedDevices });\n  const browserList = [{ name: 'chrome' }];\n  const versionList = [{ name: '1.128.0' }];\n  return (\n    <>\n      <Flex flexDirection=\"column\" position=\"relative\">\n        {(loadingCreateProject || loadingExecuteSchedule) && (\n          <LoadingComponent\n            height=\"120vh\"\n            top=\"-65px\"\n            isOverLay={true}\n            position=\"absolute\"\n          ></LoadingComponent>\n        )}\n        <Stack spacing=\"10px\" padding=\"15px 25px\">\n          <LabelFieldComponent label=\"Project\">\n            <SelectComponent\n              name=\"uiautomator\"\n              type=\"project\"\n              selectValue={selectProject}\n              setSelectValue={setSelectProject}\n              selectOptions={selectProjectOptionList}\n              title=\"Select Project\"\n            ></SelectComponent>\n            <Text padding=\"0px 5px\">OR</Text>\n            <InputComponent\n              setInputValue={setProjectName}\n              inputValue={projectName}\n              title=\"Enter Project Name\"\n            ></InputComponent>\n            <ButtonComp\n              name=\"createProjectUiautomator\"\n              padding=\"7px 12px\"\n              buttonHandler={createProjectHandler}\n            >\n              Create\n            </ButtonComp>\n          </LabelFieldComponent>\n          {framework === 'appium' && (\n            <AppBuildMwebButton\n              setActiveTab={setActiveTab}\n              appbuild={\n                <LabelFieldComponent label=\"App Build\">\n                  <SelectComponent\n                    type=\"application\"\n                    name=\"uiautomator\"\n                    selectOptions={selectAppBuildListOptions}\n                    selectValue={selectAppBuild}\n                    setSelectValue={setSelectAppBuild}\n                    title=\"Default\"\n                  ></SelectComponent>\n\n                  <RefreshIconButton\n                    clickHandler={() =>\n                      refreshApplicationList(\n                        framework === 'appium'\n                          ? 'android-application,ios-application'\n                          : 'android-application',\n                      )\n                    }\n                  ></RefreshIconButton>\n                  <Text padding=\"0px 5px\">OR</Text>\n                  <UploadButton\n                    validate={framework === 'appium' ? '.ipa , .apk' : '.apk'}\n                    placeholder=\"Upload App Build\"\n                    uploadButtonHandler={appBuildUploadHandler}\n                    enableProgress={\n                      getApplicationType === 'appbuild' &&\n                      (loadingFileUpload || loadingapplicationUrl)\n                    }\n                    progressValue={getUploadProgessValue}\n                  ></UploadButton>\n                </LabelFieldComponent>\n              }\n              mweb={\n                <LabelFieldComponent label=\"Browser & Version\">\n                  <SelectComponent\n                    type=\"project\"\n                    name=\"uiautomator\"\n                    selectOptions={browserList}\n                    selectValue={selectBrowser}\n                    setSelectValue={setSelectBrowser}\n                    title=\"Default\"\n                  ></SelectComponent>\n                  <SelectComponent\n                    type=\"project\"\n                    name=\"uiautomator\"\n                    selectOptions={versionList}\n                    selectValue={selectVersion}\n                    setSelectValue={setSelectVersion}\n                    title=\"Default\"\n                  ></SelectComponent>\n                </LabelFieldComponent>\n              }\n            ></AppBuildMwebButton>\n          )}\n          {framework === 'uiautomator' && (\n            <LabelFieldComponent label=\"App Build\">\n              <SelectComponent\n                type=\"application\"\n                name=\"uiautomator\"\n                selectOptions={selectAppBuildListOptions}\n                selectValue={selectAppBuild}\n                setSelectValue={setSelectAppBuild}\n                title=\"Default\"\n              ></SelectComponent>\n\n              <RefreshIconButton\n                clickHandler={() =>\n                  refreshApplicationList(\n                    framework === 'appium'\n                      ? 'android-application,ios-application'\n                      : 'android-application',\n                  )\n                }\n              ></RefreshIconButton>\n              <Text padding=\"0px 5px\">OR</Text>\n              <UploadButton\n                validate={framework === 'appium' ? '.ipa , .apk' : '.apk'}\n                placeholder=\"Upload App Build\"\n                uploadButtonHandler={appBuildUploadHandler}\n                enableProgress={\n                  getApplicationType === 'appbuild' &&\n                  (loadingFileUpload || loadingapplicationUrl)\n                }\n                progressValue={getUploadProgessValue}\n              ></UploadButton>\n            </LabelFieldComponent>\n          )}\n          <>\n            <LabelFieldComponent label=\"Test Suite\">\n              <SelectComponent\n                name=\"uiautomator\"\n                selectOptions={selectScriptListOptions}\n                title=\"Select Test Suite\"\n                selectValue={selectScript}\n                setSelectValue={setSelectScript}\n              ></SelectComponent>\n\n              <RefreshIconButton\n                clickHandler={() =>\n                  refreshApplicationList(\n                    framework === 'appium'\n                      ? `appium-${language}-test-application`\n                      : 'android-test-application',\n                  )\n                }\n              ></RefreshIconButton>\n              <Text padding=\"0px 5px\">OR</Text>\n\n              <UploadButton\n                validate={framework === 'appium' ? '.zip' : '.apk'}\n                uploadButtonHandler={scriptUploadHandler}\n                placeholder=\"Upload Test Suite\"\n                fileType={\n                  framework === 'appium'\n                    ? `appium-${language}-test-application`\n                    : 'android-test-application'\n                }\n                enableProgress={\n                  (getApplicationType ===\n                    `appium-${language}-test-application` ||\n                    getApplicationType === 'android-test-application') &&\n                  (loadingapplicationUrl || loadingFileUpload)\n                }\n                progressValue={getUploadProgessValue}\n              ></UploadButton>\n              <Text>Enable Visual Monitoring</Text>\n              <Switch\n                size=\"md\"\n                onChange={e => setVisEnable(e.target.checked)}\n              />\n            </LabelFieldComponent>\n          </>\n          {isVisEnabled && (\n            <LabelFieldComponent label=\"Visual Journey Script\">\n              <SelectComponent\n                name=\"xcui\"\n                type=\"application\"\n                selectOptions={selectVisualScriptList}\n                selectValue={selectVisualScript}\n                setSelectValue={setSelectVisualScript}\n                title=\"Select Visual Journey\"\n              ></SelectComponent>\n\n              <RefreshIconButton\n                clickHandler={() =>\n                  refreshApplicationList('visual-journey-script')\n                }\n              ></RefreshIconButton>\n              <Text padding=\"0px 5px\">OR</Text>\n\n              <UploadButton\n                validate=\".zip\"\n                fileType=\"visual-journey-script\"\n                uploadButtonHandler={scriptUploadHandler}\n                enableProgress={\n                  getApplicationType === 'visual-journey-script' &&\n                  (loadingapplicationUrl || loadingFileUpload)\n                }\n                progressValue={getUploadProgessValue}\n                placeholder=\"Upload Visual Journey\"\n              ></UploadButton>\n            </LabelFieldComponent>\n          )}\n          <LabelFieldComponent label=\"Devices\">\n            <Flex h=\"39px\">\n              <CustomIconButton>android</CustomIconButton>\n              {framework === 'appium' && (\n                <CustomIconButton>ios</CustomIconButton>\n              )}\n            </Flex>\n            <DashedButton\n              height=\"39px\"\n              width=\"250px\"\n              name=\"selectDeviceUiautomator\"\n              buttonHandler={selectDeviceButtonHandler}\n            >\n              Select Device(<Text textTransform=\"lowercase\">s</Text>)\n            </DashedButton>\n            <Text>OR</Text>\n            <SelectTrayOption\n              selectOptions={\n                framework === 'appium'\n                  ? getFilterTrayType\n                  : selectTrayOptionList\n              }\n              title=\"Select Tray\"\n              selectValue={selectTrayValue}\n              setSelectValue={setTraySelectValue}\n            ></SelectTrayOption>\n\n            {getSelectedDeviceList.length && (\n              <Text>{getSelectedDeviceList.length} Device selected</Text>\n            )}\n          </LabelFieldComponent>\n          <SelectDevicePopup\n            selectedDeviceHandler={selectedDeviceHandler}\n            selectedDeviceList={selectedDevices}\n            tableData={\n              framework === 'appium'\n                ? getFilterDeviceType\n                : getAndroidDevicesList\n            }\n            setActiveDevicePopup={setActiveDevicePopup}\n            activeDevicePopup={activeDevicePopup}\n            isLoading={deviceListListLoading}\n            errorDeviceData={deviceListDataError}\n          ></SelectDevicePopup>\n\n          <Flex marginTop=\"10px\" align=\"flex-start\">\n            <Flex\n              width=\"250px\"\n              align=\"center\"\n              height=\"35px\"\n              textTransform=\"capitalize\"\n            >\n              <Text whiteSpace=\"nowrap\">Record Test</Text>\n            </Flex>\n            <Flex flex={1} flexDirection=\"column\">\n              <HStack spacing=\"0px\">\n                <CheckboxComp\n                  value={recordDeviceScreen || isVisEnabled}\n                  title=\"Screen Recording\"\n                  setCheckedValue={setRecordDeviceScreen}\n                ></CheckboxComp>\n                <CheckboxComp\n                  value={systemDebugLogs}\n                  title=\"Automation & Debug Logs\"\n                  setCheckedValue={setSystemDebugLogs}\n                ></CheckboxComp>\n              </HStack>\n\n              <HStack spacing=\"0px\"></HStack>\n              <HStack spacing=\"0px\">\n                <CheckboxComp\n                  value={recordNetworkCalls}\n                  title=\"Network Logs\"\n                  setCheckedValue={setRecordNetworkCalls}\n                ></CheckboxComp>\n              </HStack>\n              <HStack spacing=\"0px\"></HStack>\n            </Flex>\n          </Flex>\n          <LabelFieldComponent>\n            <Text maxWidth=\"45%\">\n              Test Parameters\n              <InfoComponent\n                labelmessage={`Max Test Duration ${getMaxTestDuration} min`}\n              ></InfoComponent>{' '}\n            </Text>\n            <LaunchIconButton\n              viewCode={testSuitePopupHandler}\n            ></LaunchIconButton>\n          </LabelFieldComponent>\n          <LabelFieldComponent label=\"Execute Test\">\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length || !areDevicesBusy}\n              fontWeight=\"500\"\n              name=\"executeNowUiautomator\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              buttonHandler={() => scheduleAutomationTestHandler('NOW')}\n            >\n              Now\n            </ButtonComp>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <Text padding=\"5px\">OR</Text>\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <ButtonComp\n              isDisabled={!getSelectedDeviceList.length}\n              fontWeight=\"500\"\n              padding=\"7px 20px\"\n              backgroundColor=\"blue1\"\n              color=\"white\"\n              marginLeft=\"0px\"\n              buttonHandler={() => scheduleAutomationTestHandler('SCHEDULE')}\n              name=\"scheduleTestUiautomator\"\n            >\n              Schedule\n            </ButtonComp>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              Start date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <InputDateTime\n              name=\"startDateUiautomator\"\n              selectedDate={startDate}\n              setSelectDate={setStartDate}\n            ></InputDateTime>\n          </LabelFieldComponent>\n\n          <LabelFieldComponent>\n            <Text padding=\"5px\" textTransform=\"none\" width=\"200px\">\n              End date and time\n              <InfoComponent labelmessage=\"Local time zone\"></InfoComponent>\n            </Text>\n            <InputDateTime\n              name=\"endDateUiautomator\"\n              selectedDate={endDate}\n              setSelectDate={setEndDate}\n            ></InputDateTime>\n            {getMessageFlag && (\n              <Text color=\"red1\" textTransform=\"none\">\n                {' '}\n                *End time &gt; Start time{' '}\n              </Text>\n            )}\n          </LabelFieldComponent>\n          <LabelFieldComponent>\n            <Text padding=\"5px\" width=\"200px\">\n              Interval\n              <InfoComponent labelmessage=\"Interval between two test execution a single device(in minutes)\"></InfoComponent>\n            </Text>\n            <ToggleSelectInput\n              isShadow={true}\n              selectOptions={timeIntervalValue}\n              selectValue={getInterval}\n              setSelectValue={setInterval}\n            ></ToggleSelectInput>\n          </LabelFieldComponent>\n\n          <PopupCardDetail\n            isOpen={uiAutomatorMozarkTestingPopupCard}\n            onClose={setUiAutomatorMozarkTestingPopupCard}\n          >\n            <Stack\n              width=\"100%\"\n              padding=\"10px 5px\"\n              spacing=\"15px\"\n              overflowY=\"auto\"\n              css={{\n                '&::-webkit-scrollbar': {\n                  width: '8px',\n                  border: '5px solid #F3F6F9',\n                },\n                '&::-webkit-scrollbar-track': {\n                  boxShadow: 'inset 0 0 6px white',\n                },\n                '&::-webkit-scrollbar-thumb': {\n                  backgroundColor: '#C1C1C1',\n                  borderRadius: '5px',\n                  boreder: '2px solid',\n                },\n              }}\n            >\n              <KeyValueComponent\n                label=\"Project Name\"\n                getValue={selectProject}\n                isDisabled={true}\n              ></KeyValueComponent>\n              <KeyValueComponent\n                label=\"Test Framework\"\n                getValue={\n                  framework ? `appium-${language}` : 'android-uiautomator'\n                }\n                isDisabled={true}\n              ></KeyValueComponent>\n              {selectAppBuild === '' && (\n                <KeyValueComponent\n                  isMandatory={false}\n                  label=\"Package Name\"\n                  getValue={getPackageName}\n                  setValue={setPackageName}\n                  isDisabled={false}\n                ></KeyValueComponent>\n              )}\n\n              <Flex justifyContent=\"space-between\">\n                <Text>Maximum Test Duration</Text>\n\n                <SelectValueComponent\n                  isShadow={false}\n                  width=\"150px\"\n                  selectOptions={timeIntervalValue}\n                  selectValue={getMaxTestDuration}\n                  setSelectValue={setMaxTestDuration}\n                ></SelectValueComponent>\n              </Flex>\n              {isVisEnabled && (\n                <Flex justifyContent=\"space-between\">\n                  <Text>Visual Synthetic Monitoring</Text>\n                  <Switch isChecked={isVisEnabled} />\n                </Flex>\n              )}\n              {isVisEnabled && (\n                <KeyValueComponent\n                  isMandatory={false}\n                  isDisabled={true}\n                  label=\"Visual Journey Script\"\n                  getValue={isVisEnabled ? getVisualUrl : ''}\n                  // setValue={setPackageName}\n                ></KeyValueComponent>\n              )}\n              {getAddedKey.length > 0 &&\n                getAddedKey.map((item, index) => (\n                  <NewKeyValueComponent\n                    objectData={item}\n                    key={index}\n                  ></NewKeyValueComponent>\n                ))}\n              <Flex justifyContent=\"flex-end\">\n                <ButtonComp\n                  fontSize=\"18px\"\n                  padding=\"5px 10px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  fontWeight=\"600\"\n                  buttonHandler={addKeyHandler}\n                  name=\"addNewParamUiautomator\"\n                >\n                  +\n                </ButtonComp>\n              </Flex>\n\n              <Flex justify=\"center\">\n                <ButtonComp\n                  fontWeight=\"500\"\n                  padding=\"7px 25px\"\n                  backgroundColor=\"blue1\"\n                  color=\"white\"\n                  margin=\"0px\"\n                  name=\"saveOptionParamUiautomator\"\n                  buttonHandler={() =>\n                    setUiAutomatorMozarkTestingPopupCard(false)\n                  }\n                >\n                  Save\n                </ButtonComp>\n              </Flex>\n            </Stack>\n          </PopupCardDetail>\n        </Stack>\n      </Flex>\n    </>\n  );\n}\n\nexport default UiAutomatorMozarkTesting;\n","// @ts-nocheck\nimport {\n  Flex,\n  HStack,\n  Stack,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  useRadioGroup,\n} from '@chakra-ui/react';\nimport SubContainer from 'app/components/SubContainer';\nimport SubLayout from 'app/components/SubLayout';\n\nimport React from 'react';\nimport CustomTabButton from '../Appium/components/CustomTabButton';\nimport SelectButton from '../Appium/components/SelectButton';\nimport LabelFieldComponent from '../AutomationTest/components/LabelFieldComponent';\nimport UiAutomatorCiIntegration from './Features/UiAutomatorCiIntegration';\nimport UiAutomatorMozarkTesting from './Features/UiAutomatorMozarkTesting';\nimport { useState } from 'react';\n\nconst options = ['Python', 'Java'];\nexport function UiAutomator({ getTabIndex }) {\n  const [language, setLanguage] = useState('python');\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: 'language',\n    defaultValue: 'python',\n    onChange: val => setLanguage(val),\n  });\n\n  const group = getRootProps();\n\n  return (\n    // <SubContainer>\n    <SubLayout>\n      <Flex\n        flexDirection=\"column\"\n        fontFamily=\"Montserrat\"\n        fontWeight=\"500\"\n        fontSize=\"14px\"\n        color=\"grey13\"\n        bg=\"white\"\n        width=\"100%\"\n        // padding=\"15px 25px\"\n      >\n        <Tabs width=\"100%\">\n          <Stack spacing=\"10px\">\n            {/* <LabelFieldComponent label=\"Execution Type\">\n                <CustomTabButton>Mozark testing</CustomTabButton>\n                <CustomTabButton>CI Integration</CustomTabButton>\n              </LabelFieldComponent> */}\n\n            {/* <LabelFieldComponent label=\"Language\">\n                <HStack {...group}>\n                  {options.map(value => {\n                    const radio = getRadioProps({ value });\n                    return (\n                      <SelectButton key={value} {...radio}>\n                        {value}\n                      </SelectButton>\n                    );\n                  })}\n                </HStack>\n              </LabelFieldComponent> */}\n\n            <HStack width=\"100%\">\n              <TabPanels padding=\"0px\" margin=\"0px\">\n                <TabPanel width=\"100%\" padding=\"0px\">\n                  <UiAutomatorMozarkTesting\n                    getTabIndex={getTabIndex}\n                    language={language}\n                    framework=\"uiautomator\"\n                  ></UiAutomatorMozarkTesting>\n                </TabPanel>\n                {/* <TabPanel width=\"100%\" padding=\"0px\">\n                    <UiAutomatorCiIntegration></UiAutomatorCiIntegration>\n                  </TabPanel> */}\n              </TabPanels>\n            </HStack>\n          </Stack>\n        </Tabs>\n      </Flex>\n    </SubLayout>\n    // </SubContainer>\n  );\n}\n\nexport default UiAutomator;\n"],"sourceRoot":""}