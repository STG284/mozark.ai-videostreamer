{"version":3,"sources":["app/pages/DownLoadLog/components/FileComponet.tsx","app/pages/DownLoadLog/components/ScreenshotComponet.tsx","app/pages/DownLoadLog/components/ScreenshotDownload.tsx","app/pages/DownLoadLog/components/DownloadFilecomp.tsx","app/utils/videoFile.ts","app/pages/DownLoadLog/index.tsx"],"names":["FileComponet","_ref","filename","actions","useDownloadLogSlice","testId","useParams","dispatch","useDispatch","_jsxs","Flex","width","padding","borderBottom","borderBottomColor","color","children","_jsx","concat","flex","textTransform","target","rel","Icon","cursor","w","onClick","downloadFetchFileHandler","loadDownloadFileUrl","type","h","as","HiDownload","ScreenshotComponet","ScreenshotDownload","fileData","_Fragment","Accordion","allowToggle","AccordionItem","AccordionButton","pa","_focus","boxShadow","_hover","bg","fontSize","fontWeight","align","paddingLeft","AccordionIcon","AccordionPanel","map","fileName","index","DownloadFilecomp","screenshotsData","tabType","errorDownloadFile","useSelector","selectDownloadFileError","errorDownloadScreenshots","selectDownloadScreenshotError","fileUrlData","selectDownloadFileUrl","useEffect","hasOwnProperty","url","s3PresignedUrl","getDownloadFileHandler","fileExtension","slice","lastIndexOf","includes","isVideoFile","a","document","createElement","style","display","href","setAttribute","body","appendChild","click","removeChild","axios","method","headers","responseType","then","response","window","URL","createObjectURL","Blob","data","link","catch","error","console","downloadFileUrlLoaded","alignContent","flexDirection","justifyContent","height","overflowY","css","border","backgroundColor","borderRadius","boreder","NoContent","message","length","DownloadLog","downloadFileData","selectDownloadLogData","downloadScreenshotsFileData","selectDownloadScreenshotsData","isLoading","selectLoading","isLoadingScreenshots","selectLoadingScreenshots","toast","useToast","fileUrlDownloadError","selectDownloadfileUrlError","DownloadLogDataLoaded","DownloadScreenshotsDataLoaded","loadDownloadLogData","loadDownloadScreenshotsData","title","description","status","isClosable","position","downloadFileUrlError","marginTop","fontFamily","background","Text","paddingBottom","LoadingComponent","Stack","spacing"],"mappings":"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","file":"static/js/30.66d8a722.chunk.js","sourcesContent":["// @ts-nocheck\nimport { Flex, Icon } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { HiDownload } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useDownloadLogSlice } from '../slice';\nimport { selectDownloadFileUrl } from '../slice/selectors';\n\nfunction FileComponet({ filename }) {\n  const { actions } = useDownloadLogSlice();\n  const { testId } = useParams();\n  const dispatch = useDispatch();\n\n  const downloadFetchFileHandler = () => {\n    dispatch(actions.loadDownloadFileUrl({ testId, filename, type: 'output' }));\n  };\n\n  return (\n    <Flex\n      width=\"100%\"\n      padding=\"5px\"\n      borderBottom=\"1px solid\"\n      borderBottomColor=\"white10\"\n      color=\"grey13\"\n    >\n      <Flex\n        data-file-name={`download-file-${filename}`}\n        flex={2}\n        padding=\"1px 5px\"\n        textTransform=\"none\"\n      >\n        {filename}\n      </Flex>\n      <Flex flex={1} padding=\"1px 5px\">\n        <a target=\"_blank\" rel=\"noreferrer\">\n          <Icon\n            cursor=\"pointer\"\n            data-icon-id={`download-file-icon-${filename}`}\n            w=\"20px\"\n            onClick={downloadFetchFileHandler}\n            h=\"20px\"\n            as={HiDownload}\n          ></Icon>\n        </a>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default FileComponet;\n","// @ts-nocheck\nimport { Flex, Icon } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { HiDownload } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useDownloadLogSlice } from '../slice';\nimport { selectDownloadFileUrl } from '../slice/selectors';\n\nfunction ScreenshotComponet({ filename }) {\n  const { actions } = useDownloadLogSlice();\n  const { testId } = useParams();\n  const dispatch = useDispatch();\n\n  const downloadHandler = () => {\n    try {\n      // window.location.href = url;\n    } catch (e) {\n      //  console.log(e);\n    }\n  };\n\n  // useEffect(() => {\n  //   //console.log(fileUrlData);\n  //   if (fileUrlData.hasOwnProperty('url')) {\n  //     try {\n  //       //window.location.href = fileUrlData.url;\n  //       window.open(fileUrlData.url);\n  //       //console.log(window.location);\n  //       dispatch(actions.downloadFileUrlLoaded({}));\n  //     } catch (e) {\n  //       //  console.log(e);\n  //     }\n  //   }\n  // }, [fileUrlData]);\n\n  const downloadFetchFileHandler = () => {\n    dispatch(\n      actions.loadDownloadFileUrl({ testId, filename, type: 'screenshots' }),\n    );\n  };\n\n  return (\n    <Flex\n      width=\"100%\"\n      padding=\"5px\"\n      borderBottom=\"1px solid\"\n      borderBottomColor=\"white10\"\n      color=\"grey13\"\n    >\n      <Flex\n        flex={2}\n        data-screen-name={`download-screenshot-${filename}`}\n        padding=\"1px 5px\"\n        textTransform=\"none\"\n      >\n        {filename}\n      </Flex>\n      <Flex flex={1} padding=\"1px 5px\">\n        <a target=\"_blank\" rel=\"noreferrer\">\n          <Icon\n            cursor=\"pointer\"\n            data-icon-id={`download-screenshot-icon-${filename}`}\n            w=\"20px\"\n            onClick={downloadFetchFileHandler}\n            h=\"20px\"\n            as={HiDownload}\n          ></Icon>\n        </a>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default ScreenshotComponet;\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Flex,\n  Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport FileComponet from './FileComponet';\nimport ScreenshotComponet from './ScreenshotComponet';\n\nfunction ScreenshotDownload({ fileData }) {\n  return (\n    <>\n      <Accordion allowToggle>\n        <AccordionItem padding=\"0px\">\n          <AccordionButton\n            padding=\"0px\"\n            pa\n            _focus={{ boxShadow: '0px 0px 0px white' }}\n            _hover={{ bg: 'none' }}\n          >\n            <Flex\n              padding=\"4px 2px\"\n              fontSize=\"14px\"\n              fontWeight=\"500\"\n              align=\"center\"\n              width=\"100%\"\n            >\n              <Flex paddingLeft=\"8px\" flex={2}>\n                {' '}\n                Screenshots\n              </Flex>\n              <Flex flex={1}>\n                <AccordionIcon />\n              </Flex>\n            </Flex>\n          </AccordionButton>\n          <AccordionPanel padding=\"0px\" paddingLeft=\"10px\">\n            {fileData.map((fileName, index) => (\n              <ScreenshotComponet\n                key={index}\n                filename={fileName}\n                // url={file.url}\n              ></ScreenshotComponet>\n            ))}\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </>\n  );\n}\n\nexport default ScreenshotDownload;\n","// @ts-nocheck\nimport { Flex, HStack, Icon, Text } from '@chakra-ui/react';\nimport NoContent from 'app/components/NoContent';\nimport React, { useEffect } from 'react';\nimport { HiDownload } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useDownloadLogSlice } from '../slice';\nimport {\n  selectDownloadFileError,\n  selectDownloadFileUrl,\n  selectDownloadScreenshotError,\n} from '../slice/selectors';\nimport FileComponet from './FileComponet';\nimport ScreenshotDownload from './ScreenshotDownload';\nimport axios from 'axios';\nimport { isVideoFile } from 'app/utils/videoFile';\n\nconst getDownloadFileHandler = (fileName, s3PresignedUrl) => {\n  if (isVideoFile(fileName)) {\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = s3PresignedUrl;\n    a.setAttribute('download', fileName); // Optional: Set a custom file name\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  } else {\n    axios({\n      method: 'GET',\n      url: s3PresignedUrl,\n      headers: {\n        'Content-Disposition': `attachment; filename=${fileName}`,\n      },\n      responseType: 'blob',\n    })\n      .then(response => {\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', fileName);\n        document.body.appendChild(link);\n        link.click();\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n};\n\nfunction DownloadFilecomp({ fileData, screenshotsData, tabType }) {\n  const errorDownloadFile = useSelector(selectDownloadFileError);\n  const errorDownloadScreenshots = useSelector(selectDownloadScreenshotError);\n  const fileUrlData = useSelector(selectDownloadFileUrl);\n  const dispatch = useDispatch();\n  const { actions } = useDownloadLogSlice();\n\n  useEffect(() => {\n    if (fileUrlData.hasOwnProperty('url') && fileUrlData.url !== '') {\n      const s3PresignedUrl = fileUrlData.url;\n      const fileName = fileUrlData.fileName;\n      getDownloadFileHandler(fileName, s3PresignedUrl);\n      dispatch(actions.downloadFileUrlLoaded({}));\n    }\n  }, [fileUrlData]);\n\n  return (\n    <Flex\n      alignContent=\"center\"\n      flexDirection=\"column\"\n      fontSize=\"14px\"\n      justifyContent=\"start\"\n      padding=\"20px\"\n    >\n      <Flex width=\"100%\" bg=\"white3\" color=\"grey1\" padding=\"5px\">\n        <Flex flex={2} padding=\"1px 5px\">\n          file name\n        </Flex>\n        <Flex flex={1} padding=\"1px 5px\">\n          Download Links\n        </Flex>\n      </Flex>\n      <Flex height=\"450px\" flexDirection=\"column\">\n        <Flex\n          overflowY=\"auto\"\n          css={{\n            '&::-webkit-scrollbar': {\n              width: '8px',\n              //height: '30px',\n              border: '5px solid #F3F6F9',\n            },\n            '&::-webkit-scrollbar-track': {\n              boxShadow: 'inset 0 0 6px white',\n            },\n            '&::-webkit-scrollbar-thumb': {\n              backgroundColor: '#C1C1C1',\n              borderRadius: '5px',\n              boreder: '2px solid',\n            },\n          }}\n          flexDirection=\"column\"\n        >\n          {tabType !== 'lr-interact' && (\n            <>\n              {errorDownloadFile === 1 ? (\n                <NoContent\n                  height=\"100px\"\n                  message=\"Could not load Files\"\n                ></NoContent>\n              ) : (\n                <>\n                  <>\n                    {fileData.length > 0 ? (\n                      <>\n                        {fileData.map((fileName, index) => (\n                          <FileComponet\n                            filename={fileName}\n                            key={index}\n                          ></FileComponet>\n                        ))}\n                      </>\n                    ) : (\n                      <NoContent\n                        height=\"100px\"\n                        message=\"No File Available\"\n                      ></NoContent>\n                    )}\n                  </>\n                </>\n              )}\n            </>\n          )}\n          {errorDownloadScreenshots === 1 ? (\n            <NoContent\n              height=\"100px\"\n              message=\"Could not load Screenshots\"\n            ></NoContent>\n          ) : (\n            <>\n              {screenshotsData.length > 0 ? (\n                <ScreenshotDownload\n                  fileData={screenshotsData}\n                ></ScreenshotDownload>\n              ) : (\n                <NoContent\n                  height=\"100px\"\n                  message=\"No Screenshots Available\"\n                ></NoContent>\n              )}\n            </>\n          )}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default DownloadFilecomp;\n","export function isVideoFile(fileName) {\n  const videoExtensions = ['.mkv', '.mp4'];\n  const fileExtension = fileName.slice(\n    ((fileName.lastIndexOf('.') - 1) >>> 0) + 2,\n  );\n\n  return videoExtensions.includes(`.${fileExtension}`);\n}\n","// @ts-nocheck\nimport { Flex, Stack, Text, useToast } from '@chakra-ui/react';\nimport LoadingComponent from 'app/components/LoadingComponent';\nimport NoContent from 'app/components/NoContent';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { selectTestSessionData } from '../TestSession/slice/selectors';\nimport DownloadFilecomp from './components/DownloadFilecomp';\nimport { useDownloadLogSlice } from './slice';\nimport {\n  selectDownloadfileUrlError,\n  selectDownloadLogData,\n  selectDownloadScreenshotsData,\n  selectLoading,\n  selectLoadingScreenshots,\n} from './slice/selectors';\n\nexport function DownloadLog({ tabType }) {\n  const downloadFileData = useSelector(selectDownloadLogData);\n  const downloadScreenshotsFileData = useSelector(\n    selectDownloadScreenshotsData,\n  );\n  const isLoading = useSelector(selectLoading);\n  const isLoadingScreenshots = useSelector(selectLoadingScreenshots);\n  const dispatch = useDispatch();\n  const { actions } = useDownloadLogSlice();\n  const { testId } = useParams();\n  const toast = useToast();\n  const fileUrlDownloadError = useSelector(selectDownloadfileUrlError);\n  useEffect(() => {\n    if (tabType !== 'lr-interact') {\n      dispatch(actions.DownloadLogDataLoaded([]));\n      dispatch(actions.DownloadScreenshotsDataLoaded([]));\n\n      dispatch(actions.loadDownloadLogData(testId));\n      dispatch(actions.loadDownloadScreenshotsData(testId));\n    } else {\n      dispatch(actions.DownloadScreenshotsDataLoaded([]));\n      dispatch(actions.loadDownloadScreenshotsData(testId));\n    }\n  }, [testId]);\n\n  useEffect(() => {\n    if (fileUrlDownloadError === 1) {\n      toast({\n        title: 'Something went wrong',\n        description: 'Please refresh',\n        status: 'error',\n        isClosable: true,\n        position: 'bottom-right',\n      });\n\n      dispatch(actions.downloadFileUrlError(null));\n    }\n  }, [fileUrlDownloadError]);\n\n  // console.log(downloadFileData)\n  return (\n    <Flex\n      marginTop=\"10px \"\n      fontFamily=\"Montserrat\"\n      fontWeight=\"500\"\n      fontSize=\"14px\"\n      flexDirection=\"column\"\n      background=\"white1\"\n      width=\"100%\"\n      padding=\"10px\"\n      color=\"grey15\"\n      boxShadow=\"2px 8px 6px #00000029\"\n    >\n      <Text\n        paddingBottom=\"1\"\n        paddingLeft=\"0.5\"\n        fontWeight=\"500\"\n        color=\"#3F4254\"\n      ></Text>\n      {isLoading || isLoadingScreenshots ? (\n        <LoadingComponent></LoadingComponent>\n      ) : (\n        <>\n          {(downloadFileData.length > 0 &&\n            downloadScreenshotsFileData.length > 0) ||\n          true ? (\n            <Stack width=\"100%\" spacing=\"12px\">\n              <DownloadFilecomp\n                fileData={downloadFileData}\n                tabType={tabType}\n                screenshotsData={downloadScreenshotsFileData}\n              ></DownloadFilecomp>\n            </Stack>\n          ) : (\n            <NoContent message=\"No Content Available\"></NoContent>\n          )}\n        </>\n      )}\n    </Flex>\n  );\n}\n\nexport default DownloadLog;\n"],"sourceRoot":""}